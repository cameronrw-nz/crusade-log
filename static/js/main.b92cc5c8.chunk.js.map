{"version":3,"sources":["Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/EditOutOfActions.tsx","Report/ReportUnit.tsx","Report/ReportUnits.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","CommonFields/Header.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","CalculateCrusadePoints","battleHonourCrusadePoints","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","outOfActionCrusadePoints","battleScar","UnitSummaryRows","BattleHonourRank","props","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","warlordTrait","name","effect","battleHonourDisplay","push","battleHonour","battleTrait","battleScarsDisplay","experienceDetails","onClick","EditOutOfActions","editOutOfAction","edit","index","editUnit","u","newOutOfAction","splice","outOfActionDisplay","value","onChange","e","o","target","type","Number","parseInt","preventDefault","outOfActions","style","padding","ReportUnit","initialExperience","effectField","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","className","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","i","newUnits","findIndex","powerLevel","goBack","undefined","updateArmy","ReportSummary","isContinuing","setIsContinuing","unitSummaries","id","UnitSummary","key","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","checked","selectedPowerLevel","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","src","DeleteIcon","alt","window","confirm","deleteUnit","Header","headerText","EditIcon","onEdit","UnitDisplay","isEdittingUnit","setIsEdittingUnit","EditArmy","isNewArmy","army","setArmy","saveArmy","handleDeleteArmy","newArmy","editArmy","a","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","colSpan","width","parse","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","setUnitsDisplay","useEffect","highestRank","BattleReady","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,wC,kBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,oLCEpC,SAASC,EAAyBC,GACrC,IAAIC,EAA8B,EAClCD,EAAKE,aAAeF,EAAKE,YAAYC,SAAQ,SAAAC,GACrCA,EAAIC,UAAYD,EAAIE,KACpBL,GAA+BG,EAAIE,OAI3C,IAAMC,EAAkBP,EAAKQ,oBACG,EAA1BR,EAAKS,mBACLT,EAAKU,SACLC,KAAKC,MAAMZ,EAAKa,MAAQ,GACxBZ,EAEN,OAAOM,EAAkB,EAAIA,EAAkB,EAI5C,SAASO,EAAuBd,GAAqB,IAAD,IACjDe,EAA4Bf,EAAKgB,eAAiBhB,EAAKgB,cAAcC,OAAS,EAAlD,UAC9BjB,EAAKgB,qBADyB,iBAC9B,EACME,KAAI,SAAAC,GAAE,OAAIA,EAAGC,wBAFW,aAC9B,EAEMC,QAAO,SAACC,EAAOC,GACb,OAAO,OAACD,QAAD,IAACA,IAAS,GAAKC,KAE5B,EAEFC,EAA2B,EAO/B,OANAxB,EAAKE,aAAeF,EAAKE,YAAYC,SAAQ,SAAAC,GACrCA,EAAIqB,YACJD,OAIDT,EAA4BS,ECkExBE,IC/EHC,ED+EGD,EA9Ff,SAAyBE,GAAmD,IAAD,EACjBC,oBAAkB,GADD,mBAChEC,EADgE,KAC3CC,EAD2C,KAOjExB,EAAkBR,EAAyB6B,EAAM5B,MAEnDgC,EAAsB,KACtBJ,EAAM5B,KAAKiC,eACXD,EACI,oCACI,4BAAI,4BAAI,8CACR,4BACI,4BAAKJ,EAAM5B,KAAKiC,aAAaC,MAC7B,4BAAKN,EAAM5B,KAAKiC,aAAaE,WAM7C,IAAMC,EAAsB,GACxBR,EAAM5B,KAAKgB,eAAiBY,EAAM5B,KAAKgB,cAAcC,OAAS,IAC9DmB,EAAoBC,KAAK,4BAAI,4BAAI,gDACjCT,EAAM5B,KAAKgB,cAAcb,SAAQ,SAAAmC,GAAiB,IAAD,IAC7CF,EAAoBC,KAChB,4BACI,sCAAKC,EAAaC,mBAAlB,aAAK,EAA0BL,MAC/B,sCAAKI,EAAaC,mBAAlB,aAAK,EAA0BJ,cAO/C,IAAMK,EAAoC,GACtCZ,EAAM5B,KAAKE,aAAe0B,EAAM5B,KAAKE,YAAYe,OAAS,IAC1DuB,EAAmBH,KAAK,4BAAI,4BAAI,4CAAwB,+BACxDT,EAAM5B,KAAKE,YAAYC,SAAQ,SAAAD,GACtBA,EAAYG,UAAaH,EAAYuB,YAG1Ce,EAAmBH,KACf,4BACI,4BAAKnC,EAAYuB,WAAWS,MAC5B,4BAAKhC,EAAYuB,WAAWU,cAM5C,IAAIM,EAAoB,KAwBxB,OAvBIX,IACAW,EACI,oCACI,4BACI,qDACA,4BAAKb,EAAM5B,KAAKQ,sBAEpB,4BACI,qDACA,4BAAKoB,EAAM5B,KAAKS,qBAEpB,4BACI,uCACA,4BAAKmB,EAAM5B,KAAKU,WAEpB,4BACI,sCACA,4BAAKkB,EAAM5B,KAAKa,UAO5B,oCACKmB,EACAI,EACAI,EACD,wBAAIE,QA9EZ,WACIX,GAAwBD,KA8EhB,iDAGA,4BACKvB,IAGRkC,K,SC1EDd,K,2BAAAA,E,kBAAAA,E,iCAAAA,E,gBAAAA,E,uBAAAA,M,KCkDGgB,MAjEf,SAA0Bf,GAetB,SAASgB,EAAgBC,EAAiCC,GACtDlB,EAAMmB,UAAS,SAACC,GACZ,IAAMC,EAAc,eAAQD,EAAE9C,YAAY4C,IAC1CD,EAAKI,GACLD,EAAE9C,YAAYgD,OAAOJ,EAAO,EAAGG,MAIvC,IAAME,EAAoC,GA2B1C,OA1BIvB,EAAM5B,KAAKE,aAAe0B,EAAM5B,KAAKE,YAAYe,OAAS,GAC1DW,EAAM5B,KAAKE,YAAYC,SAAQ,SAACD,EAAa4C,GAAW,IAAD,EAC9C5C,EAAYG,UAGjB8C,EAAmBd,KACf,4BACI,4BACI,2BACIe,MAAK,UAAElD,EAAYuB,kBAAd,aAAE,EAAwBU,OAC/BkB,SAAU,SAAAC,GAAC,OAAIV,GAAgB,SAACW,GAAD,OAAOA,EAAE9B,WAAYU,OAASmB,EAAEE,OAAOJ,QAAON,IAC7EW,KAAK,aAGb,4BACI,2BACIL,MAAOlD,EAAYI,GACnB+C,SAAU,SAAAC,GAAC,OAAIV,GAAgB,SAACW,GAAD,OAAOA,EAAEjD,GAAKoD,OAAOC,SAASL,EAAEE,OAAOJ,SAAQN,IAC9EW,KAAK,iBASzB,oCACI,4BACI,6CACA,4BAAI,4BAAQf,QArDxB,SAAwBY,GACpBA,EAAEM,iBAEFhC,EAAMmB,UAAS,SAACC,GACZ,IAAIa,EAAeb,EAAE9C,YAChB2D,IACDA,EAAe,IAGnBA,EAAaxB,KAAK,CAAEhC,UAAU,IAC9B2C,EAAE9C,YAAc2D,MA2CyBJ,KAAK,SAASK,MAAO,CAAEC,QAAS,SAAjE,SAER,4BACI,2CACA,gDAEHZ,ICoEEa,MA9Hf,SAAoBpC,GAChB,IAAMrB,EAAkBR,EAAyB6B,EAAM5B,MAAQ,EADtB,EAEb6B,mBAAStB,EAAkB,GAAhD0D,EAFkC,oBAIrC7C,EAAgB,EAChBJ,EAAgBY,EAAM5B,KAAKgB,cAAcE,KAAI,SAAAoB,GAAiB,IAAD,EAC7DlB,GAAiBkB,EAAalB,cAE9B,IAImF,EAJ/E8C,GAA+B,UAAA5B,EAAaC,mBAAb,eAA0BJ,SAAU,IACnEG,EAAa6B,OAASxC,EAAiByC,SAAWH,EAAoB,GACnE3B,EAAa6B,OAASxC,EAAiB0C,gBAAkBJ,EAAoB,IAC7E3B,EAAa6B,OAASxC,EAAiB2C,QAAUL,EAAoB,IACrE3B,EAAa6B,OAASxC,EAAiB4C,WAAaN,EAAoB,MAC3EC,EACI,2BACIT,KAAK,OACLL,OAAO,UAAAd,EAAaC,mBAAb,eAA0BJ,SAAU,GAC3CkB,SAAU,SAAAmB,GACN,IAAIxB,EAAC,eAAQpB,EAAM5B,MACfmB,EAAK6B,EAAEhC,cAAcyD,MAAK,SAAAC,GAAC,OAAIA,EAAEP,OAAS7B,EAAa6B,SACvD,OAAChD,QAAD,IAACA,OAAD,EAACA,EAAIoB,eACLpB,EAAIoB,YAAc,IAEtBpB,EAAIoB,YAAYJ,OAASqC,EAAMhB,OAAOJ,MACtCxB,EAAM+C,WAAW3B,OAMjC,OACI,4BACI,4BACKV,EAAa6B,MAElB,4BACKD,OAMjB,OACI,6BACI,2BAAOU,UAAU,mBACb,+BACI,4BACI,4BACI,2BAAIhD,EAAM5B,KAAKkC,OAEnB,+CAAqB,IAAMd,IAE/B,4BACI,qDACA,sCAAQQ,EAAM5B,KAAKQ,oBAAnB,UAEJ,4BACI,qDACA,4BACI,2BACIiD,KAAK,SACLJ,SAAU,SAAAmB,GACN,IAAIxB,EAAC,eAAQpB,EAAM5B,MACnBgD,EAAEvC,mBAAqBiD,OAAOC,SAASa,EAAMhB,OAAOJ,OACpDxB,EAAM+C,WAAW3B,IAErBI,MAAOxB,EAAM5B,KAAKS,uBAI9B,4BACI,uCACA,4BACI,2BACIgD,KAAK,SACLJ,SAAU,SAAAmB,GACN,IAAIxB,EAAC,eAAQpB,EAAM5B,MACnBgD,EAAEtC,SAAWgD,OAAOC,SAASa,EAAMhB,OAAOJ,OAC1CxB,EAAM+C,WAAW3B,IAErBI,MAAOxB,EAAM5B,KAAKU,aAI9B,4BACI,sCACA,4BACI,2BACI+C,KAAK,SACLJ,SAAU,SAAAmB,GACN,IAAIxB,EAAC,eAAQpB,EAAM5B,MACnBgD,EAAEnC,MAAQ6C,OAAOC,SAASa,EAAMhB,OAAOJ,OACvCxB,EAAM+C,WAAW3B,IAGrBI,MAAOxB,EAAM5B,KAAKa,UAI9B,4BACI,iDAGA,4BACKN,IAGRS,EACD,kBAAC,EAAD,CACIhB,KAAM4B,EAAM5B,KACZ+C,SAAU,SAACF,GACP,IAAMG,EAAe,eACdpB,EAAM5B,KADQ,CAEjBE,YAAY,YAAM0B,EAAM5B,KAAKE,aAAe,MAEhD2C,EAAKG,GACLpB,EAAM+C,WAAW3B,UCrC9B6B,MA9Ef,SAAqBjD,GAA2B,IAAD,EACjBC,mBAAyBD,EAAMkD,YAAYC,OAD1B,mBACpCA,EADoC,KAC7BC,EAD6B,OAEOnD,mBAAiB,GAFxB,mBAEpCoD,EAFoC,KAEjBC,EAFiB,KAIrCC,EAAeJ,EAAM7D,KAAI,SAAClB,EAAM8C,GAAW,IAAD,EAsB5C,aAAIlB,EAAMkD,YAAYM,2BAAtB,aAAI,EAAuCC,SAASvC,GAChD,OACI,kBAAC,EAAD,CAAY9C,KAAMA,EAAM2E,WAAY,SAAC3B,GAAD,OAvB5C,SAAoBA,EAAiBsC,GACjC,IAAMC,EAAQ,YAAOR,GACfxE,EAAkBR,EAAyBiD,GAAK,EAElDA,EAAEhC,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiByC,WAAW,GAAK7D,GAAmB,EAChGyC,EAAEhC,cAAcqB,KAAK,CAAEjB,cAAe4B,EAAEyC,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiByC,UAEjHpB,EAAEhC,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB0C,kBAAkB,GAAK9D,GAAmB,GAC5GyC,EAAEhC,cAAcqB,KAAK,CAAEjB,cAAe4B,EAAEyC,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB0C,iBAEjHrB,EAAEhC,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB2C,UAAU,GAAK/D,GAAmB,GACpGyC,EAAEhC,cAAcqB,KAAK,CAAEjB,cAAe4B,EAAEyC,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB2C,SAEjHtB,EAAEhC,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB4C,aAAa,GAAKhE,GAAmB,IACvGyC,EAAEhC,cAAcqB,KAAK,CAAEjB,cAAe4B,EAAEyC,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB4C,YAG1HgB,EAASrC,OAAOoC,EAAG,EAAGtC,GAEtBgC,EAASO,GAIsCZ,CAAW3B,EAAGF,SAarE,OACI,oCACI,oDAGA,yBAAK8B,UAAU,UACX,2BAAOA,UAAU,mBACb,+BACI,4BACI,mDAGA,4BAEI,2BACInB,KAAK,SACLJ,SAAU,SAAAmB,GAAK,OAAIU,EAAqBxB,OAAOC,SAASa,EAAMhB,OAAOJ,SACrEA,MAAO6B,QAM1BE,GAEL,yBAAKP,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,QAAvB,QAGA,4BAAQd,UAAU,UAAUlC,QArCxC,WACI,IAAMoC,EAAW,eAAQlD,EAAMkD,aAC/BA,EAAYC,MAAQA,EACpBA,EAAM5E,SAAQ,SAAA6C,GAAC,OAAIA,EAAExC,yBACrBsE,EAAYM,yBAAsBO,EAClC/D,EAAMgE,WAAWd,KAgCT,WCnBDe,MAnDf,SAAuBjE,GAAiD,IAAD,IAC3BC,qBAD2B,mBAC5DiE,EAD4D,KAC9CC,EAD8C,KAG7DC,EAA+B,GAcrC,OAbA,UAAApE,EAAMkD,YAAYM,2BAAlB,SAAuCjF,SAAQ,SAAA8F,GAC3C,IAAMjG,EAAO4B,EAAMkD,YAAYC,MAAMN,MAAK,SAAAzB,GAAC,OAAIA,EAAEiD,KAAOA,KACpDjG,IACAgG,EAAc3D,KAAK,4BAAI,4BAAI,4BAAKrC,EAAKkC,SACrC8D,EAAc3D,KACV,kBAAC6D,EAAD,CACIlG,KAAMA,EACNmG,IAAKF,SAMjBH,EAEI,kBAAC,EAAD,CACIhB,YAAalD,EAAMkD,YACnBY,OAAQ,kBAAMK,GAAgB,IAC9BH,WAAYhE,EAAMgE,aAM1B,oCACI,6CAGA,yBAAKhB,UAAU,UACX,2BAAOA,UAAU,mBACb,+BACKoB,KAIb,yBAAKpB,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,QAAvB,QAGA,4BAAQd,UAAU,UAAUlC,QAAS,kBAAMqD,GAAgB,KAA3D,eCwCDK,MApFf,SAAgBxE,GAAsB,IAAD,EACaC,mBAAmB,IADhC,mBAC1BwE,EAD0B,KACTC,EADS,KA0B3BC,EAAU3E,EAAMkD,YAAYC,MAAM7D,KAAI,SAAClB,EAAMmG,GAC/C,OACI,yBAAKvB,UAAU,yBAAyBlC,QAAS,kBAbzD,SAAoB8D,GAChB,IAAIC,EAAU,GAEVA,EADAJ,EAAgBhB,SAASmB,GACfH,EAAgBK,QAAO,SAAApB,GAAC,OAAIA,IAAMkB,KAGrC,sBAAOH,GAAP,CAAwBG,IAEnCF,EAAmBG,GAKwCE,CAAW3G,EAAKiG,MACnE,2BACIxC,KAAK,WACLmD,QAASP,EAAgBhB,SAASc,KAEtC,8BACKnG,EAAKkC,MAEV,8BACKlC,EAAKyF,WAAa,IADvB,UAORoB,EAAqB,EAQzB,OANAjF,EAAMkD,YAAYC,MAAM7D,KAAI,SAAClB,EAAM8C,GAC3BuD,EAAgBhB,SAASvC,KACzB+D,GAAsB7G,EAAKyF,eAI/B7D,EAAMkD,YAAYM,oBAEd,kBAAC,EAAD,CACIN,YAAalD,EAAMkD,YACnBY,OA9CZ,WACI,IAAMZ,EAAW,eAAQlD,EAAMkD,aAC/BA,EAAYM,yBAAsBO,EAClC/D,EAAMgE,WAAWd,IA4CTc,WAAYhE,EAAMgE,aAM1B,oCACI,oDAGA,mDAC0B,IAAMiB,GAEhC,yBAAKjC,UAAU,uBACV2B,GAEL,yBAAK3B,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,QAAvB,QAGA,4BAAQd,UAAU,UAAUlC,QAzExC,WACI,IAAMoC,EAAW,eAAQlD,EAAMkD,aAC/BA,EAAYM,oBAAsBiB,EAClCzE,EAAMgE,WAAWd,KAsET,e,gBCqIDgC,MA9Mf,SAAkBlF,GAAwB,IAAD,MACjBC,mBAAsC,KAApBD,EAAM5B,KAAKkC,MAA1C6E,EAD8B,sBAEblF,mBAAuBD,EAAM5B,MAFhB,mBAE9BA,EAF8B,KAExBgH,EAFwB,KAIrC,SAASC,EAAK3D,GACVA,EAAEM,iBACFN,EAAE4D,kBACFtF,EAAMuF,SAASnH,GAGnB,SAAS+C,EAASqE,GACd,IAAMC,EAAqB,eAAQrH,EAAR,CAAcgB,cAAc,YAAKhB,EAAKgB,eAAgBd,YAAY,YAAMF,EAAKE,aAAe,MACvHkH,EAAKC,GACL,IAAMC,EAAqBvH,EAAyBsH,GAEhDA,EAAQrG,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiByC,WAAW,GAAKkD,GAAsB,EACzGD,EAAQrG,cAAcqB,KAAK,CAAEjB,cAAeiG,EAAQ5B,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiByC,UAE7HiD,EAAQrG,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB0C,kBAAkB,GAAKiD,GAAsB,GACrHD,EAAQrG,cAAcqB,KAAK,CAAEjB,cAAeiG,EAAQ5B,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB0C,iBAE7HgD,EAAQrG,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB2C,UAAU,GAAKgD,GAAsB,GAC7GD,EAAQrG,cAAcqB,KAAK,CAAEjB,cAAeiG,EAAQ5B,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB2C,SAE7H+C,EAAQrG,cAAcwE,WAAU,SAAArE,GAAE,OAAIA,EAAGgD,OAASxC,EAAiB4C,aAAa,GAAK+C,GAAsB,IAChHD,EAAQrG,cAAcqB,KAAK,CAAEjB,cAAeiG,EAAQ5B,YAAc,GAAK,EAAI,EAAGlD,YAAa,CAAEJ,OAAQ,IAAMgC,KAAMxC,EAAiB4C,YAGtIyC,EAAQK,GASZ,IAAM9G,EAAkBR,EAAyBC,GAE7CoB,EAAgB,EAChBJ,EAAgBhB,EAAKgB,cAAcE,KAAI,SAACoB,EAAcQ,GAAW,IAAD,EAChE1B,GAAiBkB,EAAalB,cAE9B,IAAI8C,EACA,2BACIT,KAAK,OACLL,MAAK,UAAEd,EAAaC,mBAAf,aAAE,EAA0BJ,OACjCkB,SAAU,SAAAmB,GACNzB,GAAS,SAACC,GACN,IAAI7B,EAAK6B,EAAEhC,cAAcyD,MAAK,SAAAC,GAAC,OAAIA,EAAEP,OAAS7B,EAAa6B,SACvD,OAAChD,QAAD,IAACA,OAAD,EAACA,EAAIoB,eACLpB,EAAIoB,YAAc,IAEtBpB,EAAIoB,YAAYJ,OAASqC,EAAMhB,OAAOJ,YAMtD,OACI,wBAAI+C,IAAKrD,GACL,4BACKR,EAAa6B,MAElB,4BACKD,OAMjB,OACI,0BAAMqD,SAAUN,EAAMhB,GAAG,aACrB,yBAAKrB,UAAU,UACX,6BACMmC,EAAY,aAAe,eAAiB/G,EAAKkC,KACnD,yBACI0C,UAAU,OACV4C,IAAKC,IACLC,IAAI,aACJhF,QAjDpB,WACQiF,OAAOC,QAAQ,+CACfhG,EAAMiG,WAAWjG,EAAM5B,WAmDvB,yBAAK4E,UAAU,UACX,2BAAOA,UAAU,mBACb,+BACI,4BACI,qCACA,4BACI,2BACIvB,SAAU,SAAAC,GAAC,OAAIP,GAAS,SAACC,GAAD,OAAOA,EAAEd,KAAOoB,EAAEE,OAAOJ,UACjDK,KAAK,UACLL,MAAOpD,EAAKkC,SAIxB,4BACI,2CACA,4BACI,2BACImB,SAAU,SAAAC,GAAC,OAAIP,GAAS,SAACC,GAAD,OAAOA,EAAEyC,WAAa/B,OAAOC,SAASL,EAAEE,OAAOJ,WACvEK,KAAK,SACLL,MAAOpD,EAAKyF,eAIxB,4BACI,8CACA,4BAAKrE,IAET,4BACI,qDACA,4BACI,2BACIqC,KAAK,SACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GAAD,OAAOA,EAAExC,oBAAsBkD,OAAOC,SAASa,EAAMhB,OAAOJ,WACxFA,MAAOpD,EAAKQ,wBAIxB,4BACI,qDACA,4BACI,2BACIiD,KAAK,SACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GAAD,OAAOA,EAAEvC,mBAAqBiD,OAAOC,SAASa,EAAMhB,OAAOJ,WACvFA,MAAOpD,EAAKS,uBAIxB,4BACI,uCACA,4BACI,2BACIgD,KAAK,SACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GAAD,OAAOA,EAAEtC,SAAWgD,OAAOC,SAASa,EAAMhB,OAAOJ,WAC7EA,MAAOpD,EAAKU,aAIxB,4BACI,sCACA,4BACI,2BACI+C,KAAK,SACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GAAD,OAAOA,EAAEnC,MAAQ6C,OAAOC,SAASa,EAAMhB,OAAOJ,WAC1EA,MAAOpD,EAAKa,UAIxB,4BACI,iDAGA,4BACKN,IAGRS,EACD,kBAAC,EAAD,CACIhB,KAAMA,EACN+C,SAAUA,IAEd,4BAAI,8CACJ,4BACI,4BACI,2BACIU,KAAK,UACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GACpBA,EAAEf,eACHe,EAAEf,aAAe,IAErBe,EAAEf,aAAaC,KAAOsC,EAAMhB,OAAOJ,UAEvCA,OAAO,UAAApD,EAAKiC,oBAAL,eAAmBC,OAAQ,MAG1C,4BACI,2BACIuB,KAAK,UACLJ,SAAU,SAAAmB,GAAK,OAAIzB,GAAS,SAACC,GACpBA,EAAEf,eACHe,EAAEf,aAAe,IAErBe,EAAEf,aAAaE,OAASqC,EAAMhB,OAAOJ,UAEzCA,OAAO,UAAApD,EAAKiC,oBAAL,eAAmBE,SAAU,UAO5D,yBAAKyC,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,OAAQjC,KAAK,UAApC,QAGA,4BAAQmB,UAAU,UAAUlC,QAASuE,EAAMxD,KAAK,UAAhD,W,gBChLDqE,MAxBf,SAAgBlG,GACZ,OACI,yBAAKgD,UAAU,UACX,4BACKhD,EAAMmG,WACP,yBACInD,UAAU,OACV4C,IAAKQ,IACLN,IAAI,aACJhF,QAASd,EAAMqG,UAGvB,6BACI,yBAAKrD,UAAU,sBACX,2BAAIhD,EAAM6D,WAAa,KAD3B,MAGA,yBAAKb,UAAU,sBACX,2BAAIhD,EAAMR,cAAgB,KAD9B,SCgCD8G,MA7Cf,SAAqBtG,GAA2B,IAAD,EACCC,oBAAkB,GADnB,mBACpCsG,EADoC,KACpBC,EADoB,KAQ3C,GAAID,EACA,OACI,kBAAC,EAAD,CACIN,WAAYjG,EAAMiG,WAClBnC,OAAQ,kBAAM0C,GAAkB,IAChCpI,KAAM4B,EAAM5B,KACZmH,SAXZ,SAAsBnH,GAClB4B,EAAMuF,SAASnH,GACfoI,GAAkB,MActB,IAAIhH,EAAgBN,EAAuBc,EAAM5B,MAEjD,OACI,oCACI,kBAAC,EAAD,CACIoB,cAAeA,EACf2G,WAAYnG,EAAM5B,KAAKkC,KACvBuD,WAAY7D,EAAM5B,KAAKyF,WACvBwC,OAAQ,kBAAMG,GAAkB,MAEpC,yBAAKxD,UAAU,UACX,2BAAOA,UAAU,mBACb,+BACI,kBAACsB,EAAD,CAAiBlG,KAAM4B,EAAM5B,UAIzC,yBAAK4E,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,OAAQjC,KAAK,UAApC,W,qBC6CD4E,MAnFf,SAAkBzG,GAAwB,IAAD,EACjBC,mBAA6C,KAA3BD,EAAMkD,YAAY5C,MAAjDoG,EAD8B,sBAEbzG,mBAAuBD,EAAMkD,aAFhB,mBAE9ByD,EAF8B,KAExBC,EAFwB,KAgBrC,OACI,oCACI,0BAAMjB,SAAU,kBAAM3F,EAAM6G,SAASF,IAAOtC,GAAG,aAC3C,yBAAKrB,UAAU,UACX,6BACM0D,EAAY,aAAe,eAAiBC,EAAKrG,KACnD,yBACI0C,UAAU,OACV4C,IAAKC,IACLC,IAAI,aACJhF,QAhBxB,WACQiF,OAAOC,QAAQ,+CACfhG,EAAM8G,wBAkBF,yBAAK9D,UAAU,UACX,2BAAOA,UAAU,mBACb,4BACI,qCACA,4BACI,2BACIvB,SAAU,SAAAC,GAAC,OAhC3C,SAAkB8D,GACd,IAAMuB,EAAO,eAAQJ,GACrBnB,EAAKuB,GACLH,EAAQG,GA6BmCC,EAAS,SAACC,GAAD,OAAOA,EAAE3G,KAAOoB,EAAEE,OAAOJ,UACjDK,KAAK,UACLL,MAAOmF,EAAKrG,SAIxB,4BACI,oDAGA,4BACI,yBACI0C,UAAU,OACV4C,IAAKsB,IACLpB,IAAI,aACJhF,QAAS,kBC9DtC,SAAyB6F,GAC5B,GAAKQ,UAAUC,UAAf,CAKA,IAAMC,EAAkBC,KAAKC,UAAUZ,GACvCQ,UAAUC,UAAUI,UAAUH,GAAiBI,MAAK,WAChD1B,OAAO2B,MAAM,0BACdC,OAAM,WACL5B,OAAO2B,MAAM,mCARb3B,OAAO2B,MAAM,2BD4D8BE,CAAgB5H,EAAMkD,kBAIjD,4BACI,wBAAI2E,QAAS,GACT,8BACI3F,MAAO,CAAE4F,MAAO,oBAChBrG,SAAU,SAAAC,GACN,IAAMqF,EAAUO,KAAKS,MAAMrG,EAAEE,OAAOJ,OACpCuF,EAAQ1C,GAAKsC,EAAKtC,GAClBuC,EAAQG,IAEZvF,MAAO8F,KAAKC,UAAUZ,SAM1C,yBAAK3D,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,OAAQjC,KAAK,UAApC,QAGA,4BAAQmB,UAAU,UAAUlC,QAAS,kBAAMd,EAAM6G,SAASF,IAAO9E,KAAK,UAAtE,YEkGLmG,MAzKf,SAA2BhI,GAA4B,IAAD,EACVC,qBADU,mBAC3CgI,EAD2C,KAC7BC,EAD6B,OAEdjI,qBAFc,mBAE3CkI,EAF2C,KAE/BC,EAF+B,OAGZnI,qBAHY,mBAG3CoI,EAH2C,KAG9BC,EAH8B,OAIVrI,qBAJU,mBAI3CsD,EAJ2C,KAI7BgF,EAJ6B,KAkFlD,SAAS1B,EAASF,GACd3G,EAAMgE,WAAW2C,GACjB2B,GAAe,GACfF,GAAc,GA/ElBI,qBAAU,WACN,IAAM7D,EAAU3E,EAAMkD,YAAYC,MAAM7D,KAAI,SAAAlB,GAAS,IAAD,IAC1CqK,EAAW,oBAAGrK,EAAKgB,cAAchB,EAAKgB,cAAcC,OAAS,UAAlD,aAAG,EAAmDkD,YAAtD,QAA8DxC,EAAiB2I,YAC1FlJ,EAAgBN,EAAuBd,GAE7C,OACI,wBACImG,IAAKnG,EAAKiG,GACVrB,UAAU,yBACVlC,QAAS,kBAAMoH,EAAgB9J,KAE/B,4BACKA,EAAKkC,MAEV,wBAAI4B,MAAO,CAAEyG,WAAY,WACpBF,GAEL,4BACKjJ,OAMjB+I,EAAgB5D,KACjB,CAAC3E,EAAMkD,YAAa+E,EAAcI,IAyDrC,IAAI7I,EAAgB,EAChBqE,EAAa,EAMjB,GALA7D,EAAMkD,YAAYC,MAAM5E,SAAQ,SAAAH,GAC5BoB,GAAiBN,EAAuBd,GACxCyF,GAAczF,EAAKyF,cAGnBsE,EACA,OACI,kBAAC,EAAD,CACIjF,YAAalD,EAAMkD,YACnBY,OAAQ,kBAAMsE,GAAc,IAC5BtB,iBAAkB,kBAAM9G,EAAM4I,WAAW5I,EAAMkD,cAC/C2D,SAAUA,IAIjB,GAAIwB,GAAerI,EAAMkD,YAAYM,oBACtC,OACI,kBAAC,EAAD,CACIN,YAAalD,EAAMkD,YACnBY,OAAQ,kBAAMwE,GAAe,IAC7BtE,WAAY6C,IAInB,GAAIoB,EACL,OACI,kBAAC,EAAD,CACIhC,WA9CZ,SAAoB7H,GAChB,IAAM8E,EAAW,eAAQlD,EAAMkD,aAC3B2F,EAAgB3F,EAAYC,MAAMS,WAAU,SAAAxC,GAAC,OAAIA,EAAEiD,KAAOjG,EAAKiG,MAC/DwE,GAAiB,GACjB3F,EAAYC,MAAM7B,OAAOuH,EAAe,GAG5C7I,EAAMgE,WAAWd,GACjBgF,OAAgBnE,IAuCRD,OAAQ,kBAAMoE,OAAgBnE,IAC9BwB,SA9DZ,SAAkBnH,GACd,IAAM8E,EAAW,eAAQlD,EAAMkD,aAC3B2F,EAAgB3F,EAAYC,MAAMS,WAAU,SAAAxC,GAAC,OAAIA,EAAEiD,KAAOjG,EAAKiG,MAC/DwE,GAAiB,EACjB3F,EAAYC,MAAM7B,OAAOuH,EAAe,EAAGzK,GAG3C8E,EAAYC,MAAM1C,KAAKrC,GAG3B4B,EAAMgE,WAAWd,GACjBgF,EAAgB9J,IAoDRA,KAAM6J,IAKlB,IAAIa,EAAoB,KAkBxB,OAjB6B,KAAb,OAAZvF,QAAY,IAAZA,OAAA,EAAAA,EAAclE,UACdyJ,EACI,2BAAO9F,UAAU,qBACb,+BACI,4BACI,oCACA,oCACA,oCAGR,+BACKO,KAOb,oCACI,kBAAC,EAAD,CACI/D,cAAeA,EACf2G,WAAYnG,EAAMkD,YAAY5C,KAC9BuD,WAAYA,EACZwC,OAAQ,kBAAM+B,GAAc,MAEhC,yBAAKpF,UAAU,uBACV8F,GAEL,yBAAK9F,UAAU,oBACX,4BAAQlC,QAASd,EAAM8D,QAAvB,QAGA,4BAAQhD,QA7HpB,WACI,IAAIiI,EAAY,EAChB/I,EAAMkD,YAAYC,MAAM5E,SAAQ,SAAAH,GACxBA,EAAKiG,GAAK0E,IACVA,EAAY3K,EAAKiG,OAiBzB6D,EAd8B,CAC1B7D,GAAI0E,EAAY,EAChBjK,SAAU,EACVM,cAAe,GACfR,oBAAqB,EACrBY,cAAe,EACfP,MAAO,EACPJ,mBAAoB,EACpByB,KAAM,GACN0I,MAAO,GACP1K,YAAa,GACbuF,WAAY,MA2GR,OAGA,4BAAQb,UAAU,UAAUlC,QAAS,kBAAMwH,GAAe,KAA1D,UC5DDW,MA/Gf,WAAuB,IAAD,EACsBhJ,qBADtB,mBACXiJ,EADW,KACGC,EADH,OAEwBlJ,qBAFxB,mBAEXmJ,EAFW,KAEIC,EAFJ,OAGoCpJ,qBAHpC,mBAGXqJ,EAHW,KAGUC,EAHV,OAIsCtJ,qBAJtC,mBAIXuJ,EAJW,KAIWC,EAJX,KAsClB,SAASzF,EAAWd,GAChB,IAAMwG,EAAuCpC,KAAKS,MAAMhC,OAAO4D,aAAaC,QZ7C1C,kBY6CiF,MAC7GC,EAAmBH,EAAqB9F,WAAU,SAAA+C,GAAI,OAAIA,EAAKtC,KAAOnB,EAAYmB,MACpFwF,GAAoB,EACpBH,EAAqBpI,OAAOuI,EAAkB,EAAG3G,GAGjDwG,EAAqBjJ,KAAKyC,GAG9B6C,OAAO4D,aAAaG,QZtDc,gBYsDsBxC,KAAKC,UAAUmC,IACvEL,EAAiBK,GAEjB,IAAMK,EAAeL,EAAqB7G,MAAK,SAAAmH,GAAG,OAAIA,EAAI3F,KAAOnB,EAAYmB,MAC7EkF,EAAuBQ,GAQ3B,SAASnB,EAAWqB,GAChB,IAAMP,EAAuCpC,KAAKS,MAAMhC,OAAO4D,aAAaC,QZnE1C,kBYmEiF,MAC7GC,EAAmBH,EAAqB9F,WAAU,SAAA+C,GAAI,OAAIA,EAAKtC,KAAO4F,EAAa5F,MACrFwF,GAAoB,GACpBH,EAAqBpI,OAAOuI,EAAkB,GAGlD9D,OAAO4D,aAAaG,QZzEc,gBYyEsBxC,KAAKC,UAAUmC,IACvEL,EAAiBK,GACjBH,OAAuBxF,GAG3B,OAlEAyE,qBAAU,WACN,IAAMkB,EAAuCpC,KAAKS,MAAMhC,OAAO4D,aAAaC,QZb1C,kBYaiF,MACnHP,EAAiBK,KAClB,IAEHlB,qBAAU,WACN,GAAKY,EAAL,CAIA,IAAMzE,EAAUyE,EAAc9J,KAAI,SAAC4D,EAAahC,GAC5C,IAAI1B,EAAgB,EAChBqE,EAAa,EAMjB,OALAX,EAAYC,MAAM5E,SAAQ,SAAAH,GACtBoB,GAAiBN,EAAuBd,GACxCyF,GAAczF,EAAKyF,cAInB,yBAAKb,UAAU,sBAAsBuB,IAAKrD,EAAOJ,QAAS,kBAAMyI,EAAuBrG,KACnF,4BACKA,EAAY5C,MAEjB,8BAAOuD,EAAa,OACpB,8BAAOrE,EAAgB,WAKnCiK,EAAwB9E,MACzB,CAACyE,IAoCAF,EAEI,kBAAC,EAAD,CACIhG,YAAagG,EACbpC,iBAAkB,kBAAM8B,EAAWM,IACnCpF,OAAQ,kBAAMqF,OAAgBpF,IAC9B8C,SAAU7C,IAKlBsF,EAEI,kBAAC,EAAD,CACIV,WAAYA,EACZ1F,YAAaoG,EACbxF,OAAQ,kBAAMyF,OAAuBxF,IACrCC,WAAYA,IAMpB,oCACI,8CAGA,yBAAKhB,UAAU,UACVwG,GAEL,yBAAKxG,UAAU,oBACX,4BAAQlC,QAhDpB,WAAoB,IAAD,EACTiG,EAAwB,CAAEzG,KAAM,GAAI+D,GAAE,iBAAE+E,QAAF,IAAEA,OAAF,EAAEA,EAAe/J,cAAjB,QAA2B,EAAG8D,MAAO,IACjFgG,EAAgBpC,IA8CkB/D,UAAU,WAApC,UChGDkH,MATf,WAEI,OACI,yBAAKlH,UAAU,OACX,kBAAC,EAAD,QCIQmH,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b92cc5c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.battleScar) {\r\n            outOfActionCrusadePoints--;\r\n        }\r\n    });\r\n\r\n    return battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit } from \"../Constants\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <>\r\n                <tr><td><b>Warlord Trait</b></td></tr>\r\n                <tr>\r\n                    <td>{props.unit.warlordTrait.name}</td>\r\n                    <td>{props.unit.warlordTrait.effect}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const battleHonourDisplay = []\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        battleHonourDisplay.push(<tr><td><b>Battle Honours</b></td></tr>)\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonourDisplay.push(\r\n                <tr>\r\n                    <td>{battleHonour.battleTrait?.name}</td>\r\n                    <td>{battleHonour.battleTrait?.effect}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        battleScarsDisplay.push(<tr><td><b>Battle Scars</b></td><td /></tr>)\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive || !outOfAction.battleScar) {\r\n                return;\r\n            }\r\n            battleScarsDisplay.push(\r\n                <tr>\r\n                    <td>{outOfAction.battleScar.name}</td>\r\n                    <td>{outOfAction.battleScar.effect}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <tr>\r\n                    <td>Battle Participation:</td>\r\n                    <td>{props.unit.battleParticipation}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Marked For Greatness:</td>\r\n                    <td>{props.unit.markedForGreatness}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Agenda:</td>\r\n                    <td>{props.unit.agendaXp}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Kills:</td>\r\n                    <td>{props.unit.kills}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            <tr onClick={toggleShowExperience}>\r\n                <td>\r\n                    Total Experience:\r\n                        </td>\r\n                <td>\r\n                    {totalExperience}\r\n                </td>\r\n            </tr>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    id: number;\r\n    name: string;\r\n    units: ICrusadeUnit[]\r\n    battleRosterUnitIds?: number[]\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <tr>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.battleScar?.effect}\r\n                            onChange={e => editOutOfAction((o) => o.battleScar!.effect = e.target.value, index)}\r\n                            type=\"textbox\"\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.xp}\r\n                            onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                            type=\"number\"\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>Out Of Action</td>\r\n                <td><button onClick={addOutOfAction} type=\"button\" style={{ padding: \"10px\" }}>Add</button></td>\r\n            </tr>\r\n            <tr>\r\n                <td>Battle Scar</td>\r\n                <td>Experience Loss</td>\r\n            </tr>\r\n            {outOfActionDisplay}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.battleTrait?.effect || \"\";\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    type=\"text\"\r\n                    value={battleHonour.battleTrait?.effect || \"\"}\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"edittable-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <b>{props.unit.name}</b>\r\n                        </td>\r\n                        <td>Crusade Points: {\" \" + crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>{`${props.unit.battleParticipation} + 1`}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.agendaXp = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.kills = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n\r\n                                }}\r\n                                value={props.unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                    <EditOutOfActions\r\n                        unit={props.unit}\r\n                        editUnit={(edit) => {\r\n                            const u: ICrusadeUnit = {\r\n                                ...props.unit,\r\n                                outOfAction: [...(props.unit.outOfAction || [])]\r\n                            };\r\n                            edit(u)\r\n                            props.updateUnit(u);\r\n                        }\r\n                        }\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(1)\r\n\r\n    const unitsDisplay = units.map((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(index)) {\r\n            return (\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Fill Post Game Stats\r\n            </h1>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                Requisition Points:\r\n                            </td>\r\n                            <td>\r\n\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                                    value={requisitionPoints}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                {unitsDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={done}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.battleRosterUnitIds?.forEach(id => {\r\n        const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n        if (unit) {\r\n            unitSummaries.push(<tr><td><h3>{unit.name}</h3></td></tr>)\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Battle Roster\r\n            </h1>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        {unitSummaries}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsContinuing(true)} >\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit, key) => {\r\n        return (\r\n            <div className=\"read-only-display-item\" onClick={() => selectUnit(unit.id)}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedUnitIds.includes(key)}\r\n                />\r\n                <span>\r\n                    {unit.name}\r\n                </span>\r\n                <span>\r\n                    {unit.powerLevel + \" \"}PL\r\n                </span>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n\r\n    props.crusadeArmy.units.map((unit, index) => {\r\n        if (selectedUnitIds.includes(index)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n        }\r\n    })\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Select Battle Roster\r\n            </h1>\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <div className=\"report-units expand\">\r\n                {display}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={Continue}>\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = (\r\n            <input\r\n                type=\"text\"\r\n                value={battleHonour.battleTrait?.effect}\r\n                onChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n            />\r\n        )\r\n\r\n        return (\r\n            <tr key={index}>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={save} id=\"edit-unit\">\r\n            <div className=\"header\">\r\n                <h1>\r\n                    {(isNewUnit ? \"Add Unit: \" : \"Edit Unit: \") + unit.name}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h1>\r\n            </div>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={unit.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Power Level</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                                    type=\"number\"\r\n                                    value={unit.powerLevel}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Crusade Points</td>\r\n                            <td>{crusadePoints}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Battle Participation:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.battleParticipation = Number.parseInt(event.target.value))}\r\n                                    value={unit.battleParticipation}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Marked For Greatness:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.markedForGreatness = Number.parseInt(event.target.value))}\r\n                                    value={unit.markedForGreatness}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Agenda:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.agendaXp = Number.parseInt(event.target.value))}\r\n                                    value={unit.agendaXp}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Kills:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.kills = Number.parseInt(event.target.value))}\r\n                                    value={unit.kills}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Total Experience:\r\n                        </td>\r\n                            <td>\r\n                                {totalExperience}\r\n                            </td>\r\n                        </tr>\r\n                        {battleHonours}\r\n                        <EditOutOfActions\r\n                            unit={unit}\r\n                            editUnit={editUnit}\r\n                        />\r\n                        <tr><td>Warlord Trait</td></tr>\r\n                        <tr>\r\n                            <td>\r\n                                <input\r\n                                    type=\"textbox\"\r\n                                    onChange={event => editUnit((u) => {\r\n                                        if (!u.warlordTrait) {\r\n                                            u.warlordTrait = {}\r\n                                        }\r\n                                        u.warlordTrait.name = event.target.value\r\n                                    })}\r\n                                    value={unit.warlordTrait?.name || \"\"}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"textbox\"\r\n                                    onChange={event => editUnit((u) => {\r\n                                        if (!u.warlordTrait) {\r\n                                            u.warlordTrait = {}\r\n                                        }\r\n                                        u.warlordTrait.effect = event.target.value\r\n                                    })}\r\n                                    value={unit.warlordTrait?.effect || \"\"}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={save} type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\n\r\ninterface IHeaderProps {\r\n    crusadePoints: number;\r\n    headerText: string;\r\n    onEdit: () => void;\r\n    powerLevel: number;\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>\r\n                {props.headerText}\r\n                <img\r\n                    className=\"icon\"\r\n                    src={EditIcon}\r\n                    alt=\"Edit Links\"\r\n                    onClick={props.onEdit}\r\n                />\r\n            </h1>\r\n            <div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.powerLevel + \" \"}</b>PL\r\n                </div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.crusadePoints + \" \"}</b>CP\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n    }\r\n\r\n    if (isEdittingUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.unit.name}\r\n                powerLevel={props.unit.powerLevel}\r\n                onEdit={() => setIsEdittingUnit(true)}\r\n            />\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        <UnitSummaryRows unit={props.unit} />\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={() => props.saveArmy(army)} id=\"edit-army\">\r\n                <div className=\"header\">\r\n                    <h1>\r\n                        {(isNewArmy ? \"Add Army: \" : \"Edit Army: \") + army.name}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h1>\r\n                </div>\r\n                <div className=\"expand\">\r\n                    <table className=\"edittable-table\">\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={army.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Copy from Clipboard:\r\n                            </td>\r\n                            <td>\r\n                                <img\r\n                                    className=\"icon\"\r\n                                    src={CopyIcon}\r\n                                    alt=\"Edit Links\"\r\n                                    onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan={2}>\r\n                                <textarea\r\n                                    style={{ width: \"calc(100% - 8px)\" }}\r\n                                    onChange={e => {\r\n                                        const newArmy = JSON.parse(e.target.value)\r\n                                        newArmy.id = army.id;\r\n                                        setArmy(newArmy)\r\n                                    }}\r\n                                    value={JSON.stringify(army)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </button>\r\n                    <button className=\"primary\" onClick={() => props.saveArmy(army)} type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\n\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {crusadePoints}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <table className=\"army-roster-units\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>CP</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.crusadeArmy.name}\r\n                powerLevel={powerLevel}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <div className=\"army-roster-content\">\r\n                {unitsTableDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={addUnit}>\r\n                    Add\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsReporting(true)}>\r\n                    Log\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <div className=\"armies-list-display\" key={index} onClick={() => setSelectedCrusadeArmy(crusadeArmy)}>\r\n                    <h2>\r\n                        {crusadeArmy.name}\r\n                    </h2>\r\n                    <span>{powerLevel + \" PL\"}</span>\r\n                    <span>{crusadePoints + \" CP\"}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = { name: \"\", id: crusadeArmies?.length ?? 0, units: [] }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <CrusadeArmyRoster\r\n                deleteArmy={deleteArmy}\r\n                crusadeArmy={selectedCrusadeArmy}\r\n                goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                updateArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Crusade Armies\r\n            </h1>\r\n            <div className=\"expand\">\r\n                {crusadeArmiesDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={addArmy} className=\"primary\">\r\n                    Add\r\n            </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ArmiesList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}