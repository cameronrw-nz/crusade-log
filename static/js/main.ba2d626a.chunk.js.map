{"version":3,"sources":["Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Constants.ts","Helpers/CrusadeUnitHelper.ts","CommonFields/EditOutOfActions.tsx","Report/ReportUnit.tsx","Report/ReportUnits.tsx","Report/Report.tsx","EditUnit.tsx","CommonFields/Header.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BattleHonourRank","CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","CalculateCrusadePoints","battleHonourCrusadePoints","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","outOfActionCrusadePoints","battleScar","EditOutOfActions","props","editOutOfAction","edit","index","editUnit","u","newOutOfAction","splice","outOfActionDisplay","push","value","effect","onChange","e","o","target","type","Number","parseInt","onClick","preventDefault","outOfActions","style","padding","ReportUnit","useState","initialExperience","battleHonour","effectField","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","className","name","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","selectedUnitIndexes","includes","i","newUnits","findIndex","powerLevel","goBack","updateArmy","Report","setSelectedUnitIndexes","isContinuing","setIsContinuing","display","key","newKeys","filter","selectUnit","checked","selectedPowerLevel","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","id","src","DeleteIcon","alt","window","confirm","deleteUnit","warlordTrait","Header","headerText","EditIcon","onEdit","UnitDisplay","isEdittingUnit","setIsEdittingUnit","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","battleHonourDisplay","battleScarsDisplay","experienceDetails","EditArmy","isNewArmy","army","setArmy","saveArmy","handleDeleteArmy","newArmy","editArmy","a","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","colSpan","width","parse","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","setUnitsDisplay","useEffect","highestRank","BattleReady","whiteSpace","deleteArmy","existingIndex","undefined","unitsTableDisplay","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ba2d626a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    effect: string;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    id: number;\r\n    name: string;\r\n    units: ICrusadeUnit[]\r\n}\r\n\r\n","import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.battleScar) {\r\n            outOfActionCrusadePoints--;\r\n        }\r\n    });\r\n\r\n    return battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <tr>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.battleScar?.effect}\r\n                            onChange={e => editOutOfAction((o) => o.battleScar!.effect = e.target.value, index)}\r\n                            type=\"textbox\"\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.xp}\r\n                            onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                            type=\"number\"\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>Out Of Action</td>\r\n                <td><button onClick={addOutOfAction} type=\"button\" style={{ padding: \"10px\" }}>Add</button></td>\r\n            </tr>\r\n            <tr>\r\n                <td>Battle Scar</td>\r\n                <td>Experience Loss</td>\r\n            </tr>\r\n            {outOfActionDisplay}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.effect;\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    type=\"text\"\r\n                    value={battleHonour.effect}\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        bh!.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"edittable-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <b>{props.unit.name}</b>\r\n                        </td>\r\n                        <td>Crusade Points: {\" \" + crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>{`${props.unit.battleParticipation} + 1`}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.agendaXp = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.kills = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n\r\n                                }}\r\n                                value={props.unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                    <EditOutOfActions\r\n                        unit={props.unit}\r\n                        editUnit={(edit) => {\r\n                            const u: ICrusadeUnit = {\r\n                                ...props.unit,\r\n                                outOfAction: [...(props.unit.outOfAction || [])]\r\n                            };\r\n                            edit(u)\r\n                            props.updateUnit(u);\r\n                        }\r\n                        }\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    selectedUnitIndexes: number[];\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(1)\r\n\r\n    const unitsDisplay = units.map((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.selectedUnitIndexes.includes(index)) {\r\n            return (\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Fill Post Game Stats\r\n            </h1>\r\n            <table className=\"edittable-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n\r\n                            Requisition Points:\r\n                        </td>\r\n                        <td>\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                                value={requisitionPoints}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            {unitsDisplay}\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={done}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIndexes, setSelectedUnitIndexes] = useState<number[]>([])\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    function selectUnit(key: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIndexes.includes(key)) {\r\n            newKeys = selectedUnitIndexes.filter(i => i !== key);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIndexes, key]\r\n        }\r\n        setSelectedUnitIndexes(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit, key) => {\r\n        return (\r\n            <div className=\"read-only-display-item\" onClick={() => selectUnit(key)}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => { }}\r\n                    checked={selectedUnitIndexes.includes(key)}\r\n                />\r\n                <span>\r\n                    {unit.name}\r\n                </span>\r\n                <span>\r\n                    {unit.powerLevel + \" \"}PL\r\n                </span>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n\r\n    props.crusadeArmy.units.map((unit, index) => {\r\n        if (selectedUnitIndexes.includes(index)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                selectedUnitIndexes={selectedUnitIndexes}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Select Battle Roster\r\n            </h1>\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <div className=\"report-units expand\">\r\n                {display}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsContinuing(true)}>\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = (\r\n            <input\r\n                type=\"text\"\r\n                value={battleHonour.effect}\r\n                onChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        bh!.effect = event.target.value;\r\n                    })\r\n                }}\r\n            />\r\n        )\r\n\r\n        return (\r\n            <tr key={index}>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={save} id=\"edit-unit\">\r\n            <div className=\"header\">\r\n                <h1>\r\n                    {(isNewUnit ? \"Add Unit: \" : \"Edit Unit: \") + unit.name}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h1>\r\n            </div>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={unit.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Power Level</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                                    type=\"number\"\r\n                                    value={unit.powerLevel}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Crusade Points</td>\r\n                            <td>{crusadePoints}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Battle Participation:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.battleParticipation = Number.parseInt(event.target.value))}\r\n                                    value={unit.battleParticipation}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Marked For Greatness:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.markedForGreatness = Number.parseInt(event.target.value))}\r\n                                    value={unit.markedForGreatness}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Agenda:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.agendaXp = Number.parseInt(event.target.value))}\r\n                                    value={unit.agendaXp}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Kills:</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    onChange={event => editUnit((u) => u.kills = Number.parseInt(event.target.value))}\r\n                                    value={unit.kills}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Total Experience:\r\n                        </td>\r\n                            <td>\r\n                                {totalExperience}\r\n                            </td>\r\n                        </tr>\r\n                        {battleHonours}\r\n                        <EditOutOfActions\r\n                            unit={unit}\r\n                            editUnit={editUnit}\r\n                        />\r\n                        <tr><td>Warlord Trait</td></tr>\r\n                        <tr>\r\n                            <td>\r\n                                <input\r\n                                    type=\"textbox\"\r\n                                    onChange={event => editUnit((u) => {\r\n                                        if (!u.warlordTrait) {\r\n                                            u.warlordTrait = {}\r\n                                        }\r\n                                        u.warlordTrait.name = event.target.value\r\n                                    })}\r\n                                    value={unit.warlordTrait?.name || \"\"}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"textbox\"\r\n                                    onChange={event => editUnit((u) => {\r\n                                        if (!u.warlordTrait) {\r\n                                            u.warlordTrait = {}\r\n                                        }\r\n                                        u.warlordTrait.effect = event.target.value\r\n                                    })}\r\n                                    value={unit.warlordTrait?.effect || \"\"}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={save} type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\n\r\ninterface IHeaderProps {\r\n    crusadePoints: number;\r\n    headerText: string;\r\n    onEdit: () => void;\r\n    powerLevel: number;\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>\r\n                {props.headerText}\r\n                <img\r\n                    className=\"icon\"\r\n                    src={EditIcon}\r\n                    alt=\"Edit Links\"\r\n                    onClick={props.onEdit}\r\n                />\r\n            </h1>\r\n            <div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.powerLevel + \" \"}</b>PL\r\n                </div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.crusadePoints + \" \"}</b>CP\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateTotalExperience, CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n    }\r\n\r\n    if (isEdittingUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <>\r\n                <tr><td><b>Warlord Trait</b></td></tr>\r\n                <tr>\r\n                    <td>{props.unit.warlordTrait.name}</td>\r\n                    <td>{props.unit.warlordTrait.effect}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const battleHonourDisplay = []\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        battleHonourDisplay.push(<tr><td><b>Battle Honours</b></td></tr>)\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonourDisplay.push(\r\n                <tr>\r\n                    <td>{battleHonour.rank}</td>\r\n                    <td>{battleHonour.effect}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        battleScarsDisplay.push(<tr><td><b>Battle Scars</b></td><td /></tr>)\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive || !outOfAction.battleScar) {\r\n                return;\r\n            }\r\n            battleScarsDisplay.push(\r\n                <tr>\r\n                    <td>{outOfAction.battleScar.name}</td>\r\n                    <td>{outOfAction.battleScar.effect}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <tr>\r\n                    <td>Battle Participation:</td>\r\n                    <td>{props.unit.battleParticipation}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Marked For Greatness:</td>\r\n                    <td>{props.unit.markedForGreatness}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Agenda:</td>\r\n                    <td>{props.unit.agendaXp}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Kills:</td>\r\n                    <td>{props.unit.kills}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.unit.name}\r\n                powerLevel={props.unit.powerLevel}\r\n                onEdit={() => setIsEdittingUnit(true)}\r\n            />\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tbody>\r\n                        {warlordTraitDisplay}\r\n                        {battleHonourDisplay}\r\n                        {battleScarsDisplay}\r\n                        <tr onClick={toggleShowExperience}>\r\n                            <td>\r\n                                Total Experience:\r\n                        </td>\r\n                            <td>\r\n                                {totalExperience}\r\n                            </td>\r\n                        </tr>\r\n                        {experienceDetails}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={() => props.saveArmy(army)} id=\"edit-army\">\r\n                <div className=\"header\">\r\n                    <h1>\r\n                        {(isNewArmy ? \"Add Army: \" : \"Edit Army: \") + army.name}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h1>\r\n                </div>\r\n                <div className=\"expand\">\r\n                    <table className=\"edittable-table\">\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={army.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Copy from Clipboard:\r\n                            </td>\r\n                            <td>\r\n                                <img\r\n                                    className=\"icon\"\r\n                                    src={CopyIcon}\r\n                                    alt=\"Edit Links\"\r\n                                    onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan={2}>\r\n                                <textarea\r\n                                    style={{ width: \"calc(100% - 8px)\" }}\r\n                                    onChange={e => {\r\n                                        const newArmy = JSON.parse(e.target.value)\r\n                                        newArmy.id = army.id;\r\n                                        setArmy(newArmy)\r\n                                    }}\r\n                                    value={JSON.stringify(army)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </button>\r\n                    <button className=\"primary\" onClick={() => props.saveArmy(army)} type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\n\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {crusadePoints}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <table className=\"army-roster-units\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>CP</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.crusadeArmy.name}\r\n                powerLevel={powerLevel}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <div className=\"army-roster-content\">\r\n                {unitsTableDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={addUnit}>\r\n                    Add\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsReporting(true)}>\r\n                    Log\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <div className=\"armies-list-display\" key={index} onClick={() => setSelectedCrusadeArmy(crusadeArmy)}>\r\n                    <h2>\r\n                        {crusadeArmy.name}\r\n                    </h2>\r\n                    <span>{powerLevel + \" PL\"}</span>\r\n                    <span>{crusadePoints + \" CP\"}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = { name: \"\", id: crusadeArmies?.length ?? 0, units: [] }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <CrusadeArmyRoster\r\n                deleteArmy={deleteArmy}\r\n                crusadeArmy={selectedCrusadeArmy}\r\n                goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                updateArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Crusade Armies\r\n            </h1>\r\n            <div className=\"expand\">\r\n                {crusadeArmiesDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={addArmy} className=\"primary\">\r\n                    Add\r\n            </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ArmiesList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}