{"version":3,"sources":["Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/FormNameEffectInputs.tsx","CommonFields/EditBattleScars.tsx","CommonFields/FormInput.tsx","CommonFields/ReadOnlyRow.tsx","Report/ReportUnit.tsx","CommonFields/FormButton.tsx","CommonFields/FormButtons.tsx","Report/ReportUnits.tsx","CommonFields/Header.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","RequisitionPointSpending.tsx","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg"],"names":["CalculateTotalExperience","unit","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","experienceLoss","CalculateCrusadePoints","warlordTrait","relic","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","battleScars","NameEffectsCard","props","cardContent","nameEffects","forEach","nameEffect","index","push","Fragment","key","Card","Subtitle","className","name","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","relicDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScar","experienceDetails","onClick","FormNameEffectInputs","formHeaderLabel","formName","Form","Label","Group","as","controlId","Control","type","onChange","onNameChange","value","placeholder","onEffectChange","EditBattleScars","addBattleScar","e","preventDefault","editUnit","u","editBattleScar","edit","newBattleScar","splice","outOfActionDisplay","o","target","ThemeContext","Consumer","Button","variant","block","style","borderColor","color","FormInput","xs","resetFirstColSpan","inputType","placeHolder","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","borderTop","Number","parseInt","FormButton","primary","submit","backgroundColor","size","small","FormButtons","tertiaryButtonOnClick","tertiaryButtonName","secondaryButtonName","secondaryButtonOnClick","primaryButtonName","primaryButtonOnClick","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","id","i","newUnits","findIndex","powerLevel","updateArmy","goBack","editIcon","onEdit","src","EditIcon","alt","subHeaderInfos","subHeaderInfo","headerText","ReportSummary","isContinuing","setIsContinuing","unitSummaries","UnitSummary","selectedPowerLevel","selectedCrusadePoints","detachmentTrait","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","Check","Input","checked","position","children","fontWeight","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","experienceFields","onSubmit","DeleteIcon","window","confirm","deleteUnit","Custom","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","editArmy","newArmy","saveArmy","handleDeleteArmy","a","maximumPowerLevel","width","c","traitColor","hex","colors","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","RequisitionPointSpending","setMaximumPowerLevel","warlordTraits","setWarlordTraits","relics","setRelics","removedBattleScars","setRemovedBattleScars","warlordTraitOptions","relicOptions","battleScarUnitOptions","warlordTraitsDisplay","newWarlordTraits","relicsDisplay","newRelics","battleScarSelector","selectedUnit","battleScarsOptions","newRemovedBattleScars","removedBattleScar","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","isSpendingRequisition","setIsSpendingRequisition","setUnitsDisplay","useEffect","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","Table","striped","bordered","hover","detachmentTraitCard","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","border","Body","Title","Provider","overflow","md","React","createContext","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.500445da.chunk.js","sourcesContent":["import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - (unit.experienceLoss ?? 0);\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const relicCrusadePoints = unit.relic ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0 - (unit.battleScars?.length ?? 0);\r\n\r\n    return warlordTraitCrusadePoints + relicCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface INameEffectCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction NameEffectsCard(props: INameEffectCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach((nameEffect, index) => {\r\n        cardContent.push(\r\n            <React.Fragment key={index}>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NameEffectsCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport NameEffectsCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let relicDisplay = null\r\n    if (props.unit.relic) {\r\n        relicDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Relic\"\r\n                nameEffects={[props.unit.relic]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.battleScars.forEach(battleScar => {\r\n            battleScars.push(battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Battle Participation\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.battleParticipation}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Marked For Greatness\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.markedForGreatness}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Agenda\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.agendaXp}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Kills\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.kills}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {relicDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    agendaXp: number;\r\n    alternateName?: string;\r\n    battleHonours: IBattleHonour[];\r\n    battleParticipation: number;\r\n    battleScars: INameEffect[];\r\n    crusadePoints: number;\r\n    experienceLoss?: number;\r\n    id: number,\r\n    kills: number;\r\n    markedForGreatness: number;\r\n    name: string;\r\n    notes: string;\r\n    powerLevel: number;\r\n    relic?: INameEffect;\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    Custom = \"Custom Battle Trait\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    battleRosterUnitIds?: number[]\r\n    detachmentTrait?: INameEffect;\r\n    id: number;\r\n    name: string;\r\n    alternateName?: string;\r\n    isAlternateNameEnabled?: boolean;\r\n    requisitionPoints?: number;\r\n    traitColor?: string;\r\n    units: ICrusadeUnit[];\r\n    maximumPowerLevel?: number;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport { INameEffect } from \"../Constants\";\r\n\r\ninterface IFormNameEffectInputsProps {\r\n    formName?: string;\r\n    onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    nameEffect?: INameEffect;\r\n    onEffectChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction FormNameEffectInputs(props: IFormNameEffectInputsProps) {\r\n    let formHeaderLabel = undefined\r\n    if (props.formName) {\r\n        formHeaderLabel = (\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>\r\n                        {props.formName}\r\n                    </Form.Label>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col>\r\n                {formHeaderLabel}\r\n                <Row>\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onNameChange}\r\n                            value={props.nameEffect?.name}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onEffectChange}\r\n                            value={props.nameEffect?.effect}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormNameEffectInputs;","import React from \"react\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"./FormNameEffectInputs\";\r\n\r\ninterface IEditBattleScarsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditBattleScars(props: IEditBattleScarsProps): JSX.Element {\r\n    function addBattleScar(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let battleScars = u.battleScars\r\n            if (!battleScars) {\r\n                battleScars = [];\r\n            }\r\n\r\n            u.battleScars.push({})\r\n        })\r\n    }\r\n\r\n    function editBattleScar(edit: (o: INameEffect) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newBattleScar = { ...u.battleScars[index] };\r\n            edit(newBattleScar)\r\n            u.battleScars.splice(index, 1, newBattleScar);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        props.unit.battleScars.forEach((battleScar, index) => {\r\n            outOfActionDisplay.push(\r\n                <FormNameEffectInputs\r\n                    key={index}\r\n                    onEffectChange={e => editBattleScar(o => o.effect = e.target.value, index)}\r\n                    onNameChange={e => editBattleScar(o => o.name = e.target.value, index)}\r\n                    nameEffect={battleScar}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n                    <Col>\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <Form.Label>\r\n                                    Battle Scars\r\n                                </Form.Label>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    onClick={addBattleScar}\r\n                                    type=\"button\"\r\n                                    block\r\n                                    style={{ borderColor: value, color: value }}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {outOfActionDisplay}\r\n                    </Col>\r\n                </Form.Group>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default EditBattleScars;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n    onClick?: () => void\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: JSX.Element | string = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\" onClick={props.onClick}>\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"../CommonFields/EditBattleScars\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"../CommonFields/FormNameEffectInputs\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let battleHonours = props.unit.battleHonours.map((battleHonour, index) => {\r\n\r\n        if ((battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6)\r\n            || (battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16)\r\n            || (battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31)\r\n            || (battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51)) {\r\n            return (\r\n                <FormNameEffectInputs\r\n                    nameEffect={battleHonour.battleTrait}\r\n                    onEffectChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    onNameChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                key={index}\r\n                firstColumn={battleHonour.battleTrait?.name || \"\"}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>\r\n                            {props.unit.name}\r\n                        </h3>\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Battle Participation\"\r\n                            label\r\n                            secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Greatness\"\r\n                            value={props.unit.markedForGreatness}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.agendaXp = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Agenda\"\r\n                            value={props.unit.agendaXp}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.kills = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Kills\"\r\n                            value={props.unit.kills}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Total Experience\"\r\n                            label\r\n                            secondColumn={totalExperience}\r\n                        />\r\n                        {battleHonours}\r\n                        <EditBattleScars\r\n                            unit={props.unit}\r\n                            editUnit={(edit) => {\r\n                                const u: ICrusadeUnit = {\r\n                                    ...props.unit,\r\n                                    battleScars: [...(props.unit.battleScars || [])]\r\n                                };\r\n                                edit(u)\r\n                                props.updateUnit(u);\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IFormButtonProps {\r\n    color?: string;\r\n    name: string;\r\n    onClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    primary?: boolean;\r\n    small?: boolean\r\n    submit?: boolean\r\n}\r\n\r\nfunction FormButton(props: IFormButtonProps): JSX.Element {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {color =>\r\n                <Button\r\n                    variant={props.primary ? \"primary\" : \"outline-primary\"}\r\n                    onClick={props.onClick}\r\n                    type={props.submit ? \"submit\" : \"button\"}\r\n                    block\r\n                    style={{\r\n                        borderColor: props.color || color,\r\n                        color: props.primary ? \"white\" : props.color || color,\r\n                        backgroundColor: props.primary ? props.color || color : \"white\"\r\n                    }}\r\n                    size={props.small ? undefined : \"lg\"}\r\n                >\r\n                    {props.name}\r\n                </Button>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default FormButton","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IFormButtonsProps {\r\n    primaryButtonName: string;\r\n    primaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    secondaryButtonName: string;\r\n    secondaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    tertiaryButtonName?: string;\r\n    tertiaryButtonOnClick?: (e: React.FormEvent | React.MouseEvent) => void;\r\n    color?: string;\r\n}\r\n\r\nfunction FormButtons(props: IFormButtonsProps) {\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            {\r\n                props.tertiaryButtonOnClick && props.tertiaryButtonName && (\r\n                    <Col>\r\n                        <FormButton\r\n                            color={props.color}\r\n                            name={props.tertiaryButtonName}\r\n                            onClick={props.tertiaryButtonOnClick}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.secondaryButtonName}\r\n                    onClick={props.secondaryButtonOnClick}\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.primaryButtonName}\r\n                    onClick={props.primaryButtonOnClick}\r\n                    primary\r\n                    submit\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default FormButtons","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ? props.crusadeArmy.requisitionPoints + 1 : 1)\r\n\r\n    const unitsDisplay: JSX.Element[] = []\r\n    units.forEach((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            unitsDisplay.push(\r\n                <ReportUnit unit={unit} key={unit.id} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Fill Unit Stats\r\n                </h2>\r\n            </Row>\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={done}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IHeaderProps {\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    subHeaderInfo?: { value?: number, name: string }[]\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    const subHeaderInfos = props.subHeaderInfo?.map((subHeaderInfo, index) => {\r\n        return (\r\n            <Row key={index}>\r\n                <b>{subHeaderInfo.value + \" \"}</b>{subHeaderInfo.name}\r\n            </Row>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"my-2 mx-1 header\">\r\n            <Col as=\"h2\" className=\"p-0\" xs={9}>\r\n                {props.headerText}\r\n                {editIcon}\r\n\r\n            </Col>\r\n            <Col xs={2} className=\"pl-0\">\r\n                {subHeaderInfos}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport NameEffectsCard from \"../CommonFields/UnitSummaryCard\";\r\nimport Header from \"../CommonFields/Header\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds\r\n            && props.crusadeArmy.battleRosterUnitIds.includes(unit.id)\r\n        ) {\r\n            unitSummaries.push(\r\n                <ThemeContext.Consumer key={unit.id + \" Header\"}>\r\n                    {value =>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>{unit.name}</h3>\r\n                    }\r\n                </ThemeContext.Consumer>\r\n            )\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={unit.id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            {props.crusadeArmy.detachmentTrait && (\r\n                <NameEffectsCard\r\n                    nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n                    header=\"Detachment Trait\"\r\n                />\r\n            )}\r\n            {unitSummaries}\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={() => setIsContinuing(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\nimport FormButton from \"../CommonFields/FormButton\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    function selectAll() {\r\n        let newKeys = props.crusadeArmy.units.map(u => u.id);\r\n        setSelectedUnitIds(newKeys)\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {value =>\r\n                    <Form.Group onClick={() => selectUnit(unit.id)} className=\"mb-1\">\r\n                        <Form.Check type=\"checkbox\" className=\"custom-control\" color={value}>\r\n                            <Form.Check.Input className=\"custom-control-input mr-1\" color={value} checked={selectedUnitIds.includes(unit.id)} style={{ position: \"relative\" }} />\r\n                            <Form.Check.Label className=\"custom-control-label\" children={`${unit.name} ${unit.powerLevel}PL`} style={{ fontWeight: \"unset\" }} />\r\n                        </Form.Check>\r\n                    </Form.Group>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    });\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Select Battle Roster\r\n                </h2>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Power Level\"\r\n                secondColumn={selectedPowerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Crusade Points\"\r\n                secondColumn={selectedCrusadePoints}\r\n            />\r\n            <Form>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <FormButton\r\n                            small\r\n                            name=\"Select All\"\r\n                            onClick={selectAll}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {display}\r\n            </Form>\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={Continue}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"./CommonFields/EditBattleScars\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false)\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], battleScars: [...(unit.battleScars || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormNameEffectInputs\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                onNameChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                    })\r\n                }}\r\n                onEffectChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                nameEffect={battleHonour.battleTrait}\r\n            />\r\n        )\r\n    });\r\n\r\n    let experienceFields = isShowingExperience && (\r\n        <>\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <FormInput\r\n                formName=\"Loss\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.experienceLoss = Number.parseInt(e.target.value))}\r\n                value={unit.experienceLoss}\r\n            />\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Total Experience\"\r\n                secondColumn={totalExperience}\r\n                onClick={() => setIsShowingExperience(!isShowingExperience)}\r\n            />\r\n            {experienceFields}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Traits and Honours\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        small\r\n                        name=\"Add\"\r\n                        onClick={() => {\r\n                            editUnit((u) =>\r\n                                u.battleHonours.push({\r\n                                    rank: BattleHonourRank.Custom,\r\n                                    battleTrait: {},\r\n                                    crusadePoints: u.powerLevel >= 11 ? 2 : 1,\r\n                                }))\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleHonours}\r\n            <EditBattleScars\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            {\r\n                unit.warlordTrait &&\r\n                <FormNameEffectInputs\r\n                    formName=\"Warlord Trait\"\r\n                    onNameChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.name = event.target.value\r\n                    })}\r\n                    onEffectChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.effect = event.target.value\r\n                    })}\r\n                    nameEffect={unit.warlordTrait}\r\n                />\r\n            }\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Crusade Points\"\r\n                secondColumn={crusadePoints}\r\n            />\r\n            <FormButtons\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [props.unit.name])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: props.unit.powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.unit.name}\r\n            />\r\n            <UnitSummaryRows unit={props.unit} />\r\n            <FormButtons\r\n                primaryButtonName=\"Edit\"\r\n                primaryButtonOnClick={() => setIsEdittingUnit(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={() => props.saveArmy(army)} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <FormInput\r\n                    formName=\"Requisition Points\"\r\n                    onChange={e => editArmy((a) => a.requisitionPoints = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.requisitionPoints}\r\n                />\r\n                <FormInput\r\n                    formName=\"Max PL\"\r\n                    onChange={e => editArmy((a) => a.maximumPowerLevel = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.maximumPowerLevel}\r\n                />\r\n                <FormNameEffectInputs\r\n                    formName=\"Trait\"\r\n                    onNameChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.name = e.target.value\r\n                    })}\r\n                    nameEffect={army.detachmentTrait}\r\n                    onEffectChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.effect = e.target.value\r\n                    })}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <CirclePicker\r\n                            width=\"90vw\"\r\n                            onChange={c => editArmy((a) => a.traitColor = c.hex)}\r\n                            color={army.traitColor || \"blue\"}\r\n                            colors={[\r\n                                \"#FF0000\",\r\n                                \"#0000FF\",\r\n                                \"#ebdb00\",\r\n                                \"#6b6b6b\",\r\n                                \"#00a00d\",\r\n                                \"#a00097\",\r\n                                \"#00a7a2\",\r\n                                \"#996401\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={() => props.saveArmy(army)}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                    color={army.traitColor}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ICrusadeArmy, INameEffect } from \"./Constants\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IRequisitionPointSpendingProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction RequisitionPointSpending(props: IRequisitionPointSpendingProps): JSX.Element {\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ?? 0)\r\n    const [maximumPowerLevel, setMaximumPowerLevel] = useState<number>(props.crusadeArmy.maximumPowerLevel ?? 0)\r\n    const [warlordTraits, setWarlordTraits] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [relics, setRelics] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [removedBattleScars, setRemovedBattleScars] = useState<{ id: number, name?: string }[]>([])\r\n\r\n    function IncreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel + 5)\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n    }\r\n\r\n    function DecreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel - 5)\r\n        setRequisitionPoints(requisitionPoints + 1)\r\n    }\r\n\r\n    function AddWarlordTrait() {\r\n        const newWarlordTraits = [...warlordTraits, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setWarlordTraits(newWarlordTraits)\r\n    }\r\n\r\n    function AddRelic() {\r\n        const newRelics = [...relics, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRelics(newRelics)\r\n    }\r\n\r\n    function RemoveBattleScars() {\r\n        const newRemovedBattleScars = [...removedBattleScars, { id: -1 }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRemovedBattleScars(newRemovedBattleScars);\r\n    }\r\n\r\n    const warlordTraitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const relicOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const battleScarUnitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (!unit.warlordTrait) {\r\n            warlordTraitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (!unit.relic) {\r\n            relicOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (unit.battleScars.find(battleScar => battleScar !== undefined)) {\r\n            battleScarUnitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n    })\r\n\r\n    function save() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.maximumPowerLevel = maximumPowerLevel\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n\r\n        warlordTraits.forEach(warlordTrait => {\r\n            const unit = crusadeArmy.units.find(u => u.id === warlordTrait.id)\r\n            if (unit) {\r\n                unit.warlordTrait = warlordTrait.nameEffect;\r\n            }\r\n        })\r\n\r\n        relics.forEach(relic => {\r\n            const unit = crusadeArmy.units.find(u => u.id === relic.id)\r\n            if (unit) {\r\n                unit.relic = relic.nameEffect;\r\n            }\r\n        })\r\n\r\n        removedBattleScars.forEach(removedBattleScar => {\r\n            const unit = crusadeArmy.units.find(u => u.id === removedBattleScar.id)\r\n            if (unit) {\r\n                unit.battleScars = unit.battleScars.filter(battleScar => battleScar?.name === removedBattleScar.name)\r\n            }\r\n        })\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        props.goBack()\r\n    }\r\n\r\n    const warlordTraitsDisplay: JSX.Element[] = []\r\n    warlordTraits?.forEach((warlordTrait, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newWarlordTraits = [...warlordTraits]\r\n            newWarlordTraits?.splice(index, 1, { ...warlordTrait, id: Number.parseInt(e.target.value) });\r\n            setWarlordTraits(newWarlordTraits)\r\n        }\r\n        warlordTraitsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={warlordTrait.id} as=\"select\">\r\n                            {warlordTraitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newWarlordTraits = [...warlordTraits]\r\n                                newWarlordTraits?.splice(index, 1);\r\n                                setWarlordTraits(newWarlordTraits)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.name = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.effect = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    nameEffect={warlordTrait.nameEffect}\r\n                />\r\n            </>\r\n        )\r\n    })\r\n\r\n    const relicsDisplay: JSX.Element[] = []\r\n    relics?.forEach((relic, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRelics = [...relics]\r\n            newRelics?.splice(index, 1, { ...relic, id: Number.parseInt(e.target.value) });\r\n            setRelics(newRelics)\r\n        }\r\n        relicsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={relic.id} as=\"select\">\r\n                            {relicOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRelics = [...relics]\r\n                                newRelics?.splice(index, 1);\r\n                                setRelics(newRelics)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newRelics = [...warlordTraits]\r\n                        relic.nameEffect.name = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newRelics = [...relics]\r\n                        relic.nameEffect.effect = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    nameEffect={relic.nameEffect}\r\n                />\r\n            </>\r\n        )\r\n    })\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    removedBattleScars?.forEach((battleScar, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, id: Number.parseInt(e.target.value) });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        function onBattleScarChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, name: e.target.value });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        const battleScarSelector: JSX.Element[] = []\r\n        if (battleScar.id !== undefined && battleScar.id !== -1) {\r\n            const selectedUnit = props.crusadeArmy.units.find(u => u.id === battleScar.id)\r\n            const battleScarsOptions: JSX.Element[] = []\r\n            selectedUnit?.battleScars.forEach(battleScar => {\r\n                battleScarsOptions.push(<option value={battleScar.name}>{battleScar.name}</option>)\r\n            })\r\n\r\n            battleScarSelector.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control onChange={onBattleScarChanged} value={battleScar.name} as=\"select\">\r\n                            {battleScarsOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        battleScarsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={battleScar.id} as=\"select\">\r\n                            {battleScarUnitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRemovedBattleScars = [...removedBattleScars]\r\n                                newRemovedBattleScars?.splice(index, 1);\r\n                                setRemovedBattleScars(newRemovedBattleScars)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {battleScarSelector}\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                headerText=\"RP Spending\"\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Requisition Points\"\r\n                secondColumn={requisitionPoints}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Maximum Power Level\"\r\n                secondColumn={maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={DecreasePowerLevel}\r\n                        name=\"Undo\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={IncreasePowerLevel}\r\n                        name=\"Increase Supply Limit\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddWarlordTrait}\r\n                        name=\"Warlord Trait\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {warlordTraitsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddRelic}\r\n                        name=\"Relic\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {relicsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Repair and Recuperate\"\r\n                        onClick={RemoveBattleScars}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleScarsDisplay}\r\n            <FormButtons\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequisitionPointSpending","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport NameEffectsCard from \"./CommonFields/UnitSummaryCard\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport RequisitionPointSpending from \"./RequisitionPointSpending\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [isSpendingRequisition, setIsSpendingRequisition] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {crusadePoints}\r\n                    </td>\r\n                    <td>\r\n                        {unit.powerLevel}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            battleScars: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n    else if (isSpendingRequisition) {\r\n        return (\r\n            <RequisitionPointSpending\r\n                goBack={() => setIsSpendingRequisition(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>CP</th>\r\n                        <th>PL</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    let detachmentTraitCard = undefined\r\n    if (props.crusadeArmy.detachmentTrait) {\r\n        detachmentTraitCard = (\r\n            <NameEffectsCard\r\n                header=\"Detachment Trait\"\r\n                nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.crusadeArmy.name}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Requisition Points:\r\n                    </Form.Label>\r\n                    {\" \" + props.crusadeArmy.requisitionPoints}\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Spend\"\r\n                        onClick={() => setIsSpendingRequisition(true)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {detachmentTraitCard}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        <h3>\r\n                            Units\r\n                        </h3>\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Add\"\r\n                        onClick={addUnit}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Power Level\"\r\n                secondColumn={powerLevel + \"/\" + props.crusadeArmy.maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <FormButtons\r\n                primaryButtonName=\"Battle!\"\r\n                primaryButtonOnClick={() => setIsReporting(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ThemeContext } from \"./App\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card\r\n                    className=\"mb-3\"\r\n                    key={index}\r\n                    onClick={() => setSelectedCrusadeArmy(crusadeArmy)}\r\n                    style={{ border: `1px solid ${crusadeArmy.traitColor || \"rgb(0, 123, 255)\"}` }} >\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {crusadeArmy.name}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP \"}\r\n                            {crusadeArmy.requisitionPoints + \" RP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = {\r\n            name: \"\",\r\n            id: crusadeArmies?.length ?? 0,\r\n            maximumPowerLevel: 50,\r\n            requisitionPoints: 5,\r\n            units: []\r\n        }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <ThemeContext.Provider value={selectedCrusadeArmy.traitColor || \"blue\"}>\r\n                <CrusadeArmyRoster\r\n                    deleteArmy={deleteArmy}\r\n                    crusadeArmy={selectedCrusadeArmy}\r\n                    goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                    updateArmy={updateArmy}\r\n                />\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ThemeContext = React.createContext(\"blue\");\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <ArmiesList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";"],"sourceRoot":""}