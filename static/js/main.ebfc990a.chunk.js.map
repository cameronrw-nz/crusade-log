{"version":3,"sources":["Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Resources/Icons/ThreeDotsVerticalIcon.svg","Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/FormNameEffectInputs.tsx","CommonFields/FormButton.tsx","CommonFields/EditBattleScars.tsx","CommonFields/FormInput.tsx","CommonFields/ReadOnlyRow.tsx","Report/ReportUnit.tsx","CommonFields/FormButtons.tsx","Report/ReportUnits.tsx","CommonFields/Header.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","RequisitionPointSpending.tsx","CommonFields/DraggableTable.tsx","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Icons/DeleteIcon.svg"],"names":["module","exports","CalculateTotalExperience","unit","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","experienceLoss","CalculateCrusadePoints","warlordTrait","relic","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","battleScars","NameEffectsCard","props","cardContent","nameEffects","forEach","nameEffect","index","push","Fragment","key","Card","Subtitle","className","name","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","relicDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScar","experienceDetails","otherTraitsDisplay","otherTraits","otherTrait","onClick","FormNameEffectInputs","formHeaderLabel","formName","Form","Label","Group","as","controlId","Control","type","onChange","onNameChange","value","placeholder","onEffectChange","FormButton","ThemeContext","Consumer","color","Button","variant","primary","submit","block","style","borderColor","backgroundColor","size","small","EditBattleScars","editBattleScar","edit","editUnit","u","newBattleScar","splice","outOfActionDisplay","e","o","target","preventDefault","FormInput","xs","resetFirstColSpan","inputType","placeHolder","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","borderTop","Number","parseInt","FormButtons","tertiaryButtonOnClick","tertiaryButtonName","secondaryButtonName","secondaryButtonOnClick","primaryButtonName","primaryButtonOnClick","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","id","i","newUnits","findIndex","powerLevel","updateArmy","goBack","editIcon","onEdit","src","EditIcon","alt","subHeaderInfos","subHeaderInfo","headerText","ReportSummary","isContinuing","setIsContinuing","unitSummaries","UnitSummary","selectedPowerLevel","selectedCrusadePoints","detachmentTrait","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","Check","Input","checked","position","children","fontWeight","EditUnit","isNewUnit","setUnit","save","stopPropagation","newUnit","ot","saveUnit","func","newTotalExperience","experienceFields","updateOtherTraitNameEffect","otherTraitIndex","nameEffectIndex","update","otherTraitNameEffects","ne","updateName","addEffect","onSubmit","DeleteIcon","window","confirm","deleteUnit","Custom","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","editArmy","newArmy","saveArmy","handleDeleteArmy","a","maximumPowerLevel","width","c","traitColor","hex","colors","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","RequisitionPointSpending","setMaximumPowerLevel","warlordTraits","setWarlordTraits","relics","setRelics","removedBattleScars","setRemovedBattleScars","warlordTraitOptions","relicOptions","battleScarUnitOptions","warlordTraitsDisplay","newWarlordTraits","relicsDisplay","newRelics","battleScarSelector","selectedUnit","battleScarsOptions","newRemovedBattleScars","removedBattleScar","DraggableTableRow","dropRef","React","useRef","dragRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveRow","drop","useDrag","collect","isDragging","drag","opacity","preview","ref","ThreeDotsVerticalIcon","row","cells","cell","getCellProps","onRowClick","render","DraggableTable","columns","crusadeUnits","getRowId","useCallback","useTable","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","dragRecord","updateRowPosition","DndProvider","backend","TouchBackend","options","enableMouseEvents","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","original","getRowProps","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","isSpendingRequisition","setIsSpendingRequisition","setUnitsDisplay","useEffect","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","accessor","targetIndex","originalIndex","detachmentTraitCard","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","border","Body","Title","Provider","overflow","md","createContext","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ebfc990a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","module.exports = __webpack_public_path__ + \"static/media/ThreeDotsVerticalIcon.f1d479ac.svg\";","import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - (unit.experienceLoss ?? 0);\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const relicCrusadePoints = unit.relic ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0 - (unit.battleScars?.length ?? 0);\r\n\r\n    return warlordTraitCrusadePoints + relicCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface INameEffectCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction NameEffectsCard(props: INameEffectCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach((nameEffect, index) => {\r\n        cardContent.push(\r\n            <React.Fragment key={index}>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NameEffectsCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport NameEffectsCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let relicDisplay = null\r\n    if (props.unit.relic) {\r\n        relicDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Relic\"\r\n                nameEffects={[props.unit.relic]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.battleScars.forEach(battleScar => {\r\n            battleScars.push(battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Battle Participation\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.battleParticipation}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Marked For Greatness\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.markedForGreatness}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Agenda\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.agendaXp}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Kills\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.kills}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    let otherTraitsDisplay = null\r\n    if (props.unit.otherTraits && props.unit.otherTraits.length > 0) {\r\n        otherTraitsDisplay = props.unit.otherTraits.map((otherTrait, index) => {\r\n            return (\r\n                <NameEffectsCard\r\n                    key={index}\r\n                    header={otherTrait.name}\r\n                    nameEffects={otherTrait.nameEffects}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {relicDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            {otherTraitsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    agendaXp: number;\r\n    alternateName?: string;\r\n    battleHonours: IBattleHonour[];\r\n    battleParticipation: number;\r\n    battleScars: INameEffect[];\r\n    crusadePoints: number;\r\n    experienceLoss?: number;\r\n    id: number,\r\n    kills: number;\r\n    markedForGreatness: number;\r\n    name: string;\r\n    notes: string;\r\n    powerLevel: number;\r\n    relic?: INameEffect;\r\n    sequenceNumber?: number;\r\n    warlordTrait?: INameEffect;\r\n    otherTraits?: IOtherTrait[]\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\ninterface IOtherTrait {\r\n    name: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    Custom = \"Custom Battle Trait\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    battleRosterUnitIds?: number[]\r\n    detachmentTrait?: INameEffect;\r\n    id: number;\r\n    name: string;\r\n    alternateName?: string;\r\n    isAlternateNameEnabled?: boolean;\r\n    requisitionPoints?: number;\r\n    traitColor?: string;\r\n    units: ICrusadeUnit[];\r\n    maximumPowerLevel?: number;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport { INameEffect } from \"../Constants\";\r\n\r\ninterface IFormNameEffectInputsProps {\r\n    formName?: string;\r\n    onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    nameEffect?: INameEffect;\r\n    onEffectChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction FormNameEffectInputs(props: IFormNameEffectInputsProps) {\r\n    let formHeaderLabel = undefined\r\n    if (props.formName) {\r\n        formHeaderLabel = (\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>\r\n                        {props.formName}\r\n                    </Form.Label>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col>\r\n                {formHeaderLabel}\r\n                <Row>\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onNameChange}\r\n                            value={props.nameEffect?.name}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onEffectChange}\r\n                            value={props.nameEffect?.effect}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormNameEffectInputs;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IFormButtonProps {\r\n    color?: string;\r\n    name: string;\r\n    onClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    primary?: boolean;\r\n    small?: boolean\r\n    submit?: boolean\r\n}\r\n\r\nfunction FormButton(props: IFormButtonProps): JSX.Element {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {color =>\r\n                <Button\r\n                    variant={props.primary ? \"primary\" : \"outline-primary\"}\r\n                    onClick={props.onClick}\r\n                    type={props.submit ? \"submit\" : \"button\"}\r\n                    block\r\n                    style={{\r\n                        borderColor: props.color || color,\r\n                        color: props.primary ? \"white\" : props.color || color,\r\n                        backgroundColor: props.primary ? props.color || color : \"white\"\r\n                    }}\r\n                    size={props.small ? undefined : \"lg\"}\r\n                >\r\n                    {props.name}\r\n                </Button>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default FormButton","import React from \"react\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormNameEffectInputs from \"./FormNameEffectInputs\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IEditBattleScarsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditBattleScars(props: IEditBattleScarsProps): JSX.Element {\r\n    function addBattleScar(e: React.MouseEvent | React.FormEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let battleScars = u.battleScars\r\n            if (!battleScars) {\r\n                battleScars = [];\r\n            }\r\n\r\n            u.battleScars.push({})\r\n        })\r\n    }\r\n\r\n    function editBattleScar(edit: (o: INameEffect) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newBattleScar = { ...u.battleScars[index] };\r\n            edit(newBattleScar)\r\n            u.battleScars.splice(index, 1, newBattleScar);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        props.unit.battleScars.forEach((battleScar, index) => {\r\n            outOfActionDisplay.push(\r\n                <FormNameEffectInputs\r\n                    key={index}\r\n                    onEffectChange={e => editBattleScar(o => o.effect = e.target.value, index)}\r\n                    onNameChange={e => editBattleScar(o => o.name = e.target.value, index)}\r\n                    nameEffect={battleScar}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n            <Col>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Battle Scars\r\n                                </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            small\r\n                            onClick={addBattleScar}\r\n                            name=\"Add\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {outOfActionDisplay}\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default EditBattleScars;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n    onClick?: () => void\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: JSX.Element | string = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\" onClick={props.onClick}>\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"../CommonFields/EditBattleScars\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"../CommonFields/FormNameEffectInputs\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let battleHonours = props.unit.battleHonours.map((battleHonour, index) => {\r\n\r\n        if ((battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6)\r\n            || (battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16)\r\n            || (battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31)\r\n            || (battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51)) {\r\n            return (\r\n                <FormNameEffectInputs\r\n                    nameEffect={battleHonour.battleTrait}\r\n                    onEffectChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    onNameChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                key={index}\r\n                firstColumn={battleHonour.battleTrait?.name || \"\"}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>\r\n                            {props.unit.name}\r\n                        </h3>\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Battle Participation\"\r\n                            label\r\n                            secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Greatness\"\r\n                            value={props.unit.markedForGreatness}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.agendaXp = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Agenda\"\r\n                            value={props.unit.agendaXp}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.kills = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Kills\"\r\n                            value={props.unit.kills}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Total Experience\"\r\n                            label\r\n                            secondColumn={totalExperience}\r\n                        />\r\n                        {battleHonours}\r\n                        <EditBattleScars\r\n                            unit={props.unit}\r\n                            editUnit={(edit) => {\r\n                                const u: ICrusadeUnit = {\r\n                                    ...props.unit,\r\n                                    battleScars: [...(props.unit.battleScars || [])]\r\n                                };\r\n                                edit(u)\r\n                                props.updateUnit(u);\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IFormButtonsProps {\r\n    primaryButtonName: string;\r\n    primaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    secondaryButtonName: string;\r\n    secondaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    tertiaryButtonName?: string;\r\n    tertiaryButtonOnClick?: (e: React.FormEvent | React.MouseEvent) => void;\r\n    color?: string;\r\n}\r\n\r\nfunction FormButtons(props: IFormButtonsProps) {\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            {\r\n                props.tertiaryButtonOnClick && props.tertiaryButtonName && (\r\n                    <Col>\r\n                        <FormButton\r\n                            color={props.color}\r\n                            name={props.tertiaryButtonName}\r\n                            onClick={props.tertiaryButtonOnClick}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.secondaryButtonName}\r\n                    onClick={props.secondaryButtonOnClick}\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.primaryButtonName}\r\n                    onClick={props.primaryButtonOnClick}\r\n                    primary\r\n                    submit\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default FormButtons","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ? props.crusadeArmy.requisitionPoints + 1 : 1)\r\n\r\n    const unitsDisplay: JSX.Element[] = []\r\n    units.forEach((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            unitsDisplay.push(\r\n                <ReportUnit unit={unit} key={unit.id} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Fill Unit Stats\r\n                </h2>\r\n            </Row>\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={done}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IHeaderProps {\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    subHeaderInfo?: { value?: number, name: string }[]\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    const subHeaderInfos = props.subHeaderInfo?.map((subHeaderInfo, index) => {\r\n        return (\r\n            <Row key={index}>\r\n                <b>{subHeaderInfo.value + \" \"}</b>{subHeaderInfo.name}\r\n            </Row>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"my-2 mx-1 header\">\r\n            <Col as=\"h2\" className=\"p-0\" xs={9}>\r\n                {props.headerText}\r\n                {editIcon}\r\n\r\n            </Col>\r\n            <Col xs={2} className=\"pl-0\">\r\n                {subHeaderInfos}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport NameEffectsCard from \"../CommonFields/UnitSummaryCard\";\r\nimport Header from \"../CommonFields/Header\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds\r\n            && props.crusadeArmy.battleRosterUnitIds.includes(unit.id)\r\n        ) {\r\n            unitSummaries.push(\r\n                <ThemeContext.Consumer key={unit.id + \" Header\"}>\r\n                    {value =>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>{unit.name}</h3>\r\n                    }\r\n                </ThemeContext.Consumer>\r\n            )\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={unit.id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            {props.crusadeArmy.detachmentTrait && (\r\n                <NameEffectsCard\r\n                    nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n                    header=\"Detachment Trait\"\r\n                />\r\n            )}\r\n            {unitSummaries}\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={() => setIsContinuing(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\nimport FormButton from \"../CommonFields/FormButton\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    function selectAll() {\r\n        let newKeys = props.crusadeArmy.units.map(u => u.id);\r\n        setSelectedUnitIds(newKeys)\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {value =>\r\n                    <Form.Group onClick={() => selectUnit(unit.id)} className=\"mb-1\">\r\n                        <Form.Check type=\"checkbox\" className=\"custom-control\" color={value}>\r\n                            <Form.Check.Input className=\"custom-control-input mr-1\" color={value} checked={selectedUnitIds.includes(unit.id)} style={{ position: \"relative\" }} />\r\n                            <Form.Check.Label className=\"custom-control-label\" children={`${unit.name} ${unit.powerLevel}PL`} style={{ fontWeight: \"unset\" }} />\r\n                        </Form.Check>\r\n                    </Form.Group>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    });\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Select Battle Roster\r\n                </h2>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Power Level\"\r\n                secondColumn={selectedPowerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Crusade Points\"\r\n                secondColumn={selectedCrusadePoints}\r\n            />\r\n            <Form>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <FormButton\r\n                            small\r\n                            name=\"Select All\"\r\n                            onClick={selectAll}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {display}\r\n            </Form>\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={Continue}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank, INameEffect } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"./CommonFields/EditBattleScars\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false)\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        const newUnit = unit;\r\n        if (newUnit.otherTraits && newUnit.otherTraits.length > 0) {\r\n            newUnit.otherTraits = newUnit.otherTraits.filter(ot => ot.name !== \"\")\r\n        }\r\n        props.saveUnit(newUnit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], battleScars: [...(unit.battleScars || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormNameEffectInputs\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                onNameChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                    })\r\n                }}\r\n                onEffectChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                nameEffect={battleHonour.battleTrait}\r\n            />\r\n        )\r\n    });\r\n\r\n    let experienceFields = isShowingExperience && (\r\n        <>\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <FormInput\r\n                formName=\"Loss\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.experienceLoss = Number.parseInt(e.target.value))}\r\n                value={unit.experienceLoss}\r\n            />\r\n        </>\r\n    )\r\n\r\n    function updateName(otherTraitIndex: number, value: string): void {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            otherTrait.name = value\r\n        })\r\n    }\r\n\r\n    function addEffect(otherTraitIndex: number): void {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            otherTrait.nameEffects.push({})\r\n        })\r\n    }\r\n\r\n    function updateOtherTraitNameEffect(otherTraitIndex: number, nameEffectIndex: number, update: (nameEffect: INameEffect) => void) {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            const nameEffect = otherTrait.nameEffects[nameEffectIndex];\r\n            update(nameEffect)\r\n        })\r\n    }\r\n\r\n    let otherTraits = null\r\n    if (unit.otherTraits && unit.otherTraits.length > 0) {\r\n\r\n        otherTraits = unit.otherTraits.map((otherTrait, otherTraitIndex) => {\r\n            let otherTraitNameEffects = null\r\n            if (otherTrait.nameEffects && otherTrait.nameEffects.length > 0) {\r\n                otherTraitNameEffects = otherTrait.nameEffects.map((nameEffect, nameEffectIndex) => {\r\n                    return (\r\n                        <FormNameEffectInputs\r\n                            key={nameEffectIndex}\r\n                            nameEffect={nameEffect}\r\n                            onEffectChange={event => updateOtherTraitNameEffect(otherTraitIndex, nameEffectIndex, ne => ne.effect = event.target.value)}\r\n                            onNameChange={event => updateOtherTraitNameEffect(otherTraitIndex, nameEffectIndex, ne => ne.name = event.target.value)}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            return (\r\n                <React.Fragment key={otherTraitIndex}>\r\n                    <Row className=\"mb-2\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"textbox\"\r\n                                onChange={event => updateName(otherTraitIndex, event.target.value)}\r\n                                value={otherTrait.name}\r\n                                placeholder=\"Ability Name\"\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <FormButton\r\n                                small\r\n                                name=\"Add Effect\"\r\n                                onClick={() => addEffect(otherTraitIndex)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {otherTraitNameEffects}\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Total Experience\"\r\n                secondColumn={totalExperience}\r\n                onClick={() => setIsShowingExperience(!isShowingExperience)}\r\n            />\r\n            {experienceFields}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Traits and Honours\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        small\r\n                        name=\"Add\"\r\n                        onClick={() => {\r\n                            editUnit((u) =>\r\n                                u.battleHonours.push({\r\n                                    rank: BattleHonourRank.Custom,\r\n                                    battleTrait: {},\r\n                                    crusadePoints: u.powerLevel >= 11 ? 2 : 1,\r\n                                }))\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleHonours}\r\n            <EditBattleScars\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            {\r\n                unit.warlordTrait &&\r\n                <FormNameEffectInputs\r\n                    formName=\"Warlord Trait\"\r\n                    onNameChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.name = event.target.value\r\n                    })}\r\n                    onEffectChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.effect = event.target.value\r\n                    })}\r\n                    nameEffect={unit.warlordTrait}\r\n                />\r\n            }\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Crusade Points\"\r\n                secondColumn={crusadePoints}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Other Abilities\"\r\n                secondColumn={\r\n                    <FormButton\r\n                        name=\"Add Ability\"\r\n                        small\r\n                        onClick={() => editUnit(u => {\r\n                            if (!u.otherTraits) {\r\n                                u.otherTraits = []\r\n                            }\r\n                            u.otherTraits.push({ name: \"\", nameEffects: [{}] });\r\n                        })}\r\n                    />\r\n                }\r\n            />\r\n            {otherTraits}\r\n            <FormButtons\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [props.unit.name])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: props.unit.powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.unit.name}\r\n            />\r\n            <UnitSummaryRows unit={props.unit} />\r\n            <FormButtons\r\n                primaryButtonName=\"Edit\"\r\n                primaryButtonOnClick={() => setIsEdittingUnit(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={() => props.saveArmy(army)} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <FormInput\r\n                    formName=\"Requisition Points\"\r\n                    onChange={e => editArmy((a) => a.requisitionPoints = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.requisitionPoints}\r\n                />\r\n                <FormInput\r\n                    formName=\"Max PL\"\r\n                    onChange={e => editArmy((a) => a.maximumPowerLevel = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.maximumPowerLevel}\r\n                />\r\n                <FormNameEffectInputs\r\n                    formName=\"Trait\"\r\n                    onNameChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.name = e.target.value\r\n                    })}\r\n                    nameEffect={army.detachmentTrait}\r\n                    onEffectChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.effect = e.target.value\r\n                    })}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <CirclePicker\r\n                            width=\"90vw\"\r\n                            onChange={c => editArmy((a) => a.traitColor = c.hex)}\r\n                            color={army.traitColor || \"blue\"}\r\n                            colors={[\r\n                                \"#FF0000\",\r\n                                \"#0000FF\",\r\n                                \"#ebdb00\",\r\n                                \"#6b6b6b\",\r\n                                \"#00a00d\",\r\n                                \"#a00097\",\r\n                                \"#00a7a2\",\r\n                                \"#996401\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={() => props.saveArmy(army)}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                    color={army.traitColor}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ICrusadeArmy, INameEffect } from \"./Constants\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IRequisitionPointSpendingProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction RequisitionPointSpending(props: IRequisitionPointSpendingProps): JSX.Element {\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ?? 0)\r\n    const [maximumPowerLevel, setMaximumPowerLevel] = useState<number>(props.crusadeArmy.maximumPowerLevel ?? 0)\r\n    const [warlordTraits, setWarlordTraits] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [relics, setRelics] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [removedBattleScars, setRemovedBattleScars] = useState<{ id: number, name?: string }[]>([])\r\n\r\n    function IncreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel + 5)\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n    }\r\n\r\n    function DecreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel - 5)\r\n        setRequisitionPoints(requisitionPoints + 1)\r\n    }\r\n\r\n    function AddWarlordTrait() {\r\n        const newWarlordTraits = [...warlordTraits, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setWarlordTraits(newWarlordTraits)\r\n    }\r\n\r\n    function AddRelic() {\r\n        const newRelics = [...relics, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRelics(newRelics)\r\n    }\r\n\r\n    function RemoveBattleScars() {\r\n        const newRemovedBattleScars = [...removedBattleScars, { id: -1 }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRemovedBattleScars(newRemovedBattleScars);\r\n    }\r\n\r\n    const warlordTraitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const relicOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const battleScarUnitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (!unit.warlordTrait) {\r\n            warlordTraitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (!unit.relic) {\r\n            relicOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (unit.battleScars.find(battleScar => battleScar !== undefined)) {\r\n            battleScarUnitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n    })\r\n\r\n    function save() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.maximumPowerLevel = maximumPowerLevel\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n\r\n        warlordTraits.forEach(warlordTrait => {\r\n            const unit = crusadeArmy.units.find(u => u.id === warlordTrait.id)\r\n            if (unit) {\r\n                unit.warlordTrait = warlordTrait.nameEffect;\r\n            }\r\n        })\r\n\r\n        relics.forEach(relic => {\r\n            const unit = crusadeArmy.units.find(u => u.id === relic.id)\r\n            if (unit) {\r\n                unit.relic = relic.nameEffect;\r\n            }\r\n        })\r\n\r\n        removedBattleScars.forEach(removedBattleScar => {\r\n            const unit = crusadeArmy.units.find(u => u.id === removedBattleScar.id)\r\n            if (unit) {\r\n                unit.battleScars = unit.battleScars.filter(battleScar => battleScar?.name === removedBattleScar.name)\r\n            }\r\n        })\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        props.goBack()\r\n    }\r\n\r\n    const warlordTraitsDisplay: JSX.Element[] = []\r\n    warlordTraits?.forEach((warlordTrait, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newWarlordTraits = [...warlordTraits]\r\n            newWarlordTraits?.splice(index, 1, { ...warlordTrait, id: Number.parseInt(e.target.value) });\r\n            setWarlordTraits(newWarlordTraits)\r\n        }\r\n        warlordTraitsDisplay.push(\r\n            <React.Fragment key={index}>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={warlordTrait.id} as=\"select\">\r\n                            {warlordTraitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newWarlordTraits = [...warlordTraits]\r\n                                newWarlordTraits?.splice(index, 1);\r\n                                setWarlordTraits(newWarlordTraits)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.name = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.effect = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    nameEffect={warlordTrait.nameEffect}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n    const relicsDisplay: JSX.Element[] = []\r\n    relics?.forEach((relic, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRelics = [...relics]\r\n            newRelics?.splice(index, 1, { ...relic, id: Number.parseInt(e.target.value) });\r\n            setRelics(newRelics)\r\n        }\r\n        relicsDisplay.push(\r\n            <React.Fragment key={index}>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={relic.id} as=\"select\">\r\n                            {relicOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRelics = [...relics]\r\n                                newRelics?.splice(index, 1);\r\n                                setRelics(newRelics)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newRelics = [...warlordTraits]\r\n                        relic.nameEffect.name = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newRelics = [...relics]\r\n                        relic.nameEffect.effect = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    nameEffect={relic.nameEffect}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    removedBattleScars?.forEach((battleScar, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, id: Number.parseInt(e.target.value) });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        function onBattleScarChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, name: e.target.value });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        const battleScarSelector: JSX.Element[] = []\r\n        if (battleScar.id !== undefined && battleScar.id !== -1) {\r\n            const selectedUnit = props.crusadeArmy.units.find(u => u.id === battleScar.id)\r\n            const battleScarsOptions: JSX.Element[] = []\r\n            selectedUnit?.battleScars.forEach(battleScar => {\r\n                battleScarsOptions.push(<option value={battleScar.name}>{battleScar.name}</option>)\r\n            })\r\n\r\n            battleScarSelector.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control onChange={onBattleScarChanged} value={battleScar.name} as=\"select\">\r\n                            {battleScarsOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        battleScarsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={battleScar.id} as=\"select\">\r\n                            {battleScarUnitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRemovedBattleScars = [...removedBattleScars]\r\n                                newRemovedBattleScars?.splice(index, 1);\r\n                                setRemovedBattleScars(newRemovedBattleScars)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {battleScarSelector}\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                headerText=\"RP Spending\"\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Requisition Points\"\r\n                secondColumn={requisitionPoints}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Maximum Power Level\"\r\n                secondColumn={maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={DecreasePowerLevel}\r\n                        name=\"Undo\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={IncreasePowerLevel}\r\n                        name=\"Increase Supply Limit\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddWarlordTrait}\r\n                        name=\"Warlord Trait\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {warlordTraitsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddRelic}\r\n                        name=\"Relic\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {relicsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Repair and Recuperate\"\r\n                        onClick={RemoveBattleScars}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleScarsDisplay}\r\n            <FormButtons\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequisitionPointSpending","import React from 'react'\r\nimport { useTable, Column, Row } from 'react-table'\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\r\nimport { TouchBackend } from \"react-dnd-touch-backend\"\r\nimport { ICrusadeUnit } from '../Constants'\r\nimport ThreeDotsVerticalIcon from \"../Resources/Icons/ThreeDotsVerticalIcon.svg\";\r\nimport { CalculateCrusadePoints } from '../Helpers/CrusadeUnitHelper'\r\n\r\nconst DND_ITEM_TYPE = 'row'\r\n\r\ninterface IRowProps {\r\n    index: number,\r\n    moveRow: (dragIndex: number, hoverIndex: number) => void;\r\n    onRowClick: () => void;\r\n    row: Row<ICrusadeUnit>;\r\n    updateRowPosition?: (id: number, index: number) => void;\r\n}\r\n\r\nfunction DraggableTableRow(props: IRowProps): JSX.Element {\r\n    const dropRef = React.useRef<HTMLTableRowElement>(null)\r\n    const dragRef = React.useRef<HTMLTableDataCellElement>(null)\r\n\r\n    const [, drop] = useDrop({\r\n        accept: DND_ITEM_TYPE,\r\n        hover(item, monitor) {\r\n            if (!dropRef.current) {\r\n                return\r\n            }\r\n            const dragIndex = (item as any).index\r\n            const hoverIndex = props.index\r\n            // Don't replace items with themselves\r\n            if (dragIndex === hoverIndex) {\r\n                return\r\n            }\r\n            // Determine rectangle on screen\r\n            const hoverBoundingRect = dropRef.current.getBoundingClientRect()\r\n            // Get vertical middle\r\n            const hoverMiddleY =\r\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n            // Determine mouse position\r\n            const clientOffset = monitor.getClientOffset()\r\n            // Get pixels to the top\r\n            const hoverClientY = (clientOffset?.y ?? 0) - hoverBoundingRect.top\r\n            // Only perform the move when the mouse has crossed half of the items height\r\n            // When dragging downwards, only move when the cursor is below 50%\r\n            // When dragging upwards, only move when the cursor is above 50%\r\n            // Dragging downwards\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return\r\n            }\r\n            // Dragging upwards\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return\r\n            }\r\n            // Time to actually perform the action\r\n            props.moveRow && props.moveRow(dragIndex, hoverIndex);\r\n            // Note: we're mutating the monitor item here!\r\n            // Generally it's better to avoid mutations,\r\n            // but it's good here for the sake of performance\r\n            // to avoid expensive index searches.\r\n            (item as any).index = hoverIndex\r\n        },\r\n    })\r\n    const index = props.index\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DND_ITEM_TYPE, index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const opacity = isDragging ? 0 : 1\r\n\r\n    preview(drop(dropRef))\r\n    drag(dragRef)\r\n\r\n    return (\r\n        <tr ref={dropRef} style={{ opacity }}>\r\n            <td ref={dragRef} style={{ width: \"36px\" }}>\r\n                <img\r\n                    className=\"icon\"\r\n                    src={ThreeDotsVerticalIcon}\r\n                    alt=\"Move Unit\"\r\n                />\r\n            </td>\r\n            {props.row.cells.map((cell: any) => {\r\n                return <td {...cell.getCellProps()} onClick={props.onRowClick}>{cell.render('Cell')}</td>\r\n            })}\r\n        </tr>\r\n    )\r\n}\r\n\r\ninterface IDraggableTableProps {\r\n    columns: Column<ICrusadeUnit>[]\r\n    onRowClick: (id: number) => void;\r\n    units: ICrusadeUnit[]\r\n    updateRowPosition?: (id: number, index: number) => void;\r\n}\r\n\r\nfunction DraggableTable(props: IDraggableTableProps) {\r\n    const columns = React.useMemo<Column<ICrusadeUnit>[]>(() => props.columns, [props.columns])\r\n\r\n    const crusadeUnits = props.units.map(unit => {\r\n        return {\r\n            ...unit, crusadePoints: CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    const getRowId = React.useCallback(row => { return row.id }, []);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({\r\n        data: crusadeUnits,\r\n        columns,\r\n        getRowId,\r\n    })\r\n\r\n    function moveRow(dragIndex: number, hoverIndex: number): void {\r\n        const dragRecord = props.units[dragIndex]\r\n        props.updateRowPosition && props.updateRowPosition(dragRecord.id, hoverIndex)\r\n    }\r\n\r\n    return (\r\n        <DndProvider backend={TouchBackend} options={{ enableMouseEvents: true }}>\r\n            <table {...getTableProps()} className=\"table table-striped table-bordered table-hover\">\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            <th></th>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(\r\n                        (row, index) => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <DraggableTableRow\r\n                                    index={index}\r\n                                    row={row}\r\n                                    onRowClick={() => props.onRowClick(row.original.id)}\r\n                                    moveRow={moveRow}\r\n                                    updateRowPosition={props.updateRowPosition}\r\n                                    {...row.getRowProps()}\r\n                                />\r\n                            )\r\n                        }\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </DndProvider>\r\n    )\r\n}\r\n\r\nexport default DraggableTable\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport NameEffectsCard from \"./CommonFields/UnitSummaryCard\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport RequisitionPointSpending from \"./RequisitionPointSpending\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport DraggableTable from \"./CommonFields/DraggableTable\";\r\nimport { Column } from \"react-table\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [isSpendingRequisition, setIsSpendingRequisition] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {crusadePoints}\r\n                    </td>\r\n                    <td>\r\n                        {unit.powerLevel}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            battleScars: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    function reOrderUnits(id: number, targetIndex: number): void {\r\n        const units = [...props.crusadeArmy.units]\r\n        const originalIndex = units.findIndex(u => u.id === id);\r\n        const unit = units.splice(originalIndex, 1)\r\n        units.splice(targetIndex, 0, unit[0])\r\n\r\n        const army = { ...props.crusadeArmy };\r\n        army.units = units;\r\n\r\n        props.updateArmy(army)\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n    else if (isSpendingRequisition) {\r\n        return (\r\n            <RequisitionPointSpending\r\n                goBack={() => setIsSpendingRequisition(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        const columns: Column<ICrusadeUnit>[] = [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n            },\r\n            {\r\n                Header: 'CP',\r\n                accessor: 'crusadePoints'\r\n            },\r\n            {\r\n                Header: 'PL',\r\n                accessor: 'powerLevel'\r\n            }\r\n        ];\r\n        unitsTableDisplay = (\r\n            <DraggableTable\r\n                columns={columns}\r\n                units={props.crusadeArmy.units}\r\n                updateRowPosition={reOrderUnits}\r\n                onRowClick={(id: number): void => {\r\n                    const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n                    if (unit) {\r\n                        setEdittingUnit(unit)\r\n                    }\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n    let detachmentTraitCard = undefined\r\n    if (props.crusadeArmy.detachmentTrait) {\r\n        detachmentTraitCard = (\r\n            <NameEffectsCard\r\n                header=\"Detachment Trait\"\r\n                nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.crusadeArmy.name}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Requisition Points:\r\n                    </Form.Label>\r\n                    {\" \" + props.crusadeArmy.requisitionPoints}\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Spend\"\r\n                        onClick={() => setIsSpendingRequisition(true)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {detachmentTraitCard}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        <h3>\r\n                            Units\r\n                        </h3>\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Add\"\r\n                        onClick={addUnit}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Power Level\"\r\n                secondColumn={powerLevel + \"/\" + props.crusadeArmy.maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <FormButtons\r\n                primaryButtonName=\"Battle!\"\r\n                primaryButtonOnClick={() => setIsReporting(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ThemeContext } from \"./App\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card\r\n                    className=\"mb-3\"\r\n                    key={index}\r\n                    onClick={() => setSelectedCrusadeArmy(crusadeArmy)}\r\n                    style={{ border: `1px solid ${crusadeArmy.traitColor || \"rgb(0, 123, 255)\"}` }} >\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {crusadeArmy.name}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP \"}\r\n                            {crusadeArmy.requisitionPoints + \" RP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = {\r\n            name: \"\",\r\n            id: crusadeArmies?.length ?? 0,\r\n            maximumPowerLevel: 50,\r\n            requisitionPoints: 5,\r\n            units: []\r\n        }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <ThemeContext.Provider value={selectedCrusadeArmy.traitColor || \"blue\"}>\r\n                <CrusadeArmyRoster\r\n                    deleteArmy={deleteArmy}\r\n                    crusadeArmy={selectedCrusadeArmy}\r\n                    goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                    updateArmy={updateArmy}\r\n                />\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ThemeContext = React.createContext(\"blue\");\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <ArmiesList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";"],"sourceRoot":""}