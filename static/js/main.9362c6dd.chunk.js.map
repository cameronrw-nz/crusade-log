{"version":3,"sources":["Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/EditOutOfActions.tsx","CommonFields/FormInput.tsx","CommonFields/FormNameEffectInputs.tsx","CommonFields/ReadOnlyRow.tsx","Report/ReportUnit.tsx","CommonFields/FormButton.tsx","CommonFields/FormButtons.tsx","Report/ReportUnits.tsx","CommonFields/Header.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","RequisitionPointSpending.tsx","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg"],"names":["CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","CalculateCrusadePoints","warlordTraitCrusadePoints","warlordTrait","battleHonourCrusadePoints","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","outOfActionCrusadePoints","battleScar","NameEffectsCard","props","cardContent","nameEffects","nameEffect","push","Card","Subtitle","className","name","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScars","experienceDetails","onClick","EditOutOfActions","addOutOfAction","e","preventDefault","editUnit","u","outOfActions","editOutOfAction","edit","index","newOutOfAction","splice","outOfActionDisplay","Form","Control","type","onChange","o","target","value","placeholder","Number","parseInt","ThemeContext","Consumer","Group","as","controlId","Label","Button","variant","block","style","borderColor","color","FormInput","formName","xs","resetFirstColSpan","inputType","placeHolder","FormNameEffectInputs","formHeaderLabel","onNameChange","onEffectChange","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","borderTop","FormButton","primary","submit","backgroundColor","size","small","FormButtons","tertiaryButtonOnClick","tertiaryButtonName","secondaryButtonName","secondaryButtonOnClick","primaryButtonName","primaryButtonOnClick","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","id","i","newUnits","findIndex","powerLevel","updateArmy","goBack","editIcon","onEdit","src","EditIcon","alt","subHeaderInfos","subHeaderInfo","headerText","ReportSummary","isContinuing","setIsContinuing","unitSummaries","UnitSummary","key","selectedPowerLevel","selectedCrusadePoints","detachmentTrait","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","Check","Input","checked","position","children","fontWeight","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","DeleteIcon","window","confirm","deleteUnit","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","editArmy","newArmy","saveArmy","handleDeleteArmy","a","maximumPowerLevel","width","c","traitColor","hex","colors","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","RequisitionPointSpending","setMaximumPowerLevel","warlordTraits","setWarlordTraits","warlordTraitOptions","warlordTraitsDisplay","newWarlordTraits","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","isSpendingRequisition","setIsSpendingRequisition","setUnitsDisplay","useEffect","highestRank","BattleReady","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","Table","striped","bordered","hover","detachmentTraitCard","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","border","Body","Title","Provider","overflow","md","React","createContext","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9362c6dd.chunk.js","sourcesContent":["import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.battleScar) {\r\n            outOfActionCrusadePoints--;\r\n        }\r\n    });\r\n\r\n    return warlordTraitCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface INameEffectCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction NameEffectsCard(props: INameEffectCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach(nameEffect => {\r\n        cardContent.push(\r\n            <>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NameEffectsCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport NameEffectsCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive || !outOfAction.battleScar) {\r\n                return;\r\n            }\r\n            battleScars.push(outOfAction.battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Battle Participation\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.battleParticipation}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Marked For Greatness\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.markedForGreatness}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Agenda\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.agendaXp}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Kills\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.kills}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    battleRosterUnitIds?: number[]\r\n    detachmentTrait?: INameEffect;\r\n    id: number;\r\n    name: string;\r\n    requisitionPoints?: number;\r\n    traitColor?: string;\r\n    units: ICrusadeUnit[];\r\n    maximumPowerLevel?: number;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        outOfActionDisplay.push(\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    Battle Scar\r\n                </Col>\r\n                <Col>\r\n                    Out Of Action\r\n                </Col>\r\n            </Row>\r\n        )\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={e => editOutOfAction((o) => o.battleScar!.effect = e.target.value, index)}\r\n                            value={outOfAction.battleScar?.effect}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                            value={outOfAction.xp}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n                    <Col>\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <Form.Label>\r\n                                    Out Of Action\r\n                                </Form.Label>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    onClick={addOutOfAction}\r\n                                    type=\"button\"\r\n                                    block\r\n                                    style={{ borderColor: value, color: value }}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {outOfActionDisplay}\r\n                    </Col>\r\n                </Form.Group>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport { INameEffect } from \"../Constants\";\r\n\r\ninterface IFormNameEffectInputsProps {\r\n    formName?: string;\r\n    onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    nameEffect?: INameEffect;\r\n    onEffectChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction FormNameEffectInputs(props: IFormNameEffectInputsProps) {\r\n    let formHeaderLabel = undefined\r\n    if (props.formName) {\r\n        formHeaderLabel = (\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>\r\n                        {props.formName}\r\n                    </Form.Label>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col>\r\n                {formHeaderLabel}\r\n                <Row>\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onNameChange}\r\n                            value={props.nameEffect?.name}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onEffectChange}\r\n                            value={props.nameEffect?.effect}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormNameEffectInputs;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: React.ReactNode = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"../CommonFields/FormNameEffectInputs\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            return (\r\n                <FormNameEffectInputs\r\n                    nameEffect={battleHonour.battleTrait}\r\n                    onEffectChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    onNameChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                firstColumn={battleHonour.rank}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>\r\n                            {props.unit.name}\r\n                        </h3>\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Crusade Points\"\r\n                            label\r\n                            secondColumn={crusadePoints}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Battle Participation\"\r\n                            label\r\n                            secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Greatness\"\r\n                            value={props.unit.markedForGreatness}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.agendaXp = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Agenda\"\r\n                            value={props.unit.agendaXp}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.kills = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Kills\"\r\n                            value={props.unit.kills}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Total Experience\"\r\n                            label\r\n                            secondColumn={totalExperience}\r\n                        />\r\n                        {battleHonours}\r\n                        <EditOutOfActions\r\n                            unit={props.unit}\r\n                            editUnit={(edit) => {\r\n                                const u: ICrusadeUnit = {\r\n                                    ...props.unit,\r\n                                    outOfAction: [...(props.unit.outOfAction || [])]\r\n                                };\r\n                                edit(u)\r\n                                props.updateUnit(u);\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IFormButtonProps {\r\n    color?: string;\r\n    name: string;\r\n    onClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    primary?: boolean;\r\n    small?: boolean\r\n    submit?: boolean\r\n}\r\n\r\nfunction FormButton(props: IFormButtonProps): JSX.Element {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {color =>\r\n                <Button\r\n                    variant={props.primary ? \"primary\" : \"outline-primary\"}\r\n                    onClick={props.onClick}\r\n                    type={props.submit ? \"submit\" : \"button\"}\r\n                    block\r\n                    style={{\r\n                        borderColor: props.color || color,\r\n                        color: props.primary ? \"white\" : props.color || color,\r\n                        backgroundColor: props.primary ? props.color || color : \"white\"\r\n                    }}\r\n                    size={props.small ? undefined : \"lg\"}\r\n                >\r\n                    {props.name}\r\n                </Button>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default FormButton","import React from \"react\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IFormButtonsProps {\r\n    primaryButtonName: string;\r\n    primaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    secondaryButtonName: string;\r\n    secondaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    tertiaryButtonName?: string;\r\n    tertiaryButtonOnClick?: (e: React.FormEvent | React.MouseEvent) => void;\r\n    color?: string;\r\n}\r\n\r\nfunction FormButtons(props: IFormButtonsProps) {\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            {\r\n                props.tertiaryButtonOnClick && props.tertiaryButtonName && (\r\n                    <Col>\r\n                        <FormButton\r\n                            color={props.color}\r\n                            name={props.tertiaryButtonName}\r\n                            onClick={props.tertiaryButtonOnClick}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.secondaryButtonName}\r\n                    onClick={props.secondaryButtonOnClick}\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.primaryButtonName}\r\n                    onClick={props.primaryButtonOnClick}\r\n                    primary\r\n                    submit\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default FormButtons","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ? props.crusadeArmy.requisitionPoints + 1 : 1)\r\n\r\n    const unitsDisplay: JSX.Element[] = []\r\n    units.forEach(unit => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            unitsDisplay.push(\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, unit.id)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Fill Unit Stats\r\n                </h2>\r\n            </Row>\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={done}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IHeaderProps {\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    subHeaderInfo?: { value?: number, name: string }[]\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    const subHeaderInfos = props.subHeaderInfo?.map(subHeaderInfo => {\r\n        return (\r\n            <Row>\r\n                <b>{subHeaderInfo.value + \" \"}</b>{subHeaderInfo.name}\r\n            </Row>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"my-2 mx-1 header\">\r\n            <h2>\r\n                {props.headerText}\r\n                {editIcon}\r\n            </h2>\r\n            <Row>\r\n                <Col>\r\n                    {subHeaderInfos}\r\n                </Col>\r\n            </Row>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport NameEffectsCard from \"../CommonFields/UnitSummaryCard\";\r\nimport Header from \"../CommonFields/Header\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.battleRosterUnitIds?.forEach(id => {\r\n        const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n        if (unit) {\r\n            unitSummaries.push(\r\n                <ThemeContext.Consumer>\r\n                    {value =>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>{unit.name}</h3>\r\n                    }\r\n                </ThemeContext.Consumer>\r\n            )\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.map(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            {props.crusadeArmy.detachmentTrait && (\r\n                <NameEffectsCard\r\n                    nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n                    header=\"Detachment Trait\"\r\n                />\r\n            )}\r\n            {unitSummaries}\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={() => setIsContinuing(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {value =>\r\n                    <Form.Group onClick={() => selectUnit(unit.id)} className=\"mb-1\">\r\n                        <Form.Check type=\"checkbox\" className=\"custom-control\" color={value}>\r\n                            <Form.Check.Input className=\"custom-control-input mr-1\" color={value} checked={selectedUnitIds.includes(unit.id)} style={{ position: \"relative\" }} />\r\n                            <Form.Check.Label className=\"custom-control-label\" children={`${unit.name} ${unit.powerLevel} PL`} style={{ fontWeight: \"unset\" }} />\r\n                        </Form.Check>\r\n                    </Form.Group>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.map(unit => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    });\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Select Battle Roster\r\n                </h2>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Power Level\"\r\n                secondColumn={selectedPowerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Crusade Points\"\r\n                secondColumn={selectedCrusadePoints}\r\n            />\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <Form>\r\n                {display}\r\n            </Form>\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={Continue}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormNameEffectInputs\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                onNameChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                    })\r\n                }}\r\n                onEffectChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                nameEffect={battleHonour.battleTrait}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Total Experience\"\r\n                secondColumn={totalExperience}\r\n            />\r\n            {battleHonours}\r\n            <EditOutOfActions\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            {\r\n                unit.warlordTrait &&\r\n                <FormNameEffectInputs\r\n                    formName=\"Warlord Trait\"\r\n                    onNameChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.name = event.target.value\r\n                    })}\r\n                    onEffectChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.effect = event.target.value\r\n                    })}\r\n                    nameEffect={unit.warlordTrait}\r\n                />\r\n            }\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Crusade Points\"\r\n                secondColumn={crusadePoints}\r\n            />\r\n            <FormButtons\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: crusadePoints },\r\n                    { name: \"CP\", value: props.unit.powerLevel },\r\n                ]}\r\n                headerText={props.unit.name}\r\n            />\r\n            <UnitSummaryRows unit={props.unit} />\r\n            <FormButtons\r\n                primaryButtonName=\"Edit\"\r\n                primaryButtonOnClick={() => setIsEdittingUnit(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport { TwitterPicker, GithubPicker, CirclePicker } from \"react-color\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={() => props.saveArmy(army)} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <FormInput\r\n                    formName=\"Requisition Points\"\r\n                    onChange={e => editArmy((a) => a.requisitionPoints = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.requisitionPoints}\r\n                />\r\n                <FormInput\r\n                    formName=\"Max PL\"\r\n                    onChange={e => editArmy((a) => a.maximumPowerLevel = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.maximumPowerLevel}\r\n                />\r\n                <FormNameEffectInputs\r\n                    formName=\"Trait\"\r\n                    onNameChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.name = e.target.value\r\n                    })}\r\n                    nameEffect={army.detachmentTrait}\r\n                    onEffectChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.effect = e.target.value\r\n                    })}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <CirclePicker\r\n                            width=\"90vw\"\r\n                            onChange={c => editArmy((a) => a.traitColor = c.hex)}\r\n                            color={army.traitColor || \"blue\"}\r\n                            colors={[\"#FF0000\", \"#0000FF\", \"#ebdb00\", \"#6b6b6b\", \"#00a00d\"]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={() => props.saveArmy(army)}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                    color={army.traitColor}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ICrusadeArmy, INameEffect } from \"./Constants\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IRequisitionPointSpendingProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction RequisitionPointSpending(props: IRequisitionPointSpendingProps): JSX.Element {\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ?? 0)\r\n    const [maximumPowerLevel, setMaximumPowerLevel] = useState<number>(props.crusadeArmy.maximumPowerLevel ?? 0)\r\n    const [warlordTraits, setWarlordTraits] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n\r\n    function IncreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel + 5)\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n    }\r\n\r\n    function DecreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel - 5)\r\n        setRequisitionPoints(requisitionPoints + 1)\r\n    }\r\n\r\n    function AddWarlordTrait() {\r\n        const newWarlordTraits = [...warlordTraits, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setWarlordTraits(newWarlordTraits)\r\n    }\r\n\r\n    const warlordTraitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (!unit.warlordTrait) {\r\n            warlordTraitOptions.push(\r\n                <option value={unit.id}>{unit.name}</option>\r\n            )\r\n        }\r\n    })\r\n\r\n    function save() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.maximumPowerLevel = maximumPowerLevel\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n\r\n        warlordTraits.forEach(warlordTrait => {\r\n            const unit = crusadeArmy.units.find(u => u.id === warlordTrait.id)\r\n            unit!.warlordTrait = warlordTrait.nameEffect;\r\n        })\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        props.goBack()\r\n    }\r\n\r\n    const warlordTraitsDisplay: JSX.Element[] = []\r\n    warlordTraits?.forEach((warlordTrait, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newWarlordTraits = [...warlordTraits]\r\n            newWarlordTraits?.splice(index, 1, { ...warlordTrait, id: Number.parseInt(e.target.value) });\r\n            setWarlordTraits(newWarlordTraits)\r\n        }\r\n        warlordTraitsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={warlordTrait.id} as=\"select\">\r\n                            {warlordTraitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newWarlordTraits = [...warlordTraits]\r\n                                newWarlordTraits?.splice(index, 1);\r\n                                setWarlordTraits(newWarlordTraits)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.name = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.effect = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    nameEffect={warlordTrait.nameEffect}\r\n                />\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                headerText=\"RP Spending\"\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Requisition Points\"\r\n                secondColumn={requisitionPoints}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Maximum Power Level\"\r\n                secondColumn={maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={DecreasePowerLevel}\r\n                        name=\"Undo\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={IncreasePowerLevel}\r\n                        name=\"Increase Supply Limit\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddWarlordTrait}\r\n                        name=\"Warlord Trait\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {warlordTraitsDisplay}\r\n            <FormButtons\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequisitionPointSpending","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport NameEffectsCard from \"./CommonFields/UnitSummaryCard\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport RequisitionPointSpending from \"./RequisitionPointSpending\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [isSpendingRequisition, setIsSpendingRequisition] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {unit.powerLevel}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n    else if (isSpendingRequisition) {\r\n        return (\r\n            <RequisitionPointSpending\r\n                goBack={() => setIsSpendingRequisition(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>PL</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    let detachmentTraitCard = undefined\r\n    if (props.crusadeArmy.detachmentTrait) {\r\n        detachmentTraitCard = (\r\n            <NameEffectsCard\r\n                header=\"Detachment Trait\"\r\n                nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.crusadeArmy.name}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Requisition Points:\r\n                    </Form.Label>\r\n                    {\" \" + props.crusadeArmy.requisitionPoints}\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Spend\"\r\n                        onClick={() => setIsSpendingRequisition(true)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {detachmentTraitCard}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        <h3>\r\n                            Units\r\n                        </h3>\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Add\"\r\n                        onClick={addUnit}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Power Level\"\r\n                secondColumn={powerLevel + \"/\" + props.crusadeArmy.maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <FormButtons\r\n                primaryButtonName=\"Battle!\"\r\n                primaryButtonOnClick={() => setIsReporting(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ThemeContext } from \"./App\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card\r\n                    className=\"mb-3\"\r\n                    key={index}\r\n                    onClick={() => setSelectedCrusadeArmy(crusadeArmy)}\r\n                    style={{ border: `1px solid ${crusadeArmy.traitColor || \"rgb(0, 123, 255)\"}` }} >\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {crusadeArmy.name}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP \"}\r\n                            {crusadeArmy.requisitionPoints + \" RP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = {\r\n            name: \"\",\r\n            id: crusadeArmies?.length ?? 0,\r\n            maximumPowerLevel: 50,\r\n            requisitionPoints: 5,\r\n            units: []\r\n        }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <ThemeContext.Provider value={selectedCrusadeArmy.traitColor || \"blue\"}>\r\n                <CrusadeArmyRoster\r\n                    deleteArmy={deleteArmy}\r\n                    crusadeArmy={selectedCrusadeArmy}\r\n                    goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                    updateArmy={updateArmy}\r\n                />\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ThemeContext = React.createContext(\"blue\");\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <ArmiesList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";"],"sourceRoot":""}