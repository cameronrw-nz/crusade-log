{"version":3,"sources":["Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/FormNameEffectInputs.tsx","CommonFields/FormInput.tsx","CommonFields/EditOutOfActions.tsx","CommonFields/ReadOnlyRow.tsx","Report/ReportUnit.tsx","CommonFields/FormButton.tsx","CommonFields/FormButtons.tsx","Report/ReportUnits.tsx","CommonFields/Header.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","RequisitionPointSpending.tsx","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg"],"names":["CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","CalculateCrusadePoints","warlordTraitCrusadePoints","warlordTrait","relicCrusadePoints","relic","battleHonourCrusadePoints","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","outOfActionCrusadePoints","battleScar","NameEffectsCard","props","cardContent","nameEffects","nameEffect","push","Card","Subtitle","className","name","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","relicDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScars","experienceDetails","onClick","FormNameEffectInputs","formHeaderLabel","formName","Form","Label","Group","as","controlId","Control","type","onChange","onNameChange","value","placeholder","onEffectChange","FormInput","xs","resetFirstColSpan","inputType","placeHolder","EditOutOfActions","addOutOfAction","e","preventDefault","editUnit","u","outOfActions","editOutOfAction","edit","index","newOutOfAction","splice","outOfActionDisplay","o","target","Number","parseInt","ThemeContext","Consumer","Button","variant","block","style","borderColor","color","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","borderTop","FormButton","primary","submit","backgroundColor","size","small","FormButtons","tertiaryButtonOnClick","tertiaryButtonName","secondaryButtonName","secondaryButtonOnClick","primaryButtonName","primaryButtonOnClick","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","id","i","newUnits","findIndex","powerLevel","updateArmy","goBack","editIcon","onEdit","src","EditIcon","alt","subHeaderInfos","subHeaderInfo","headerText","ReportSummary","isContinuing","setIsContinuing","unitSummaries","UnitSummary","key","selectedPowerLevel","selectedCrusadePoints","detachmentTrait","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","Check","Input","checked","position","children","fontWeight","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","DeleteIcon","window","confirm","deleteUnit","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","editArmy","newArmy","saveArmy","handleDeleteArmy","a","maximumPowerLevel","width","c","traitColor","hex","colors","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","RequisitionPointSpending","setMaximumPowerLevel","warlordTraits","setWarlordTraits","relics","setRelics","removedBattleScars","setRemovedBattleScars","warlordTraitOptions","relicOptions","battleScarUnitOptions","warlordTraitsDisplay","newWarlordTraits","relicsDisplay","newRelics","battleScarSelector","selectedUnit","battleScarsOptions","newRemovedBattleScars","removedBattleScar","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","isSpendingRequisition","setIsSpendingRequisition","setUnitsDisplay","useEffect","BattleReady","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","Table","striped","bordered","hover","detachmentTraitCard","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","border","Body","Title","Provider","overflow","md","React","createContext","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.342b3a38.chunk.js","sourcesContent":["import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const relicCrusadePoints = unit.relic ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.battleScar) {\r\n            outOfActionCrusadePoints--;\r\n        }\r\n    });\r\n\r\n    return warlordTraitCrusadePoints + relicCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface INameEffectCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction NameEffectsCard(props: INameEffectCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach(nameEffect => {\r\n        cardContent.push(\r\n            <>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NameEffectsCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport NameEffectsCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let relicDisplay = null\r\n    if (props.unit.relic) {\r\n        relicDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Relic\"\r\n                nameEffects={[props.unit.relic]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive || !outOfAction.battleScar) {\r\n                return;\r\n            }\r\n            battleScars.push(outOfAction.battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Battle Participation\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.battleParticipation}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Marked For Greatness\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.markedForGreatness}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Agenda\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.agendaXp}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Kills\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.kills}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {relicDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n    relic?: INameEffect;\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    battleRosterUnitIds?: number[]\r\n    detachmentTrait?: INameEffect;\r\n    id: number;\r\n    name: string;\r\n    requisitionPoints?: number;\r\n    traitColor?: string;\r\n    units: ICrusadeUnit[];\r\n    maximumPowerLevel?: number;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport { INameEffect } from \"../Constants\";\r\n\r\ninterface IFormNameEffectInputsProps {\r\n    formName?: string;\r\n    onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    nameEffect?: INameEffect;\r\n    onEffectChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction FormNameEffectInputs(props: IFormNameEffectInputsProps) {\r\n    let formHeaderLabel = undefined\r\n    if (props.formName) {\r\n        formHeaderLabel = (\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>\r\n                        {props.formName}\r\n                    </Form.Label>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col>\r\n                {formHeaderLabel}\r\n                <Row>\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onNameChange}\r\n                            value={props.nameEffect?.name}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onEffectChange}\r\n                            value={props.nameEffect?.effect}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormNameEffectInputs;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"./FormNameEffectInputs\";\r\nimport FormInput from \"./FormInput\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <>\r\n                    <FormNameEffectInputs\r\n                        onEffectChange={e => editOutOfAction(o => {\r\n                            if (!o.battleScar) {\r\n                                o.battleScar = {}\r\n                            }\r\n                            o.battleScar.effect = e.target.value\r\n                        }, index)}\r\n                        onNameChange={e => editOutOfAction(o => {\r\n                            if (!o.battleScar) {\r\n                                o.battleScar = {}\r\n                            }\r\n                            o.battleScar.name = e.target.value\r\n                        }, index)}\r\n                        nameEffect={outOfAction.battleScar}\r\n                        formName=\"Battle Scar\"\r\n                    />\r\n                    <FormInput\r\n                        onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                        value={outOfAction.xp}\r\n                        formName=\"Experience Loss\"\r\n                        inputType=\"textbox\"\r\n                    />\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n                    <Col>\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <Form.Label>\r\n                                    Out Of Action\r\n                                </Form.Label>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    onClick={addOutOfAction}\r\n                                    type=\"button\"\r\n                                    block\r\n                                    style={{ borderColor: value, color: value }}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {outOfActionDisplay}\r\n                    </Col>\r\n                </Form.Group>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: React.ReactNode = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"../CommonFields/FormNameEffectInputs\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            return (\r\n                <FormNameEffectInputs\r\n                    nameEffect={battleHonour.battleTrait}\r\n                    onEffectChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    onNameChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                firstColumn={battleHonour.rank}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {value =>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>\r\n                            {props.unit.name}\r\n                        </h3>\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Crusade Points\"\r\n                            label\r\n                            secondColumn={crusadePoints}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Battle Participation\"\r\n                            label\r\n                            secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Greatness\"\r\n                            value={props.unit.markedForGreatness}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.agendaXp = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Agenda\"\r\n                            value={props.unit.agendaXp}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.kills = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Kills\"\r\n                            value={props.unit.kills}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Total Experience\"\r\n                            label\r\n                            secondColumn={totalExperience}\r\n                        />\r\n                        {battleHonours}\r\n                        <EditOutOfActions\r\n                            unit={props.unit}\r\n                            editUnit={(edit) => {\r\n                                const u: ICrusadeUnit = {\r\n                                    ...props.unit,\r\n                                    outOfAction: [...(props.unit.outOfAction || [])]\r\n                                };\r\n                                edit(u)\r\n                                props.updateUnit(u);\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IFormButtonProps {\r\n    color?: string;\r\n    name: string;\r\n    onClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    primary?: boolean;\r\n    small?: boolean\r\n    submit?: boolean\r\n}\r\n\r\nfunction FormButton(props: IFormButtonProps): JSX.Element {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {color =>\r\n                <Button\r\n                    variant={props.primary ? \"primary\" : \"outline-primary\"}\r\n                    onClick={props.onClick}\r\n                    type={props.submit ? \"submit\" : \"button\"}\r\n                    block\r\n                    style={{\r\n                        borderColor: props.color || color,\r\n                        color: props.primary ? \"white\" : props.color || color,\r\n                        backgroundColor: props.primary ? props.color || color : \"white\"\r\n                    }}\r\n                    size={props.small ? undefined : \"lg\"}\r\n                >\r\n                    {props.name}\r\n                </Button>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default FormButton","import React from \"react\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IFormButtonsProps {\r\n    primaryButtonName: string;\r\n    primaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    secondaryButtonName: string;\r\n    secondaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    tertiaryButtonName?: string;\r\n    tertiaryButtonOnClick?: (e: React.FormEvent | React.MouseEvent) => void;\r\n    color?: string;\r\n}\r\n\r\nfunction FormButtons(props: IFormButtonsProps) {\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            {\r\n                props.tertiaryButtonOnClick && props.tertiaryButtonName && (\r\n                    <Col>\r\n                        <FormButton\r\n                            color={props.color}\r\n                            name={props.tertiaryButtonName}\r\n                            onClick={props.tertiaryButtonOnClick}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.secondaryButtonName}\r\n                    onClick={props.secondaryButtonOnClick}\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.primaryButtonName}\r\n                    onClick={props.primaryButtonOnClick}\r\n                    primary\r\n                    submit\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default FormButtons","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ? props.crusadeArmy.requisitionPoints + 1 : 1)\r\n\r\n    const unitsDisplay: JSX.Element[] = []\r\n    units.forEach((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            unitsDisplay.push(\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Fill Unit Stats\r\n                </h2>\r\n            </Row>\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={done}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IHeaderProps {\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    subHeaderInfo?: { value?: number, name: string }[]\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    const subHeaderInfos = props.subHeaderInfo?.map(subHeaderInfo => {\r\n        return (\r\n            <Row>\r\n                <b>{subHeaderInfo.value + \" \"}</b>{subHeaderInfo.name}\r\n            </Row>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"my-2 mx-1 header\">\r\n            <Col as=\"h2\" className=\"p-0\" xs={9}>\r\n                {props.headerText}\r\n                {editIcon}\r\n\r\n            </Col>\r\n            <Col xs={2} className=\"pl-0\">\r\n                {subHeaderInfos}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport NameEffectsCard from \"../CommonFields/UnitSummaryCard\";\r\nimport Header from \"../CommonFields/Header\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.battleRosterUnitIds?.forEach(id => {\r\n        const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n        if (unit) {\r\n            unitSummaries.push(\r\n                <ThemeContext.Consumer>\r\n                    {value =>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${value}` }}>{unit.name}</h3>\r\n                    }\r\n                </ThemeContext.Consumer>\r\n            )\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.map(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            {props.crusadeArmy.detachmentTrait && (\r\n                <NameEffectsCard\r\n                    nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n                    header=\"Detachment Trait\"\r\n                />\r\n            )}\r\n            {unitSummaries}\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={() => setIsContinuing(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadOnlyRow\";\r\nimport { CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {value =>\r\n                    <Form.Group onClick={() => selectUnit(unit.id)} className=\"mb-1\">\r\n                        <Form.Check type=\"checkbox\" className=\"custom-control\" color={value}>\r\n                            <Form.Check.Input className=\"custom-control-input mr-1\" color={value} checked={selectedUnitIds.includes(unit.id)} style={{ position: \"relative\" }} />\r\n                            <Form.Check.Label className=\"custom-control-label\" children={`${unit.name} ${unit.powerLevel}PL`} style={{ fontWeight: \"unset\" }} />\r\n                        </Form.Check>\r\n                    </Form.Group>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.map(unit => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    });\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Select Battle Roster\r\n                </h2>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Power Level\"\r\n                secondColumn={selectedPowerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Selected Crusade Points\"\r\n                secondColumn={selectedCrusadePoints}\r\n            />\r\n            <Form>\r\n                {display}\r\n            </Form>\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={Continue}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormNameEffectInputs\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                onNameChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                    })\r\n                }}\r\n                onEffectChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                nameEffect={battleHonour.battleTrait}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Total Experience\"\r\n                secondColumn={totalExperience}\r\n            />\r\n            {battleHonours}\r\n            <EditOutOfActions\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            {\r\n                unit.warlordTrait &&\r\n                <FormNameEffectInputs\r\n                    formName=\"Warlord Trait\"\r\n                    onNameChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.name = event.target.value\r\n                    })}\r\n                    onEffectChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.effect = event.target.value\r\n                    })}\r\n                    nameEffect={unit.warlordTrait}\r\n                />\r\n            }\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Crusade Points\"\r\n                secondColumn={crusadePoints}\r\n            />\r\n            <FormButtons\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: props.unit.powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.unit.name}\r\n            />\r\n            <UnitSummaryRows unit={props.unit} />\r\n            <FormButtons\r\n                primaryButtonName=\"Edit\"\r\n                primaryButtonOnClick={() => setIsEdittingUnit(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport { TwitterPicker, GithubPicker, CirclePicker } from \"react-color\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={() => props.saveArmy(army)} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <FormInput\r\n                    formName=\"Requisition Points\"\r\n                    onChange={e => editArmy((a) => a.requisitionPoints = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.requisitionPoints}\r\n                />\r\n                <FormInput\r\n                    formName=\"Max PL\"\r\n                    onChange={e => editArmy((a) => a.maximumPowerLevel = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.maximumPowerLevel}\r\n                />\r\n                <FormNameEffectInputs\r\n                    formName=\"Trait\"\r\n                    onNameChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.name = e.target.value\r\n                    })}\r\n                    nameEffect={army.detachmentTrait}\r\n                    onEffectChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.effect = e.target.value\r\n                    })}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <CirclePicker\r\n                            width=\"90vw\"\r\n                            onChange={c => editArmy((a) => a.traitColor = c.hex)}\r\n                            color={army.traitColor || \"blue\"}\r\n                            colors={[\"#FF0000\", \"#0000FF\", \"#ebdb00\", \"#6b6b6b\", \"#00a00d\"]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={() => props.saveArmy(army)}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                    color={army.traitColor}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ICrusadeArmy, INameEffect } from \"./Constants\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IRequisitionPointSpendingProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction RequisitionPointSpending(props: IRequisitionPointSpendingProps): JSX.Element {\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ?? 0)\r\n    const [maximumPowerLevel, setMaximumPowerLevel] = useState<number>(props.crusadeArmy.maximumPowerLevel ?? 0)\r\n    const [warlordTraits, setWarlordTraits] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [relics, setRelics] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [removedBattleScars, setRemovedBattleScars] = useState<{ id: number, name?: string }[]>([])\r\n\r\n    function IncreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel + 5)\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n    }\r\n\r\n    function DecreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel - 5)\r\n        setRequisitionPoints(requisitionPoints + 1)\r\n    }\r\n\r\n    function AddWarlordTrait() {\r\n        const newWarlordTraits = [...warlordTraits, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setWarlordTraits(newWarlordTraits)\r\n    }\r\n\r\n    function AddRelic() {\r\n        const newRelics = [...relics, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRelics(newRelics)\r\n    }\r\n\r\n    function RemoveBattleScars() {\r\n        const newRemovedBattleScars = [...removedBattleScars, { id: -1 }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRemovedBattleScars(newRemovedBattleScars);\r\n    }\r\n\r\n    const warlordTraitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const relicOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const battleScarUnitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (!unit.warlordTrait) {\r\n            warlordTraitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (!unit.relic) {\r\n            relicOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (unit.outOfAction.find(ooa => ooa.battleScar !== undefined)) {\r\n            battleScarUnitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n    })\r\n\r\n    function save() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.maximumPowerLevel = maximumPowerLevel\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n\r\n        warlordTraits.forEach(warlordTrait => {\r\n            const unit = crusadeArmy.units.find(u => u.id === warlordTrait.id)\r\n            if (unit) {\r\n                unit.warlordTrait = warlordTrait.nameEffect;\r\n            }\r\n        })\r\n\r\n        relics.forEach(relic => {\r\n            const unit = crusadeArmy.units.find(u => u.id === relic.id)\r\n            if (unit) {\r\n                unit.relic = relic.nameEffect;\r\n            }\r\n        })\r\n\r\n        removedBattleScars.forEach(removedBattleScar => {\r\n            const unit = crusadeArmy.units.find(u => u.id === removedBattleScar.id)\r\n            if (unit) {\r\n                unit.outOfAction = unit.outOfAction.filter(ooa => ooa.battleScar?.name === removedBattleScar.name)\r\n            }\r\n        })\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        props.goBack()\r\n    }\r\n\r\n    const warlordTraitsDisplay: JSX.Element[] = []\r\n    warlordTraits?.forEach((warlordTrait, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newWarlordTraits = [...warlordTraits]\r\n            newWarlordTraits?.splice(index, 1, { ...warlordTrait, id: Number.parseInt(e.target.value) });\r\n            setWarlordTraits(newWarlordTraits)\r\n        }\r\n        warlordTraitsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={warlordTrait.id} as=\"select\">\r\n                            {warlordTraitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newWarlordTraits = [...warlordTraits]\r\n                                newWarlordTraits?.splice(index, 1);\r\n                                setWarlordTraits(newWarlordTraits)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.name = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.effect = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    nameEffect={warlordTrait.nameEffect}\r\n                />\r\n            </>\r\n        )\r\n    })\r\n\r\n    const relicsDisplay: JSX.Element[] = []\r\n    relics?.forEach((relic, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRelics = [...relics]\r\n            newRelics?.splice(index, 1, { ...relic, id: Number.parseInt(e.target.value) });\r\n            setRelics(newRelics)\r\n        }\r\n        relicsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={relic.id} as=\"select\">\r\n                            {relicOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRelics = [...relics]\r\n                                newRelics?.splice(index, 1);\r\n                                setRelics(newRelics)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newRelics = [...warlordTraits]\r\n                        relic.nameEffect.name = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newRelics = [...relics]\r\n                        relic.nameEffect.effect = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    nameEffect={relic.nameEffect}\r\n                />\r\n            </>\r\n        )\r\n    })\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    removedBattleScars?.forEach((battleScar, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, id: Number.parseInt(e.target.value) });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        function onBattleScarChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, name: e.target.value });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        const battleScarSelector: JSX.Element[] = []\r\n        if (battleScar.id !== undefined && battleScar.id !== -1) {\r\n            const selectedUnit = props.crusadeArmy.units.find(u => u.id === battleScar.id)\r\n            const battleScarsOptions: JSX.Element[] = []\r\n            selectedUnit?.outOfAction.forEach(ooa => {\r\n                if (ooa.battleScar) {\r\n                    battleScarsOptions.push(<option value={ooa.battleScar.name}>{ooa.battleScar.name}</option>)\r\n                }\r\n            })\r\n\r\n            battleScarSelector.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control onChange={onBattleScarChanged} value={battleScar.name} as=\"select\">\r\n                            {battleScarsOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        battleScarsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={battleScar.id} as=\"select\">\r\n                            {battleScarUnitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRemovedBattleScars = [...removedBattleScars]\r\n                                newRemovedBattleScars?.splice(index, 1);\r\n                                setRemovedBattleScars(newRemovedBattleScars)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {battleScarSelector}\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                headerText=\"RP Spending\"\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Requisition Points\"\r\n                secondColumn={requisitionPoints}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Maximum Power Level\"\r\n                secondColumn={maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={DecreasePowerLevel}\r\n                        name=\"Undo\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={IncreasePowerLevel}\r\n                        name=\"Increase Supply Limit\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddWarlordTrait}\r\n                        name=\"Warlord Trait\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {warlordTraitsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddRelic}\r\n                        name=\"Relic\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {relicsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Repair and Recuperate\"\r\n                        onClick={RemoveBattleScars}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleScarsDisplay}\r\n            <FormButtons\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequisitionPointSpending","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport NameEffectsCard from \"./CommonFields/UnitSummaryCard\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport RequisitionPointSpending from \"./RequisitionPointSpending\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadOnlyRow\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [isSpendingRequisition, setIsSpendingRequisition] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {crusadePoints}\r\n                    </td>\r\n                    <td>\r\n                        {unit.powerLevel}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n    else if (isSpendingRequisition) {\r\n        return (\r\n            <RequisitionPointSpending\r\n                goBack={() => setIsSpendingRequisition(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>CP</th>\r\n                        <th>PL</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    let detachmentTraitCard = undefined\r\n    if (props.crusadeArmy.detachmentTrait) {\r\n        detachmentTraitCard = (\r\n            <NameEffectsCard\r\n                header=\"Detachment Trait\"\r\n                nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={props.crusadeArmy.name}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Requisition Points:\r\n                    </Form.Label>\r\n                    {\" \" + props.crusadeArmy.requisitionPoints}\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Spend\"\r\n                        onClick={() => setIsSpendingRequisition(true)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {detachmentTraitCard}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        <h3>\r\n                            Units\r\n                        </h3>\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Add\"\r\n                        onClick={addUnit}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Power Level\"\r\n                secondColumn={powerLevel + \"/\" + props.crusadeArmy.maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <FormButtons\r\n                primaryButtonName=\"Battle!\"\r\n                primaryButtonOnClick={() => setIsReporting(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ThemeContext } from \"./App\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card\r\n                    className=\"mb-3\"\r\n                    key={index}\r\n                    onClick={() => setSelectedCrusadeArmy(crusadeArmy)}\r\n                    style={{ border: `1px solid ${crusadeArmy.traitColor || \"rgb(0, 123, 255)\"}` }} >\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {crusadeArmy.name}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP \"}\r\n                            {crusadeArmy.requisitionPoints + \" RP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = {\r\n            name: \"\",\r\n            id: crusadeArmies?.length ?? 0,\r\n            maximumPowerLevel: 50,\r\n            requisitionPoints: 5,\r\n            units: []\r\n        }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <ThemeContext.Provider value={selectedCrusadeArmy.traitColor || \"blue\"}>\r\n                <CrusadeArmyRoster\r\n                    deleteArmy={deleteArmy}\r\n                    crusadeArmy={selectedCrusadeArmy}\r\n                    goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                    updateArmy={updateArmy}\r\n                />\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const ThemeContext = React.createContext(\"blue\");\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <ArmiesList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";"],"sourceRoot":""}