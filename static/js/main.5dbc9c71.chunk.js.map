{"version":3,"sources":["Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Constants.ts","Helpers/CrusadeUnitHelper.ts","CommonFields/EditOutOfActions.tsx","Report/ReportUnit.tsx","Report/ReportUnits.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BattleHonourRank","CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","EditOutOfActions","props","editOutOfAction","edit","index","editUnit","u","newOutOfAction","splice","outOfActionDisplay","length","push","value","effect","onChange","e","o","target","type","Number","parseInt","onClick","preventDefault","outOfActions","style","padding","ReportUnit","useState","initialExperience","crusadePoints","battleHonours","map","battleHonour","effectField","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","className","name","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","selectedUnitIndexes","includes","i","newUnits","findIndex","bh","powerLevel","goBack","updateArmy","Report","setSelectedUnitIndexes","isContinuing","setIsContinuing","display","key","newKeys","filter","selectUnit","checked","selectedPowerLevel","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","id","UnitDisplay","isEdittingUnit","setIsEdittingUnit","battleHonourDisplay","EditArmy","isNewArmy","army","setArmy","saveArmy","newArmy","editArmy","a","src","CopyIcon","alt","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","window","alert","catch","CopyToClipboard","colSpan","width","parse","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","selectedUnitId","setUnitsDisplay","useEffect","highestRank","BattleReady","isSelected","reduce","total","newvalue","whiteSpace","undefined","existingIndex","unitsTableDisplay","EditIcon","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.5dbc9c71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    effect: string;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    effect?: string;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    id: number;\r\n    name: string;\r\n    units: ICrusadeUnit[]\r\n}\r\n\r\n","import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <tr>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.effect}\r\n                            onChange={e => editOutOfAction((o) => o.effect = e.target.value, index)}\r\n                            type=\"textbox\"\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            value={outOfAction.xp}\r\n                            onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                            type=\"number\"\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>Out Of Action</td>\r\n                <td><button onClick={addOutOfAction} style={{ padding: \"10px\" }}>Add</button></td>\r\n            </tr>\r\n            <tr>\r\n                <td>Battle Scar</td>\r\n                <td>Experience Loss</td>\r\n            </tr>\r\n            {outOfActionDisplay}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.effect;\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    type=\"text\"\r\n                    value={battleHonour.effect}\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        bh!.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"edittable-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <b>{props.unit.name}</b>\r\n                        </td>\r\n                        <td>Crusade Points: {\" \" + crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>{`${props.unit.battleParticipation} + 1`}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.agendaXp = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.kills = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n\r\n                                }}\r\n                                value={props.unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                    <EditOutOfActions\r\n                        unit={props.unit}\r\n                        editUnit={(edit) => {\r\n                            const u: ICrusadeUnit = {\r\n                                ...props.unit,\r\n                                outOfAction: [...(props.unit.outOfAction || [])]\r\n                            };\r\n                            edit(u)\r\n                            props.updateUnit(u);\r\n                        }\r\n                        }\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    selectedUnitIndexes: number[];\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(1)\r\n\r\n    const unitsDisplay = units.map((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.selectedUnitIndexes.includes(index)) {\r\n            return (\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Fill Post Game Stats\r\n            </h1>\r\n            <table className=\"edittable-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n\r\n                            Requisition Points:\r\n                        </td>\r\n                        <td>\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                                value={requisitionPoints}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            {unitsDisplay}\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={done}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIndexes, setSelectedUnitIndexes] = useState<number[]>([])\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    function selectUnit(key: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIndexes.includes(key)) {\r\n            newKeys = selectedUnitIndexes.filter(i => i !== key);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIndexes, key]\r\n        }\r\n        setSelectedUnitIndexes(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit, key) => {\r\n        return (\r\n            <div className=\"read-only-display-item\" onClick={() => selectUnit(key)}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => { }}\r\n                    checked={selectedUnitIndexes.includes(key)}\r\n                />\r\n                <span>\r\n                    {unit.name}\r\n                </span>\r\n                <span>\r\n                    {unit.powerLevel + \" \"}PL\r\n                </span>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n\r\n    props.crusadeArmy.units.map((unit, index) => {\r\n        if (selectedUnitIndexes.includes(index)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                selectedUnitIndexes={selectedUnitIndexes}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Select Battle Roster\r\n            </h1>\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <div className=\"report-units expand\">\r\n                {display}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsContinuing(true)}>\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank, IOutOfAction } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\n\r\ninterface IEditUnitProps {\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    const [initialExperience] = useState(totalExperience);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.effect;\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    type=\"text\"\r\n                    value={battleHonour.effect}\r\n                    onChange={event => {\r\n                        editUnit((u) => {\r\n                            let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                            bh!.effect = event.target.value;\r\n                        })\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={save} id=\"edit-unit\">\r\n            <h2>\r\n                {(isNewUnit ? \"Add Unit: \" : \"Edit Unit: \") + unit.name}\r\n            </h2>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tr>\r\n                        <td>Name:</td>\r\n                        <td>\r\n                            <input\r\n                                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                                type=\"textbox\"\r\n                                value={unit.name}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Power Level</td>\r\n                        <td>\r\n                            <input\r\n                                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                                type=\"number\"\r\n                                value={unit.powerLevel}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Crusade Points</td>\r\n                        <td>{crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.battleParticipation = Number.parseInt(event.target.value))}\r\n                                value={unit.battleParticipation}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.markedForGreatness = Number.parseInt(event.target.value))}\r\n                                value={unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.agendaXp = Number.parseInt(event.target.value))}\r\n                                value={unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.kills = Number.parseInt(event.target.value))}\r\n                                value={unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                    <EditOutOfActions\r\n                        unit={unit}\r\n                        editUnit={editUnit}\r\n                    />\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={save} type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IUnitDisplayProps {\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n    }\r\n\r\n    if (isEdittingUnit) {\r\n        return (\r\n            <EditUnit\r\n                goBack={() => setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let crusadePoints = 0;\r\n    const battleHonourDisplay = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n        return (\r\n            <tr>\r\n                <td>{battleHonour.rank}</td>\r\n                <td>{battleHonour.effect}</td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        outOfActionDisplay.push(<tr><td>Out Of Action</td><td /></tr>)\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            const display = outOfAction.effect ? \"Battle Scar\" : \"Experience Loss\";\r\n            outOfActionDisplay.push(\r\n                <tr>\r\n                    <td>{display}</td>\r\n                    <td>{outOfAction.effect || \"-\" + outOfAction.xp}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"header\">\r\n                <h1>\r\n                    {props.unit.name}\r\n                </h1>\r\n                <div>\r\n                    <div className=\"heading-sub-header\"><b>{props.unit.powerLevel + \" \"}</b>PL</div>\r\n                    <div className=\"heading-sub-header\"><b>{crusadePoints + \" \"}</b>CP</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"expand\">\r\n                <table className=\"edittable-table\">\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>{props.unit.battleParticipation}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>{props.unit.markedForGreatness}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>{props.unit.agendaXp}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>{props.unit.kills}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonourDisplay}\r\n                    {outOfActionDisplay}\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsEdittingUnit(true)} type=\"submit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\n\r\ninterface IEditArmyProps {\r\n    goBack: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n    crusadeArmy: ICrusadeArmy;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={() => props.saveArmy(army)} id=\"edit-army\">\r\n                <h2>\r\n                    {(isNewArmy ? \"Add Army: \" : \"Edit Army: \") + army.name}\r\n                </h2>\r\n                <div className=\"expand\">\r\n                    <table className=\"edittable-table\">\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={army.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                Copy from Clipboard:\r\n                            </td>\r\n                            <td>\r\n                                <img\r\n                                    className=\"icon\"\r\n                                    src={CopyIcon}\r\n                                    alt=\"Edit Links\"\r\n                                    onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan={2}>\r\n                                <textarea\r\n                                    style={{ width: \"calc(100% - 8px)\" }}\r\n                                    onChange={e => {\r\n                                        const newArmy = JSON.parse(e.target.value)\r\n                                        newArmy.id = army.id;\r\n                                        setArmy(newArmy)\r\n                                    }}\r\n                                    value={JSON.stringify(army)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </button>\r\n                    <button className=\"primary\" onClick={() => props.saveArmy(army)} type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditIcon from \"./Resources/Icons/EditIcon.svg\";\r\nimport EditArmy from \"./EditArmy\";\r\n\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [selectedUnitId, setSelectedUnitId] = useState<number>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const isSelected = unit.id === selectedUnitId;\r\n            const crusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n                unit.battleHonours\r\n                    ?.map(bh => bh.crusadePoints)\r\n                    ?.reduce((total, newvalue) => {\r\n                        return (total ?? 0) + newvalue;\r\n                    })\r\n                : 0;\r\n\r\n            return (\r\n                <tr\r\n                    className={`read-only-display-item${isSelected ? \" selected\" : \"\"}`}\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {crusadePoints}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [selectedUnitId, props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        const newUnit: ICrusadeUnit = {\r\n            id: props.crusadeArmy.units.length,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        unit.battleHonours.forEach(bh => {\r\n            crusadePoints += bh.crusadePoints\r\n        })\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                goBack={() => setIsEditting(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <table className=\"army-roster-units\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>CP</th>\r\n                    </tr>\r\n                </thead>\r\n                {unitsDisplay}\r\n            </table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"header\">\r\n                <h1>\r\n                    {props.crusadeArmy.name}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={EditIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={() => setIsEditting(true)}\r\n                    />\r\n                </h1>\r\n                <div>\r\n                    <div className=\"heading-sub-header\"><b>{powerLevel + \" \"}</b>PL</div>\r\n                    <div className=\"heading-sub-header\"><b>{crusadePoints + \" \"}</b>CP</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"army-roster-content\">\r\n                {unitsTableDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={addUnit}>\r\n                    Add\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsReporting(true)}>\r\n                    Log\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map(crusadeArmy => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                unit.battleHonours.forEach(bh => {\r\n                    crusadePoints += bh.crusadePoints\r\n                })\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <div className=\"armies-list-display\" onClick={() => setSelectedCrusadeArmy(crusadeArmy)}>\r\n                    <h2>\r\n                        {crusadeArmy.name}\r\n                    </h2>\r\n                    <span>{powerLevel + \" PL\"}</span>\r\n                    <span>{crusadePoints + \" CP\"}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = { name: \"\", id: crusadeArmies?.length ?? 0, units: [] }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <CrusadeArmyRoster\r\n                crusadeArmy={selectedCrusadeArmy}\r\n                goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                updateArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Crusade Armies\r\n            </h1>\r\n            <div className=\"expand\">\r\n                {crusadeArmiesDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={addArmy} className=\"primary\">\r\n                    Add\r\n            </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ArmiesList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}