{"version":3,"sources":["Resources/Icons/DeleteIcon.svg","Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/EditOutOfActions.tsx","CommonFields/FormInput.tsx","CommonFields/ReadonlyRow.tsx","Report/ReportUnit.tsx","Report/ReportUnits.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","CommonFields/Header.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CalculateTotalExperience","unit","experienceLossByOutOfAction","outOfAction","forEach","ooa","isActive","xp","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","CalculateCrusadePoints","warlordTraitCrusadePoints","warlordTrait","battleHonourCrusadePoints","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","outOfActionCrusadePoints","battleScar","UnitSummaryCard","props","cardContent","nameEffects","nameEffect","push","Card","Subtitle","className","name","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScars","experienceDetails","onClick","EditOutOfActions","editOutOfAction","edit","index","editUnit","u","newOutOfAction","splice","outOfActionDisplay","Form","Control","type","onChange","e","o","target","value","placeholder","Number","parseInt","Group","as","controlId","Label","Button","variant","preventDefault","outOfActions","block","FormInput","formName","xs","resetFirstColSpan","inputType","placeHolder","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","i","newUnits","findIndex","powerLevel","size","goBack","updateArmy","ReportSummary","isContinuing","setIsContinuing","unitSummaries","id","UnitSummary","key","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","Check","Input","checked","style","position","children","fontWeight","selectedPowerLevel","EditUnit","isNewUnit","setUnit","save","stopPropagation","saveUnit","func","newUnit","newTotalExperience","onSubmit","src","DeleteIcon","alt","window","confirm","deleteUnit","editIcon","onEdit","EditIcon","headerText","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","saveArmy","handleDeleteArmy","newArmy","editArmy","a","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","setUnitsDisplay","useEffect","highestRank","BattleReady","whiteSpace","deleteArmy","existingIndex","unitsTableDisplay","Table","striped","bordered","hover","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","Body","Title","overflow","md","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c5c1721f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","import { ICrusadeUnit } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    let experienceLossByOutOfAction = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.isActive && ooa.xp) {\r\n            experienceLossByOutOfAction += ooa.xp\r\n        }\r\n    })\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - experienceLossByOutOfAction;\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0;\r\n    unit.outOfAction && unit.outOfAction.forEach(ooa => {\r\n        if (ooa.battleScar) {\r\n            outOfActionCrusadePoints--;\r\n        }\r\n    });\r\n\r\n    return warlordTraitCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IUnitSummaryCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction UnitSummaryCard(props: IUnitSummaryCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach(nameEffect => {\r\n        cardContent.push(\r\n            <>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport UnitSummaryCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <UnitSummaryCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <UnitSummaryCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.outOfAction.forEach(outOfAction => {\r\n            if (!outOfAction.isActive || !outOfAction.battleScar) {\r\n                return;\r\n            }\r\n            battleScars.push(outOfAction.battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <UnitSummaryCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>Battle Participation<Col>\r\n                    </Col>{props.unit.battleParticipation}</Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>Marked For Greatness<Col>\r\n                    </Col>{props.unit.markedForGreatness}</Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>Agenda<Col>\r\n                    </Col>{props.unit.agendaXp}</Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>Kills<Col>\r\n                    </Col>{props.unit.kills}</Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n    warlordTrait?: INameEffect;\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    id: number;\r\n    name: string;\r\n    units: ICrusadeUnit[]\r\n    battleRosterUnitIds?: number[]\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ICrusadeUnit, IOutOfAction } from \"../Constants\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\n\r\ninterface IEditOutOfActionsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditOutOfActions(props: IEditOutOfActionsProps): JSX.Element {\r\n    function addOutOfAction(e: React.MouseEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let outOfActions = u.outOfAction\r\n            if (!outOfActions) {\r\n                outOfActions = [];\r\n            }\r\n\r\n            outOfActions.push({ isActive: true });\r\n            u.outOfAction = outOfActions\r\n        })\r\n    }\r\n\r\n    function editOutOfAction(edit: (o: IOutOfAction) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newOutOfAction = { ...u.outOfAction[index] };\r\n            edit(newOutOfAction)\r\n            u.outOfAction.splice(index, 1, newOutOfAction);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.outOfAction && props.unit.outOfAction.length > 0) {\r\n        outOfActionDisplay.push(\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    Battle Scar\r\n                </Col>\r\n                <Col>\r\n                    Out Of Action\r\n                </Col>\r\n            </Row>\r\n        )\r\n        props.unit.outOfAction.forEach((outOfAction, index) => {\r\n            if (!outOfAction.isActive) {\r\n                return;\r\n            }\r\n            outOfActionDisplay.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={e => editOutOfAction((o) => o.battleScar!.effect = e.target.value, index)}\r\n                            value={outOfAction.battleScar?.effect}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={e => editOutOfAction((o) => o.xp = Number.parseInt(e.target.value), index)}\r\n                            value={outOfAction.xp}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n            <Col>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Out Of Action\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button variant=\"outline-primary\" onClick={addOutOfAction} type=\"button\" block>\r\n                            Add\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                {outOfActionDisplay}\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default EditOutOfActions;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: React.ReactNode = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"../CommonFields/EditOutOfActions\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadonlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            return (\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    inputType=\"textbox\"\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                    value={battleHonour.battleTrait?.effect || \"\"}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                firstColumn={battleHonour.rank}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h3 className=\"border-top border-primary mt-3\">\r\n                    {props.unit.name}\r\n                </h3>\r\n                <ReadOnlyRow\r\n                    firstColumn=\"Crusade Points\"\r\n                    label\r\n                    secondColumn={crusadePoints}\r\n                />\r\n                <ReadOnlyRow\r\n                    firstColumn=\"Battle Participation\"\r\n                    label\r\n                    secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                />\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    inputType=\"number\"\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        u.markedForGreatness = Number.parseInt(event.target.value)\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName=\"Greatness\"\r\n                    value={props.unit.markedForGreatness}\r\n                />\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    inputType=\"number\"\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        u.agendaXp = Number.parseInt(event.target.value)\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName=\"Agenda\"\r\n                    value={props.unit.agendaXp}\r\n                />\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    inputType=\"number\"\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        u.kills = Number.parseInt(event.target.value)\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName=\"Kills\"\r\n                    value={props.unit.kills}\r\n                />\r\n                <ReadOnlyRow\r\n                    firstColumn=\"Total Experience\"\r\n                    label\r\n                    secondColumn={totalExperience}\r\n                />\r\n                {battleHonours}\r\n                <EditOutOfActions\r\n                    unit={props.unit}\r\n                    editUnit={(edit) => {\r\n                        const u: ICrusadeUnit = {\r\n                            ...props.unit,\r\n                            outOfAction: [...(props.unit.outOfAction || [])]\r\n                        };\r\n                        edit(u)\r\n                        props.updateUnit(u);\r\n                    }}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Button } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(1)\r\n\r\n    const unitsDisplay = units.map((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(index)) {\r\n            return (\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Fill Unit Stats\r\n                </h2>\r\n            </Row>\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Button block size=\"lg\" className=\"mr-2\" variant=\"outline-primary\" onClick={props.goBack}>\r\n                            Back\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button block size=\"lg\" variant=\"primary\" onClick={done}>\r\n                            Save\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.battleRosterUnitIds?.forEach(id => {\r\n        const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n        if (unit) {\r\n            unitSummaries.push(<h3 className=\"border-top border-primary mt-3\">{unit.name}</h3>)\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Battle Roster\r\n                </h2>\r\n            </Row>\r\n            {unitSummaries}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Button block size=\"lg\" className=\"mr-2\" variant=\"outline-primary\" onClick={props.goBack}>\r\n                        Back\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"primary\" onClick={() => setIsContinuing(true)}>\r\n                        Continue\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        return (\r\n            <Form.Group onClick={() => selectUnit(unit.id)}>\r\n                <Form.Check type=\"checkbox\">\r\n                    <Form.Check.Input checked={selectedUnitIds.includes(unit.id)} className=\"mr-1\" style={{ position: \"relative\" }} />\r\n                    <Form.Check.Label children={`${unit.name} ${unit.powerLevel} PL`} style={{ fontWeight: \"unset\" }} />\r\n                </Form.Check>\r\n            </Form.Group>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n\r\n    props.crusadeArmy.units.map((unit, index) => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n        }\r\n    })\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Select Battle Roster\r\n                </h2>\r\n            </Row>\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <Form>\r\n                {display}\r\n            </Form>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Button block size=\"lg\" className=\"mr-2\" variant=\"outline-primary\" onClick={props.goBack}>\r\n                        Back\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"primary\" onClick={Continue} type=\"submit\">\r\n                        Continue\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditOutOfActions from \"./CommonFields/EditOutOfActions\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        props.saveUnit(unit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], outOfAction: [...(unit.outOfAction || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormInput\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                inputType=\"textbox\"\r\n                onChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                value={battleHonour.battleTrait?.effect}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>Total Experience</Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {battleHonours}\r\n            <EditOutOfActions\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            <Form.Group as={Row} className=\"mb-2\" controlId=\"formWarlordTrait\">\r\n                <Col>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Label>\r\n                                Warlord Trait\r\n                                </Form.Label>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"pr-1\">\r\n                            <Form.Control\r\n                                type=\"textbox\"\r\n                                onChange={event => editUnit((u) => {\r\n                                    if (!u.warlordTrait) {\r\n                                        u.warlordTrait = {}\r\n                                    }\r\n                                    u.warlordTrait.name = event.target.value\r\n                                })}\r\n                                value={unit.warlordTrait?.name || \"\"}\r\n                                placeholder=\"Name\"\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"pl-1\">\r\n                            <Form.Control\r\n                                type=\"textbox\"\r\n                                onChange={event => editUnit((u) => {\r\n                                    if (!u.warlordTrait) {\r\n                                        u.warlordTrait = {}\r\n                                    }\r\n                                    u.warlordTrait.effect = event.target.value\r\n                                })}\r\n                                value={unit.warlordTrait?.effect || \"\"}\r\n                                placeholder=\"Effect\"\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Form.Group>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>Crusade Points</Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    {crusadePoints}\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"outline-primary\" onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"primary\" onClick={save} type=\"submit\">\r\n                        Save\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\ninterface IHeaderProps {\r\n    crusadePoints: number;\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    powerLevel: number;\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <Row className=\"my-2 mx-1 header\">\r\n            <h2>\r\n                {props.headerText}\r\n                {editIcon}\r\n            </h2>\r\n            <div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.powerLevel + \" \"}</b>PL\r\n                </div>\r\n                <div className=\"heading-sub-header\">\r\n                    <b>{props.crusadePoints + \" \"}</b>CP\r\n                </div>\r\n            </div>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.unit.name}\r\n                powerLevel={props.unit.powerLevel}\r\n            />\r\n            <UnitSummaryRows unit={props.unit} />\r\n            <Row>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"outline-primary\" onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"primary\" onClick={() => setIsEdittingUnit(true)} type=\"button\">\r\n                        Edit\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={() => props.saveArmy(army)} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Button block size=\"lg\" variant=\"outline-primary\" onClick={props.goBack} type=\"button\">\r\n                            Back\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button block size=\"lg\" variant=\"primary\" onClick={() => props.saveArmy(army)} type=\"submit\">\r\n                            Save\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Button, ButtonGroup, Row, Col } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const crusadePoints = CalculateCrusadePoints(unit)\r\n\r\n            return (\r\n                <tr\r\n                    key={unit.id}\r\n                    className=\"read-only-display-item\"\r\n                    onClick={() => setEdittingUnit(unit)}\r\n                >\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {crusadePoints}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>CP</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {unitsDisplay}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                crusadePoints={crusadePoints}\r\n                headerText={props.crusadeArmy.name}\r\n                powerLevel={powerLevel}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row>\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Button block size=\"lg\" className=\"mr-2\" variant=\"outline-primary\" onClick={props.goBack}>\r\n                        Back\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"outline-primary\" onClick={addUnit}>\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button block size=\"lg\" variant=\"primary\" onClick={() => setIsReporting(true)}>\r\n                        Log\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card className=\"mb-3 border-primary\" key={index} onClick={() => setSelectedCrusadeArmy(crusadeArmy)}>\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {crusadeArmy.name}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = { name: \"\", id: crusadeArmies?.length ?? 0, units: [] }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <CrusadeArmyRoster\r\n                deleteArmy={deleteArmy}\r\n                crusadeArmy={selectedCrusadeArmy}\r\n                goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                updateArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <ArmiesList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}