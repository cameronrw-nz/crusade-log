{"version":3,"sources":["Constants.ts","ReportUnit.tsx","ReportUnits.tsx","Report.tsx","EditUnit.tsx","CrusadeArmyRoster.tsx","EditArmy.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BattleHonourRank","ReportUnit","props","totalExperience","unit","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","useState","initialExperience","crusadePoints","battleHonours","map","battleHonour","effectField","effect","rank","Blooded","BattleHardened","Heroic","Legendary","className","type","value","onChange","event","u","find","b","target","updateUnit","name","Number","parseInt","ReportUnits","crusadeArmy","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","index","selectedUnitIndexes","includes","i","newUnits","findIndex","bh","push","powerLevel","splice","onClick","goBack","forEach","updateArmy","Report","setSelectedUnitIndexes","isContinuing","setIsContinuing","display","key","newKeys","filter","selectUnit","checked","selectedPowerLevel","EditUnit","isNewUnit","setUnit","editUnit","func","newUnit","newTotalExperience","onSubmit","saveUnit","id","e","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isReporting","setIsReporting","selectedUnitId","setSelectedUnitId","setUnitsDisplay","useEffect","highestRank","length","BattleReady","isSelected","reduce","total","newvalue","style","whiteSpace","army","undefined","existingIndex","unitsTableDisplay","notes","outOfAction","EditArmy","isNewArmy","setArmy","saveArmy","newArmy","editArmy","a","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","JSON","parse","window","localStorage","getItem","crusadeArmyIndex","setItem","stringify","selectedArmy","sca","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57ee3054.chunk.js","sourcesContent":["export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit {\r\n    id: number,\r\n    name: string;\r\n    crusadePoints: number;\r\n    powerLevel: number;\r\n    markedForGreatness: number;\r\n    kills: number;\r\n    battleParticipation: number;\r\n    agendaXp: number;\r\n    notes: string;\r\n    battleHonours: IBattleHonour[];\r\n    outOfAction: IOutOfAction[];\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    effect: string;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\ninterface IOutOfAction {\r\n    effect?: string;\r\n    xp?: number;\r\n}\r\n\r\nexport interface ICrusadeArmy {\r\n    id: number;\r\n    name: string;\r\n    units: ICrusadeUnit[]\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = props.unit.battleParticipation + 1\r\n        + props.unit.markedForGreatness * 3\r\n        + props.unit.agendaXp\r\n        + Math.floor(props.unit.kills / 3);\r\n\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = props.unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.effect;\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    className=\"report-input\"\r\n                    type=\"text\"\r\n                    value={battleHonour.effect}\r\n                    onChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        bh!.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"report-unit-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <b>{props.unit.name}</b>\r\n                        </td>\r\n                        <td>Crusade Points: {\" \" + crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>{`${props.unit.battleParticipation} + 1`}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                className=\"report-input\"\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                className=\"report-input\"\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.agendaXp = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n                                }}\r\n                                value={props.unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                className=\"report-input\"\r\n                                type=\"number\"\r\n                                onChange={event => {\r\n                                    var u = { ...props.unit };\r\n                                    u.kills = Number.parseInt(event.target.value)\r\n                                    props.updateUnit(u)\r\n\r\n                                }}\r\n                                value={props.unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { CRUSADE_ARMIES_STORAGE_KEY, ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    selectedUnitIndexes: number[];\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(1)\r\n\r\n    const unitsDisplay = units.map((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = u.battleParticipation + 1\r\n                + u.markedForGreatness * 3\r\n                + u.agendaXp\r\n                + Math.floor(u.kills / 3);\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.selectedUnitIndexes.includes(index)) {\r\n            return (\r\n                <ReportUnit unit={unit} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => u.battleParticipation++);\r\n\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Fill Post Game Stats\r\n            </h1>\r\n            <div className=\"expand\">\r\n                <div>\r\n                    Requisition Points:\r\n                <input\r\n                        type=\"number\"\r\n                        onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                        value={requisitionPoints}\r\n                    />\r\n                </div>\r\n                {unitsDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={done}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIndexes, setSelectedUnitIndexes] = useState<number[]>([])\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    function selectUnit(key: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIndexes.includes(key)) {\r\n            newKeys = selectedUnitIndexes.filter(i => i !== key);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIndexes, key]\r\n        }\r\n        setSelectedUnitIndexes(newKeys);\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit, key) => {\r\n        return (\r\n            <div className=\"army-roster-units-item\" onClick={() => selectUnit(key)}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => { }}\r\n                    checked={selectedUnitIndexes.includes(key)}\r\n                />\r\n                <span>\r\n                    {unit.name}\r\n                </span>\r\n                <span>\r\n                    {unit.powerLevel + \" \"}PL\r\n                </span>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n\r\n    props.crusadeArmy.units.map((unit, index) => {\r\n        if (selectedUnitIndexes.includes(index)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                selectedUnitIndexes={selectedUnitIndexes}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Select Battle Roster\r\n            </h1>\r\n            <p>\r\n                Selected Power Level:{\" \" + selectedPowerLevel}\r\n            </p>\r\n            <div className=\"report-units expand\">\r\n                {display}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={() => setIsContinuing(true)}>\r\n                    Continue\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\n\r\ninterface IEditUnitProps {\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours] };\r\n        func(newUnit)\r\n        const newTotalExperience = newUnit.battleParticipation + 1\r\n            + newUnit.markedForGreatness * 3\r\n            + newUnit.agendaXp\r\n            + Math.floor(newUnit.kills / 3);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, effect: \"\", rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3);\r\n\r\n    const [initialExperience] = useState(totalExperience);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map(battleHonour => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        let effectField: React.ReactNode = battleHonour.effect;\r\n        if (battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6\r\n            || battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16\r\n            || battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31\r\n            || battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51) {\r\n            effectField = (\r\n                <input\r\n                    type=\"text\"\r\n                    value={battleHonour.effect}\r\n                    onChange={event => {\r\n                        editUnit((u) => {\r\n                            let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                            bh!.effect = event.target.value;\r\n                        })\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {battleHonour.rank}\r\n                </td>\r\n                <td>\r\n                    {effectField}\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={() => props.saveUnit(unit)} id=\"edit-unit\">\r\n            <h2>\r\n                {(isNewUnit ? \"Add Unit: \" : \"Edit Unit: \") + unit.name}\r\n            </h2>\r\n            <div className=\"expand\">\r\n                <table className=\"report-unit-table\">\r\n                    <tr>\r\n                        <td>Name:</td>\r\n                        <td>\r\n                            <input\r\n                                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                                type=\"textbox\"\r\n                                value={unit.name}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Power Level</td>\r\n                        <td>\r\n                            <input\r\n                                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                                type=\"number\"\r\n                                value={unit.powerLevel}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Crusade Points</td>\r\n                        <td>{crusadePoints}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Battle Participation:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.battleParticipation = Number.parseInt(event.target.value))}\r\n                                value={unit.battleParticipation}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Marked For Greatness:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.markedForGreatness = Number.parseInt(event.target.value))}\r\n                                value={unit.markedForGreatness}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Agenda:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.agendaXp = Number.parseInt(event.target.value))}\r\n                                value={unit.agendaXp}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Kills:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                onChange={event => editUnit((u) => u.kills = Number.parseInt(event.target.value))}\r\n                                value={unit.kills}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            Total Experience:\r\n                        </td>\r\n                        <td>\r\n                            {totalExperience}\r\n                        </td>\r\n                    </tr>\r\n                    {battleHonours}\r\n                </table>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack} type=\"button\">\r\n                    Back\r\n                </button>\r\n                <button onClick={() => props.saveUnit(unit)} type=\"submit\">\r\n                    Done\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useEffect } from \"react\";\r\nimport Report from \"./Report\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"./Constants\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [selectedUnitId, setSelectedUnitId] = useState<number>()\r\n    const [unitsDisplay, setUnitsDisplay] = useState<JSX.Element[]>()\r\n\r\n    useEffect(() => {\r\n        const display = props.crusadeArmy.units.map(unit => {\r\n            const highestRank = unit.battleHonours[unit.battleHonours.length - 1]?.rank ?? BattleHonourRank.BattleReady;\r\n            const totalExperience = unit.battleParticipation +\r\n                + unit.markedForGreatness * 3\r\n                + unit.agendaXp\r\n                + Math.floor(unit.kills / 3);\r\n            const isSelected = unit.id === selectedUnitId;\r\n            const crusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n                unit.battleHonours\r\n                    ?.map(bh => bh.crusadePoints)\r\n                    ?.reduce((total, newvalue) => {\r\n                        return (total ?? 0) + newvalue;\r\n                    })\r\n                : 0;\r\n\r\n            return (\r\n                <tr className={`army-roster-units-item${isSelected ? \" selected\" : \"\"}`} onClick={() => setSelectedUnitId(unit.id)}>\r\n                    <td>\r\n                        {unit.name}\r\n                    </td>\r\n                    <td style={{ whiteSpace: \"nowrap\" }}>\r\n                        {highestRank}\r\n                    </td>\r\n                    <td>\r\n                        {crusadePoints}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        setUnitsDisplay(display);\r\n    }, [selectedUnitId, props.crusadeArmy, edittingUnit, isReporting])\r\n\r\n    function addUnit() {\r\n        const newUnit: ICrusadeUnit = {\r\n            id: props.crusadeArmy.units.length,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            outOfAction: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        unit.battleHonours.forEach(bh => {\r\n            crusadePoints += bh.crusadePoints\r\n        })\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isReporting) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (edittingUnit) {\r\n        return (\r\n            <EditUnit\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (unitsDisplay?.length !== 0) {\r\n        unitsTableDisplay = (\r\n            <table className=\"army-roster-units\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Rank</th>\r\n                        <th>CP</th>\r\n                    </tr>\r\n                </thead>\r\n                {unitsDisplay}\r\n            </table>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"army-roster-header\">\r\n                <h1>\r\n                    {props.crusadeArmy.name}\r\n                </h1>\r\n                <div>\r\n                    <div className=\"army-roster-pl\"><b>{powerLevel + \" \"}</b>PL</div>\r\n                    <div className=\"army-roster-cp\"><b>{crusadePoints + \" \"}</b>CP</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"army-roster-content\">\r\n                {unitsTableDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={props.goBack}>\r\n                    Back\r\n                </button>\r\n                <button onClick={addUnit}>\r\n                    Add\r\n                </button>\r\n                <button onClick={() => setEdittingUnit(props.crusadeArmy.units.find(u => u.id === selectedUnitId))}>\r\n                    Edit\r\n                </button>\r\n                <button className=\"primary\" onClick={() => setIsReporting(true)}>\r\n                    Log\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\n\r\ninterface IEditArmyProps {\r\n    goBack: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n    crusadeArmy: ICrusadeArmy;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={() => props.saveArmy(army)} id=\"edit-army\">\r\n                <h2>\r\n                    {(isNewArmy ? \"Add Army: \" : \"Edit Army: \") + army.name}\r\n                </h2>\r\n                <div className=\"expand\">\r\n                    <table>\r\n                        <tr>\r\n                            <td>Name:</td>\r\n                            <td>\r\n                                <input\r\n                                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                                    type=\"textbox\"\r\n                                    value={army.name}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button onClick={props.goBack} type=\"button\">\r\n                        Back\r\n                    </button>\r\n                    <button onClick={() => props.saveArmy(army)} type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map(crusadeArmy => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                unit.battleHonours.forEach(bh => {\r\n                    crusadePoints += bh.crusadePoints\r\n                })\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <div className=\"armies-list-display\" onClick={() => setSelectedCrusadeArmy(crusadeArmy)}>\r\n                    <h2>\r\n                        {crusadeArmy.name}\r\n                    </h2>\r\n                    <span>{powerLevel + \" PL\"}</span>\r\n                    <span>{crusadePoints + \" CP\"}</span>\r\n                </div>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = { name: \"\", id: crusadeArmies?.length ?? 0, units: [] }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        return (\r\n            <CrusadeArmyRoster\r\n                crusadeArmy={selectedCrusadeArmy}\r\n                goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                updateArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Crusade Armies\r\n        </h1>\r\n            <div className=\"expand\">\r\n\r\n                {crusadeArmiesDisplay}\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <button onClick={addArmy}>\r\n                    Add\r\n            </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.css';\r\nimport ArmiesList from './ArmiesList';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ArmiesList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}