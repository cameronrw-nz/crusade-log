{"version":3,"sources":["Resources/Icons/EditIcon.svg","Resources/Icons/CopyIcon.svg","Resources/Icons/ThreeDotsVerticalIcon.svg","Helpers/CrusadeUnitHelper.ts","CommonFields/UnitSummaryCard.tsx","CommonFields/UnitSummary.tsx","Constants.ts","CommonFields/FormNameEffectInputs.tsx","CommonFields/FormButton.tsx","CommonFields/EditBattleScars.tsx","CommonFields/FormInput.tsx","CommonFields/ReadonlyRow.tsx","Report/ReportUnit.tsx","CommonFields/FormButtons.tsx","Helpers/ClassNameHelper.ts","CommonFields/Header.tsx","Report/ReportUnits.tsx","Report/ReportSummary.tsx","Report/Report.tsx","EditUnit.tsx","UnitDisplay.tsx","EditArmy.tsx","Helpers/Clipboard.ts","RequisitionPointSpending.tsx","CommonFields/DraggableTable.tsx","CrusadeArmyRoster.tsx","ArmiesList.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Icons/DeleteIcon.svg"],"names":["module","exports","CalculateTotalExperience","unit","totalExperience","battleParticipation","markedForGreatness","agendaXp","Math","floor","kills","experienceLoss","CalculateCrusadePoints","warlordTrait","relic","battleHonours","length","map","bh","crusadePoints","reduce","total","newvalue","battleScars","GetArmyName","crusadeArmy","GetName","isUsingAlternateName","entity","alternateName","name","NameEffectsCard","props","cardContent","nameEffects","forEach","nameEffect","index","push","Fragment","key","Card","Subtitle","className","Text","effect","Row","Col","Header","header","UnitSummaryRows","BattleHonourRank","useState","isShowingExperience","setIsShowingExperience","warlordTraitDisplay","relicDisplay","battleHonourDisplay","undefined","battleHonour","battleTrait","battleScarsDisplay","battleScar","experienceDetails","otherTraitsDisplay","otherTraits","otherTrait","onClick","FormNameEffectInputs","formHeaderLabel","formName","Form","Label","Group","as","controlId","Control","type","onChange","onNameChange","value","placeholder","onEffectChange","FormButton","ThemeContext","Consumer","context","Button","variant","primary","submit","block","style","borderColor","color","backgroundColor","size","small","EditBattleScars","editBattleScar","edit","editUnit","u","newBattleScar","splice","outOfActionDisplay","e","o","target","preventDefault","FormInput","xs","resetFirstColSpan","inputType","placeHolder","ReadOnlyRow","firstColumn","label","secondColumn","ReportUnit","initialExperience","rank","Blooded","BattleHardened","Heroic","Legendary","event","find","b","updateUnit","borderTop","Number","parseInt","FormButtons","tertiaryButtonOnClick","tertiaryButtonName","secondaryButtonName","secondaryButtonOnClick","primaryButtonName","primaryButtonOnClick","GetClassName","editIcon","onEdit","src","EditIcon","alt","subHeaderInfos","subHeaderInfo","headerText","Check","id","checked","toggleIsUsingAlternateName","ReportUnits","units","setUnits","requisitionPoints","setRequisitionPoints","unitsDisplay","battleRosterUnitIds","includes","i","newUnits","findIndex","powerLevel","selectedPowerLevel","selectedCrusadePoints","updateArmy","goBack","ReportSummary","isContinuing","setIsContinuing","unitSummaries","UnitSummary","detachmentTrait","Report","selectedUnitIds","setSelectedUnitIds","display","unitId","newKeys","filter","selectUnit","traitColor","Input","position","children","fontWeight","EditUnit","isNewUnit","setUnit","save","stopPropagation","newUnit","ot","saveUnit","func","newTotalExperience","experienceFields","updateOtherTraitNameEffect","otherTraitIndex","nameEffectIndex","update","otherTraitNameEffects","ne","updateName","addEffect","onSubmit","DeleteIcon","window","confirm","deleteUnit","Custom","UnitDisplay","isEdittingUnit","setIsEdittingUnit","useMemo","EditArmy","isNewArmy","army","setArmy","editArmy","newArmy","saveArmy","handleDeleteArmy","a","maximumPowerLevel","width","c","hex","colors","CopyIcon","navigator","clipboard","jsonCrusadeArmy","JSON","stringify","writeText","then","alert","catch","CopyToClipboard","rows","parse","RequisitionPointSpending","setMaximumPowerLevel","warlordTraits","setWarlordTraits","relics","setRelics","removedBattleScars","setRemovedBattleScars","warlordTraitOptions","relicOptions","battleScarUnitOptions","warlordTraitsDisplay","newWarlordTraits","relicsDisplay","newRelics","battleScarSelector","selectedUnit","battleScarsOptions","newRemovedBattleScars","removedBattleScar","DraggableTableRow","dropRef","React","useRef","dragRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","moveRow","drop","useDrag","collect","isDragging","drag","opacity","preview","ref","ThreeDotsVerticalIcon","row","cells","cell","getCellProps","onRowClick","render","DraggableTable","columns","crusadeUnits","getRowId","useCallback","useTable","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","dragRecord","updateRowPosition","DndProvider","backend","TouchBackend","options","enableMouseEvents","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","original","getRowProps","CrusadeArmyRoster","edittingUnit","setEdittingUnit","isEditting","setIsEditting","isReporting","setIsReporting","isSpendingRequisition","setIsSpendingRequisition","deleteArmy","existingIndex","unitsTableDisplay","accessor","targetIndex","originalIndex","detachmentTraitCard","highestId","notes","ArmiesList","edittingArmy","setEdittingArmy","crusadeArmies","setCrusadeArmies","selectedCrusadeArmy","setSelectedCrusadeArmy","crusadeArmiesDisplay","setCrusadeArmiesDisplay","storageCrusadeArmies","localStorage","getItem","crusadeArmyIndex","setItem","selectedArmy","sca","deletingArmy","useEffect","border","Body","Title","Provider","overflow","md","createContext","App","Container","fluid","sm","lg","xl","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0b60a17b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EditIcon.aa0b5ae2.svg\";","module.exports = __webpack_public_path__ + \"static/media/CopyIcon.49972eac.svg\";","module.exports = __webpack_public_path__ + \"static/media/ThreeDotsVerticalIcon.f1d479ac.svg\";","import { ICrusadeUnit, IEntity, ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CalculateTotalExperience(unit: ICrusadeUnit) {\r\n    const totalExperience = unit.battleParticipation\r\n        + unit.markedForGreatness * 3\r\n        + unit.agendaXp\r\n        + Math.floor(unit.kills / 3)\r\n        - (unit.experienceLoss ?? 0);\r\n\r\n    return totalExperience > 0 ? totalExperience : 0;\r\n}\r\n\r\n\r\nexport function CalculateCrusadePoints(unit: ICrusadeUnit) {\r\n    const warlordTraitCrusadePoints = unit.warlordTrait ? 1 : 0;\r\n    const relicCrusadePoints = unit.relic ? 1 : 0;\r\n    const battleHonourCrusadePoints = unit.battleHonours && unit.battleHonours.length > 0 ?\r\n        unit.battleHonours\r\n            ?.map(bh => bh.crusadePoints)\r\n            ?.reduce((total, newvalue) => {\r\n                return (total ?? 0) + newvalue;\r\n            })\r\n        : 0;\r\n\r\n    let outOfActionCrusadePoints = 0 - (unit.battleScars?.length ?? 0);\r\n\r\n    return warlordTraitCrusadePoints + relicCrusadePoints + battleHonourCrusadePoints + outOfActionCrusadePoints;\r\n}\r\n\r\nexport function GetArmyName(crusadeArmy: ICrusadeArmy) {\r\n    return GetName(crusadeArmy, crusadeArmy.isUsingAlternateName)\r\n}\r\n\r\nexport function GetName(entity: IEntity, isUsingAlternateName?: boolean) {\r\n    return isUsingAlternateName ? entity.alternateName || entity.name : entity.name\r\n}","import React from \"react\";\r\nimport { INameEffect } from \"../Constants\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface INameEffectCardProps {\r\n    header: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nfunction NameEffectsCard(props: INameEffectCardProps): JSX.Element | null {\r\n    const cardContent: JSX.Element[] = [];\r\n\r\n    props.nameEffects.forEach((nameEffect, index) => {\r\n        cardContent.push(\r\n            <React.Fragment key={index}>\r\n                <Card.Subtitle className=\"mt-1 ml-2\">{nameEffect.name}</Card.Subtitle>\r\n                <Card.Text className=\"ml-2\">{nameEffect.effect}</Card.Text>\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Row className=\"mb-3\">\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header className=\"py-1\">\r\n                        {props.header}\r\n                    </Card.Header>\r\n                    {cardContent}\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NameEffectsCard","import React, { useState } from \"react\";\r\nimport { CalculateTotalExperience } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport NameEffectsCard from \"./UnitSummaryCard\";\r\n\r\ninterface IUnitSummaryRowsProps {\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitSummaryRows(props: IUnitSummaryRowsProps): JSX.Element | null {\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false);\r\n\r\n    function toggleShowExperience(): void {\r\n        setIsShowingExperience(!isShowingExperience);\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(props.unit);\r\n\r\n    let warlordTraitDisplay = null\r\n    if (props.unit.warlordTrait) {\r\n        warlordTraitDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Warlord Trait\"\r\n                nameEffects={[props.unit.warlordTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let relicDisplay = null\r\n    if (props.unit.relic) {\r\n        relicDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Relic\"\r\n                nameEffects={[props.unit.relic]}\r\n            />\r\n        )\r\n    }\r\n\r\n    let battleHonourDisplay = undefined\r\n    if (props.unit.battleHonours && props.unit.battleHonours.length > 0) {\r\n        const battleHonours: INameEffect[] = []\r\n        props.unit.battleHonours.forEach(battleHonour => {\r\n            battleHonour.battleTrait && battleHonours.push(battleHonour.battleTrait)\r\n        });\r\n\r\n        battleHonourDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Honours\"\r\n                nameEffects={battleHonours}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    let battleScarsDisplay: JSX.Element | undefined = undefined\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        const battleScars: INameEffect[] = []\r\n        props.unit.battleScars.forEach(battleScar => {\r\n            battleScars.push(battleScar)\r\n        })\r\n\r\n        battleScarsDisplay = (\r\n            <NameEffectsCard\r\n                header=\"Battle Scars\"\r\n                nameEffects={battleScars}\r\n            />\r\n        )\r\n    }\r\n\r\n    let experienceDetails = null;\r\n    if (isShowingExperience) {\r\n        experienceDetails = (\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Battle Participation\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.battleParticipation}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Marked For Greatness\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.markedForGreatness}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Agenda\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.agendaXp}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        Kills\r\n                    </Col>\r\n                    <Col>\r\n                        {props.unit.kills}\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    let otherTraitsDisplay = null\r\n    if (props.unit.otherTraits && props.unit.otherTraits.length > 0) {\r\n        otherTraitsDisplay = props.unit.otherTraits.map((otherTrait, index) => {\r\n            return (\r\n                <NameEffectsCard\r\n                    key={index}\r\n                    header={otherTrait.name}\r\n                    nameEffects={otherTrait.nameEffects}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {warlordTraitDisplay}\r\n            {relicDisplay}\r\n            {battleHonourDisplay}\r\n            {battleScarsDisplay}\r\n            {otherTraitsDisplay}\r\n            <Row className=\"mb-2\" onClick={toggleShowExperience}>\r\n                <Col>\r\n                    Total Experience\r\n                </Col>\r\n                <Col>\r\n                    {totalExperience}\r\n                </Col>\r\n            </Row>\r\n            {experienceDetails}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnitSummaryRows;","export const CRUSADE_ARMIES_STORAGE_KEY = \"crusadeArmies\";\r\n\r\nexport interface ICrusadeUnit extends IEntity {\r\n    agendaXp: number;\r\n    battleHonours: IBattleHonour[];\r\n    battleParticipation: number;\r\n    battleScars: INameEffect[];\r\n    crusadePoints: number;\r\n    experienceLoss?: number;\r\n    id: number,\r\n    kills: number;\r\n    markedForGreatness: number;\r\n    notes: string;\r\n    powerLevel: number;\r\n    relic?: INameEffect;\r\n    sequenceNumber?: number;\r\n    warlordTrait?: INameEffect;\r\n    otherTraits?: IOtherTrait[]\r\n}\r\n\r\ninterface IBattleHonour {\r\n    crusadePoints: number;\r\n    battleTrait?: INameEffect;\r\n    rank: BattleHonourRank;\r\n}\r\n\r\ninterface IOtherTrait {\r\n    name: string;\r\n    nameEffects: INameEffect[];\r\n}\r\n\r\nexport enum BattleHonourRank {\r\n    BattleReady = \"Battle-Ready\",\r\n    Blooded = \"Blooded\",\r\n    Custom = \"Custom Battle Trait\",\r\n    BattleHardened = \"Battle-Hardened\",\r\n    Heroic = \"Heroic\",\r\n    Legendary = \"Legendary\"\r\n}\r\n\r\nexport interface IOutOfAction {\r\n    battleScar?: INameEffect;\r\n    xp?: number;\r\n    isActive: boolean;\r\n}\r\n\r\nexport interface INameEffect {\r\n    name?: string;\r\n    effect?: string;\r\n}\r\n\r\nexport interface ICrusadeArmy extends IEntity {\r\n    battleRosterUnitIds?: number[]\r\n    detachmentTrait?: INameEffect;\r\n    id: number;\r\n    isUsingAlternateName?: boolean;\r\n    requisitionPoints?: number;\r\n    traitColor?: string;\r\n    units: ICrusadeUnit[];\r\n    maximumPowerLevel?: number;\r\n}\r\n\r\nexport interface IEntity {\r\n    name: string;\r\n    alternateName?: string;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport { INameEffect } from \"../Constants\";\r\n\r\ninterface IFormNameEffectInputsProps {\r\n    formName?: string;\r\n    onNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    nameEffect?: INameEffect;\r\n    onEffectChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction FormNameEffectInputs(props: IFormNameEffectInputsProps) {\r\n    let formHeaderLabel = undefined\r\n    if (props.formName) {\r\n        formHeaderLabel = (\r\n            <Row>\r\n                <Col>\r\n                    <Form.Label>\r\n                        {props.formName}\r\n                    </Form.Label>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col>\r\n                {formHeaderLabel}\r\n                <Row>\r\n                    <Col className=\"pr-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onNameChange}\r\n                            value={props.nameEffect?.name}\r\n                            placeholder=\"Name\"\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"pl-1\">\r\n                        <Form.Control\r\n                            type=\"textbox\"\r\n                            onChange={props.onEffectChange}\r\n                            value={props.nameEffect?.effect}\r\n                            placeholder=\"Effect\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormNameEffectInputs;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IFormButtonProps {\r\n    color?: string;\r\n    name: string;\r\n    onClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    primary?: boolean;\r\n    small?: boolean\r\n    submit?: boolean\r\n}\r\n\r\nfunction FormButton(props: IFormButtonProps): JSX.Element {\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {context =>\r\n                <Button\r\n                    variant={props.primary ? \"primary\" : \"outline-primary\"}\r\n                    onClick={props.onClick}\r\n                    type={props.submit ? \"submit\" : \"button\"}\r\n                    block\r\n                    style={{\r\n                        borderColor: props.color || context.color,\r\n                        color: props.primary ? \"white\" : props.color || context.color,\r\n                        backgroundColor: props.primary ? props.color || context.color : \"white\"\r\n                    }}\r\n                    size={props.small ? undefined : \"lg\"}\r\n                >\r\n                    {props.name}\r\n                </Button>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default FormButton","import React from \"react\";\r\nimport { ICrusadeUnit, INameEffect } from \"../Constants\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormNameEffectInputs from \"./FormNameEffectInputs\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IEditBattleScarsProps {\r\n    unit: ICrusadeUnit;\r\n    editUnit: (edit: (u: ICrusadeUnit) => void) => void\r\n}\r\n\r\nfunction EditBattleScars(props: IEditBattleScarsProps): JSX.Element {\r\n    function addBattleScar(e: React.MouseEvent | React.FormEvent) {\r\n        e.preventDefault()\r\n\r\n        props.editUnit((u) => {\r\n            let battleScars = u.battleScars\r\n            if (!battleScars) {\r\n                battleScars = [];\r\n            }\r\n\r\n            u.battleScars.push({})\r\n        })\r\n    }\r\n\r\n    function editBattleScar(edit: (o: INameEffect) => void, index: number): void {\r\n        props.editUnit((u) => {\r\n            const newBattleScar = { ...u.battleScars[index] };\r\n            edit(newBattleScar)\r\n            u.battleScars.splice(index, 1, newBattleScar);\r\n        })\r\n    }\r\n\r\n    const outOfActionDisplay: JSX.Element[] = []\r\n    if (props.unit.battleScars && props.unit.battleScars.length > 0) {\r\n        props.unit.battleScars.forEach((battleScar, index) => {\r\n            outOfActionDisplay.push(\r\n                <FormNameEffectInputs\r\n                    key={index}\r\n                    onEffectChange={e => editBattleScar(o => o.effect = e.target.value, index)}\r\n                    onNameChange={e => editBattleScar(o => o.name = e.target.value, index)}\r\n                    nameEffect={battleScar}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`formWarlordTrait`}>\r\n            <Col>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Battle Scars\r\n                                </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            small\r\n                            onClick={addBattleScar}\r\n                            name=\"Add\"\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {outOfActionDisplay}\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default EditBattleScars;","import React from \"react\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\n\r\ninterface IFormInputProps {\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formName: string;\r\n    value?: string | number;\r\n    placeHolder?: string;\r\n    inputType: string;\r\n    resetFirstColSpan?: boolean;\r\n}\r\n\r\nfunction FormInput(props: IFormInputProps): JSX.Element {\r\n    return (\r\n        <Form.Group as={Row} className=\"mb-2\" controlId={`form${props.formName}`}>\r\n            <Col xs={props.resetFirstColSpan ? undefined : 4}>\r\n                <Form.Label>\r\n                    {props.formName}\r\n                </Form.Label>\r\n            </Col>\r\n            <Col>\r\n                <Form.Control type={props.inputType} onChange={props.onChange} value={props.value} placeholder={props.placeHolder || props.formName} />\r\n            </Col>\r\n        </Form.Group>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import React from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\n\r\ninterface IReadOnlyRowProps {\r\n    firstColumn: string;\r\n    label?: boolean;\r\n    secondColumn: React.ReactNode;\r\n    onClick?: () => void\r\n}\r\n\r\nfunction ReadOnlyRow(props: IReadOnlyRowProps): JSX.Element {\r\n    let firstColumn: JSX.Element | string = props.firstColumn;\r\n    if (props.label) {\r\n        firstColumn = (\r\n            <Form.Label>\r\n                {props.firstColumn}\r\n            </Form.Label>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row className=\"mb-2\" onClick={props.onClick}>\r\n            <Col>\r\n                {firstColumn}\r\n            </Col>\r\n            <Col>\r\n                {props.secondColumn}\r\n            </Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow","import React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience, GetName } from \"../Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"../CommonFields/EditBattleScars\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../App\";\r\nimport FormNameEffectInputs from \"../CommonFields/FormNameEffectInputs\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadonlyRow\";\r\n\r\ninterface IReportUnitProps {\r\n    unit: ICrusadeUnit;\r\n    updateUnit: (u: ICrusadeUnit) => void;\r\n}\r\n\r\nfunction ReportUnit(props: IReportUnitProps) {\r\n    const totalExperience = CalculateTotalExperience(props.unit) + 1;\r\n    const [initialExperience] = useState(totalExperience - 1);\r\n\r\n    let battleHonours = props.unit.battleHonours.map((battleHonour, index) => {\r\n\r\n        if ((battleHonour.rank === BattleHonourRank.Blooded && initialExperience < 6)\r\n            || (battleHonour.rank === BattleHonourRank.BattleHardened && initialExperience < 16)\r\n            || (battleHonour.rank === BattleHonourRank.Heroic && initialExperience < 31)\r\n            || (battleHonour.rank === BattleHonourRank.Legendary && initialExperience < 51)) {\r\n            return (\r\n                <FormNameEffectInputs\r\n                    nameEffect={battleHonour.battleTrait}\r\n                    onEffectChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    onNameChange={event => {\r\n                        var u = { ...props.unit };\r\n                        let bh = u.battleHonours.find(b => b.rank === battleHonour.rank)\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                        props.updateUnit(u)\r\n                    }}\r\n                    formName={battleHonour.rank}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <ReadOnlyRow\r\n                key={index}\r\n                firstColumn={battleHonour.battleTrait?.name || \"\"}\r\n                label\r\n                secondColumn={battleHonour.battleTrait?.effect || \"\"}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {context =>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${context.color}` }}>\r\n                            {GetName(props.unit, context.isUsingAlternateName)}\r\n                        </h3>\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Battle Participation\"\r\n                            label\r\n                            secondColumn={`${props.unit.battleParticipation} + 1`}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.markedForGreatness = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Greatness\"\r\n                            value={props.unit.markedForGreatness}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.agendaXp = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Agenda\"\r\n                            value={props.unit.agendaXp}\r\n                        />\r\n                        <FormInput\r\n                            resetFirstColSpan\r\n                            inputType=\"number\"\r\n                            onChange={event => {\r\n                                var u = { ...props.unit };\r\n                                u.kills = Number.parseInt(event.target.value)\r\n                                props.updateUnit(u)\r\n                            }}\r\n                            formName=\"Kills\"\r\n                            value={props.unit.kills}\r\n                        />\r\n                        <ReadOnlyRow\r\n                            firstColumn=\"Total Experience\"\r\n                            label\r\n                            secondColumn={totalExperience}\r\n                        />\r\n                        {battleHonours}\r\n                        <EditBattleScars\r\n                            unit={props.unit}\r\n                            editUnit={(edit) => {\r\n                                const u: ICrusadeUnit = {\r\n                                    ...props.unit,\r\n                                    battleScars: [...(props.unit.battleScars || [])]\r\n                                };\r\n                                edit(u)\r\n                                props.updateUnit(u);\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ReportUnit;","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport FormButton from \"./FormButton\";\r\n\r\ninterface IFormButtonsProps {\r\n    primaryButtonName: string;\r\n    primaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    secondaryButtonName: string;\r\n    secondaryButtonOnClick: (e: React.FormEvent | React.MouseEvent) => void;\r\n    tertiaryButtonName?: string;\r\n    tertiaryButtonOnClick?: (e: React.FormEvent | React.MouseEvent) => void;\r\n    color?: string;\r\n}\r\n\r\nfunction FormButtons(props: IFormButtonsProps) {\r\n    return (\r\n        <Row className=\"mb-2\">\r\n            {\r\n                props.tertiaryButtonOnClick && props.tertiaryButtonName && (\r\n                    <Col>\r\n                        <FormButton\r\n                            color={props.color}\r\n                            name={props.tertiaryButtonName}\r\n                            onClick={props.tertiaryButtonOnClick}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.secondaryButtonName}\r\n                    onClick={props.secondaryButtonOnClick}\r\n                />\r\n            </Col>\r\n            <Col>\r\n                <FormButton\r\n                    color={props.color}\r\n                    name={props.primaryButtonName}\r\n                    onClick={props.primaryButtonOnClick}\r\n                    primary\r\n                    submit\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default FormButtons","export function GetClassName(color?: string) {\r\n    switch (color) {\r\n        case \"#FF0000\":\r\n            return \"red\";\r\n        case \"#0000FF\":\r\n            return \"blue\";\r\n        case \"#ebdb00\":\r\n            return \"yellow\";\r\n        case \"#6b6b6b\":\r\n            return \"dark-grey\";\r\n        case \"#00a00d\":\r\n            return \"green\";\r\n        case \"#a00097\":\r\n            return \"purple\";\r\n        case \"#00a7a2\":\r\n            return \"teal\";\r\n        case \"#996401\":\r\n            return \"brown\";\r\n        default:\r\n            return \"grey\"\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport EditIcon from \"../Resources/Icons/EditIcon.svg\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport { GetClassName } from \"../Helpers/ClassNameHelper\";\r\nimport { ThemeContext } from \"../App\";\r\n\r\ninterface IHeaderProps {\r\n    headerText: string;\r\n    onEdit?: () => void;\r\n    subHeaderInfo?: { value?: number, name: string }[]\r\n}\r\n\r\nfunction Header(props: IHeaderProps): JSX.Element | null {\r\n    let editIcon: JSX.Element | undefined = undefined;\r\n    if (props.onEdit) {\r\n        editIcon = (\r\n            <img\r\n                className=\"icon\"\r\n                src={EditIcon}\r\n                alt=\"Edit Links\"\r\n                onClick={props.onEdit}\r\n            />\r\n        )\r\n    }\r\n    const subHeaderInfos = props.subHeaderInfo?.map((subHeaderInfo, index) => {\r\n        return (\r\n            <Row key={index}>\r\n                <b>{subHeaderInfo.value + \" \"}</b>{subHeaderInfo.name}\r\n            </Row>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {context =>\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <Col as=\"h2\" className=\"p-0\" xs={9}>\r\n                        {props.headerText}\r\n                        {editIcon}\r\n                    </Col>\r\n                    <Col xs={2} className=\"p-0 pt-2\">\r\n                        <Form.Check\r\n                            type=\"switch\"\r\n                            id=\"custom-switch\"\r\n                            className={GetClassName(context.color)}\r\n                            label=\"\"\r\n                            checked={context.isUsingAlternateName || false}\r\n                            onClick={context.toggleIsUsingAlternateName}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={1} className=\"pl-0\">\r\n                        {subHeaderInfos}\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport ReportUnit from \"./ReportUnit\";\r\nimport { ICrusadeArmy, ICrusadeUnit, BattleHonourRank } from \"../Constants\";\r\nimport { CalculateTotalExperience, CalculateCrusadePoints } from \"../Helpers/CrusadeUnitHelper\";\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport FormInput from \"../CommonFields/FormInput\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport Header from \"../CommonFields/Header\";\r\n\r\ninterface IReportUnitsProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportUnits(props: IReportUnitsProps) {\r\n    const [units, setUnits] = useState<ICrusadeUnit[]>(props.crusadeArmy.units);\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ? props.crusadeArmy.requisitionPoints + 1 : 1)\r\n\r\n    const unitsDisplay: JSX.Element[] = []\r\n    units.forEach((unit, index) => {\r\n        function updateUnit(u: ICrusadeUnit, i: number) {\r\n            const newUnits = [...units]\r\n            const totalExperience = CalculateTotalExperience(u) + 1;\r\n\r\n            if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && totalExperience >= 6) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && totalExperience >= 16) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && totalExperience >= 31) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n            }\r\n            else if (u.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && totalExperience >= 51) {\r\n                u.battleHonours.push({ crusadePoints: u.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n            }\r\n\r\n            newUnits.splice(i, 1, u)\r\n\r\n            setUnits(newUnits);\r\n        }\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            unitsDisplay.push(\r\n                <ReportUnit unit={unit} key={unit.id} updateUnit={(u) => updateUnit(u, index)} />\r\n            );\r\n        }\r\n    })\r\n\r\n    function done() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.units = units;\r\n        units.forEach(u => crusadeArmy.battleRosterUnitIds && crusadeArmy.battleRosterUnitIds.includes(u.id) && u.battleParticipation++);\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Fill Unit Stats\"\r\n            />\r\n            <Form>\r\n                <FormInput\r\n                    resetFirstColSpan\r\n                    formName=\"RP\"\r\n                    inputType=\"number\"\r\n                    onChange={event => setRequisitionPoints(Number.parseInt(event.target.value))}\r\n                    value={requisitionPoints}\r\n                />\r\n                {unitsDisplay}\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={done}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportUnits;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport UnitSummaryRows from \"../CommonFields/UnitSummary\";\r\nimport ReportUnits from \"./ReportUnits\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport NameEffectsCard from \"../CommonFields/UnitSummaryCard\";\r\nimport Header from \"../CommonFields/Header\";\r\nimport { CalculateCrusadePoints, GetName } from \"../Helpers/CrusadeUnitHelper\";\r\n\r\ninterface IReportSummaryProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction ReportSummary(props: IReportSummaryProps): JSX.Element | null {\r\n    const [isContinuing, setIsContinuing] = useState<boolean>();\r\n\r\n    const unitSummaries: JSX.Element[] = [];\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds\r\n            && props.crusadeArmy.battleRosterUnitIds.includes(unit.id)\r\n        ) {\r\n            unitSummaries.push(\r\n                <ThemeContext.Consumer key={unit.id + \" Header\"}>\r\n                    {context =>\r\n                        <h3 className=\"mt-3\" style={{ borderTop: `1px solid ${context.color}` }}>\r\n                            {GetName(unit, context.isUsingAlternateName)}\r\n                        </h3>\r\n                    }\r\n                </ThemeContext.Consumer>\r\n            )\r\n            unitSummaries.push(\r\n                <UnitSummaryRows\r\n                    unit={unit}\r\n                    key={unit.id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    if (isContinuing) {\r\n        return (\r\n            <ReportUnits\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsContinuing(false)}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (props.crusadeArmy.battleRosterUnitIds?.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                    { name: \"RP\", value: props.crusadeArmy.requisitionPoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            {props.crusadeArmy.detachmentTrait && (\r\n                <NameEffectsCard\r\n                    nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n                    header=\"Detachment Trait\"\r\n                />\r\n            )}\r\n            {unitSummaries}\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={() => setIsContinuing(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReportSummary;","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"../Constants\";\r\nimport ReportSummary from \"./ReportSummary\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormButtons from \"../CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"../App\";\r\nimport ReadOnlyRow from \"../CommonFields/ReadonlyRow\";\r\nimport { CalculateCrusadePoints, GetName } from \"../Helpers/CrusadeUnitHelper\";\r\nimport FormButton from \"../CommonFields/FormButton\";\r\nimport { GetClassName } from \"../Helpers/ClassNameHelper\";\r\nimport Header from \"../CommonFields/Header\";\r\n\r\ninterface IReportProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction Report(props: IReportProps) {\r\n    const [selectedUnitIds, setSelectedUnitIds] = useState<number[]>([])\r\n\r\n    function Continue() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = selectedUnitIds;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function RemoveSelection() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.battleRosterUnitIds = undefined;\r\n        props.updateArmy(crusadeArmy)\r\n    }\r\n\r\n    function selectUnit(unitId: number) {\r\n        let newKeys = [];\r\n        if (selectedUnitIds.includes(unitId)) {\r\n            newKeys = selectedUnitIds.filter(i => i !== unitId);\r\n        }\r\n        else {\r\n            newKeys = [...selectedUnitIds, unitId]\r\n        }\r\n        setSelectedUnitIds(newKeys);\r\n    }\r\n\r\n    function selectAll() {\r\n        let newKeys = props.crusadeArmy.units.map(u => u.id);\r\n        setSelectedUnitIds(newKeys)\r\n    }\r\n\r\n    const display = props.crusadeArmy.units.map((unit) => {\r\n        const crusadePoints = CalculateCrusadePoints(unit)\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {context =>\r\n                    <Form.Group onClick={() => selectUnit(unit.id)} className=\"mb-1\">\r\n                        <Form.Check type=\"checkbox\" className={`custom-control ${GetClassName(props.crusadeArmy.traitColor)}`} color={context.color}>\r\n                            <Form.Check.Input\r\n                                className=\"custom-control-input mr-1\"\r\n                                color={context.color}\r\n                                checked={selectedUnitIds.includes(unit.id)}\r\n                                style={{ position: \"relative\" }}\r\n                            />\r\n                            <Form.Check.Label\r\n                                className=\"custom-control-label\"\r\n                                children={`${GetName(unit, context.isUsingAlternateName)} ${unit.powerLevel}PL  ${crusadePoints}CP`}\r\n                                style={{ fontWeight: \"unset\" }}\r\n                            />\r\n                        </Form.Check>\r\n                    </Form.Group>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    })\r\n\r\n    let selectedPowerLevel = 0;\r\n    let selectedCrusadePoints = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (selectedUnitIds.includes(unit.id)) {\r\n            selectedPowerLevel += unit.powerLevel\r\n            selectedCrusadePoints += CalculateCrusadePoints(unit)\r\n        }\r\n    });\r\n\r\n    if (props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <ReportSummary\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={RemoveSelection}\r\n                updateArmy={props.updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: selectedPowerLevel },\r\n                    { name: \"CP\", value: selectedCrusadePoints },\r\n                ]}\r\n                headerText=\"Battle Roster\"\r\n            />\r\n            <Form>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <FormButton\r\n                            small\r\n                            name=\"Select All\"\r\n                            onClick={selectAll}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {display}\r\n            </Form>\r\n            <FormButtons\r\n                primaryButtonName=\"Continue\"\r\n                primaryButtonOnClick={Continue}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, { useState } from \"react\";\r\nimport { ICrusadeUnit, BattleHonourRank, INameEffect } from \"./Constants\";\r\nimport { CalculateTotalExperience } from \"./Helpers/CrusadeUnitHelper\";\r\nimport EditBattleScars from \"./CommonFields/EditBattleScars\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadonlyRow\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\n\r\ninterface IEditUnitProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction EditUnit(props: IEditUnitProps) {\r\n    const [isNewUnit] = useState<boolean>(props.unit.name === \"\")\r\n    const [unit, setUnit] = useState<ICrusadeUnit>(props.unit);\r\n    const [isShowingExperience, setIsShowingExperience] = useState<boolean>(false)\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        const newUnit = unit;\r\n        if (newUnit.otherTraits && newUnit.otherTraits.length > 0) {\r\n            newUnit.otherTraits = newUnit.otherTraits.filter(ot => ot.name !== \"\")\r\n        }\r\n        props.saveUnit(newUnit)\r\n    }\r\n\r\n    function editUnit(func: (u: ICrusadeUnit) => void) {\r\n        const newUnit: ICrusadeUnit = { ...unit, battleHonours: [...unit.battleHonours], battleScars: [...(unit.battleScars || [])] };\r\n        func(newUnit)\r\n        const newTotalExperience = CalculateTotalExperience(newUnit);\r\n\r\n        if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Blooded) < 0 && newTotalExperience >= 6) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Blooded })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.BattleHardened) < 0 && newTotalExperience >= 16) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.BattleHardened })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Heroic) < 0 && newTotalExperience >= 31) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Heroic })\r\n        }\r\n        else if (newUnit.battleHonours.findIndex(bh => bh.rank === BattleHonourRank.Legendary) < 0 && newTotalExperience >= 51) {\r\n            newUnit.battleHonours.push({ crusadePoints: newUnit.powerLevel >= 11 ? 2 : 1, battleTrait: { effect: \"\" }, rank: BattleHonourRank.Legendary })\r\n        }\r\n\r\n        setUnit(newUnit)\r\n    }\r\n\r\n    function handleDeleteUnit(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this unit?\")) {\r\n            props.deleteUnit(props.unit);\r\n        }\r\n    }\r\n\r\n    const totalExperience = CalculateTotalExperience(unit);\r\n\r\n    let crusadePoints = 0;\r\n    let battleHonours = unit.battleHonours.map((battleHonour, index) => {\r\n        crusadePoints += battleHonour.crusadePoints;\r\n\r\n        return (\r\n            <FormNameEffectInputs\r\n                key={index}\r\n                formName={battleHonour.rank}\r\n                onNameChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours[index]\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.name = event.target.value;\r\n                    })\r\n                }}\r\n                onEffectChange={event => {\r\n                    editUnit((u) => {\r\n                        let bh = u.battleHonours[index]\r\n                        if (!bh?.battleTrait) {\r\n                            bh!.battleTrait = {}\r\n                        }\r\n                        bh!.battleTrait.effect = event.target.value;\r\n                    })\r\n                }}\r\n                nameEffect={battleHonour.battleTrait}\r\n            />\r\n        )\r\n    });\r\n\r\n    let experienceFields = isShowingExperience && (\r\n        <>\r\n            <FormInput\r\n                formName=\"Participation\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.battleParticipation = Number.parseInt(e.target.value))}\r\n                value={unit.battleParticipation}\r\n            />\r\n            <FormInput\r\n                formName=\"Greatness\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.markedForGreatness = Number.parseInt(e.target.value))}\r\n                value={unit.markedForGreatness}\r\n            />\r\n            <FormInput\r\n                formName=\"Agenda\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.agendaXp = Number.parseInt(e.target.value))}\r\n                value={unit.agendaXp}\r\n            />\r\n            <FormInput\r\n                formName=\"Kills\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.kills = Number.parseInt(e.target.value))}\r\n                value={unit.kills}\r\n            />\r\n            <FormInput\r\n                formName=\"Loss\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.experienceLoss = Number.parseInt(e.target.value))}\r\n                value={unit.experienceLoss}\r\n            />\r\n        </>\r\n    )\r\n\r\n    function updateName(otherTraitIndex: number, value: string): void {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            otherTrait.name = value\r\n        })\r\n    }\r\n\r\n    function addEffect(otherTraitIndex: number): void {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            otherTrait.nameEffects.push({})\r\n        })\r\n    }\r\n\r\n    function updateOtherTraitNameEffect(otherTraitIndex: number, nameEffectIndex: number, update: (nameEffect: INameEffect) => void) {\r\n        editUnit(u => {\r\n            if (!u.otherTraits) {\r\n                return;\r\n            }\r\n\r\n            const otherTrait = u.otherTraits[otherTraitIndex];\r\n            const nameEffect = otherTrait.nameEffects[nameEffectIndex];\r\n            update(nameEffect)\r\n        })\r\n    }\r\n\r\n    let otherTraits = null\r\n    if (unit.otherTraits && unit.otherTraits.length > 0) {\r\n\r\n        otherTraits = unit.otherTraits.map((otherTrait, otherTraitIndex) => {\r\n            let otherTraitNameEffects = null\r\n            if (otherTrait.nameEffects && otherTrait.nameEffects.length > 0) {\r\n                otherTraitNameEffects = otherTrait.nameEffects.map((nameEffect, nameEffectIndex) => {\r\n                    return (\r\n                        <FormNameEffectInputs\r\n                            key={nameEffectIndex}\r\n                            nameEffect={nameEffect}\r\n                            onEffectChange={event => updateOtherTraitNameEffect(otherTraitIndex, nameEffectIndex, ne => ne.effect = event.target.value)}\r\n                            onNameChange={event => updateOtherTraitNameEffect(otherTraitIndex, nameEffectIndex, ne => ne.name = event.target.value)}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            return (\r\n                <React.Fragment key={otherTraitIndex}>\r\n                    <Row className=\"mb-2\">\r\n                        <Col>\r\n                            <Form.Control\r\n                                type=\"textbox\"\r\n                                onChange={event => updateName(otherTraitIndex, event.target.value)}\r\n                                value={otherTrait.name}\r\n                                placeholder=\"Ability Name\"\r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <FormButton\r\n                                small\r\n                                name=\"Add Effect\"\r\n                                onClick={() => addEffect(otherTraitIndex)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {otherTraitNameEffects}\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={save} id=\"edit-unit\">\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    {isNewUnit ? \"Adding Unit \" : \"Editting Unit \"}\r\n                    <img\r\n                        className=\"icon\"\r\n                        src={DeleteIcon}\r\n                        alt=\"Edit Links\"\r\n                        onClick={handleDeleteUnit}\r\n                    />\r\n                </h2>\r\n            </Row>\r\n            <FormInput\r\n                formName=\"Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.name = e.target.value)}\r\n                value={unit.name}\r\n            />\r\n            <FormInput\r\n                formName=\"Alternate Name\"\r\n                inputType=\"textbox\"\r\n                onChange={e => editUnit((u) => u.alternateName = e.target.value)}\r\n                value={unit.alternateName}\r\n            />\r\n            <FormInput\r\n                formName=\"Power Level\"\r\n                inputType=\"number\"\r\n                onChange={e => editUnit((u) => u.powerLevel = Number.parseInt(e.target.value))}\r\n                value={unit.powerLevel}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Total Experience\"\r\n                secondColumn={totalExperience}\r\n                onClick={() => setIsShowingExperience(!isShowingExperience)}\r\n            />\r\n            {experienceFields}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Traits and Honours\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        small\r\n                        name=\"Add\"\r\n                        onClick={() => {\r\n                            editUnit((u) =>\r\n                                u.battleHonours.push({\r\n                                    rank: BattleHonourRank.Custom,\r\n                                    battleTrait: {},\r\n                                    crusadePoints: u.powerLevel >= 11 ? 2 : 1,\r\n                                }))\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleHonours}\r\n            <EditBattleScars\r\n                unit={unit}\r\n                editUnit={editUnit}\r\n            />\r\n            {\r\n                unit.warlordTrait &&\r\n                <FormNameEffectInputs\r\n                    formName=\"Warlord Trait\"\r\n                    onNameChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.name = event.target.value\r\n                    })}\r\n                    onEffectChange={event => editUnit((u) => {\r\n                        if (!u.warlordTrait) {\r\n                            u.warlordTrait = {}\r\n                        }\r\n                        u.warlordTrait.effect = event.target.value\r\n                    })}\r\n                    nameEffect={unit.warlordTrait}\r\n                />\r\n            }\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Crusade Points\"\r\n                secondColumn={crusadePoints}\r\n            />\r\n            <ReadOnlyRow\r\n                label\r\n                firstColumn=\"Other Abilities\"\r\n                secondColumn={\r\n                    <FormButton\r\n                        name=\"Add Ability\"\r\n                        small\r\n                        onClick={() => editUnit(u => {\r\n                            if (!u.otherTraits) {\r\n                                u.otherTraits = []\r\n                            }\r\n                            u.otherTraits.push({ name: \"\", nameEffects: [{}] });\r\n                        })}\r\n                    />\r\n                }\r\n            />\r\n            {otherTraits}\r\n            <FormButtons\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default EditUnit","import React, { useState, useMemo } from \"react\";\r\nimport { ICrusadeUnit } from \"./Constants\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport { CalculateCrusadePoints, GetName } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport UnitSummaryRows from \"./CommonFields/UnitSummary\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ThemeContext } from \"./App\";\r\n\r\ninterface IUnitDisplayProps {\r\n    deleteUnit: (unit: ICrusadeUnit) => void;\r\n    goBack: () => void;\r\n    saveUnit: (unit: ICrusadeUnit) => void;\r\n    unit: ICrusadeUnit;\r\n}\r\n\r\nfunction UnitDisplay(props: IUnitDisplayProps) {\r\n    const [isEdittingUnit, setIsEdittingUnit] = useState<boolean>(false);\r\n    const isNewUnit = useMemo<boolean>(() => { return props.unit.name === \"\" }, [props.unit.name])\r\n\r\n    function completeEdit(unit: ICrusadeUnit) {\r\n        props.saveUnit(unit)\r\n        setIsEdittingUnit(false)\r\n        if (isNewUnit) {\r\n            props.goBack();\r\n        }\r\n    }\r\n\r\n    if (isEdittingUnit || isNewUnit) {\r\n        return (\r\n            <EditUnit\r\n                deleteUnit={props.deleteUnit}\r\n                goBack={() => isNewUnit ? props.goBack() : setIsEdittingUnit(false)}\r\n                unit={props.unit}\r\n                saveUnit={completeEdit}\r\n            />\r\n        )\r\n    }\r\n\r\n    let crusadePoints = CalculateCrusadePoints(props.unit);\r\n\r\n    return (\r\n        <ThemeContext.Consumer>\r\n            {context =>\r\n                <>\r\n                    <Header\r\n                        subHeaderInfo={[\r\n                            { name: \"PL\", value: props.unit.powerLevel },\r\n                            { name: \"CP\", value: crusadePoints },\r\n                        ]}\r\n                        headerText={GetName(props.unit, context.isUsingAlternateName)}\r\n                    />\r\n                    <UnitSummaryRows unit={props.unit} />\r\n                    <FormButtons\r\n                        primaryButtonName=\"Edit\"\r\n                        primaryButtonOnClick={() => setIsEdittingUnit(true)}\r\n                        secondaryButtonName=\"Back\"\r\n                        secondaryButtonOnClick={props.goBack}\r\n                    />\r\n                </>\r\n            }\r\n        </ThemeContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default UnitDisplay","import React, { useState } from \"react\";\r\nimport { ICrusadeArmy } from \"./Constants\";\r\nimport { CopyToClipboard } from \"./Helpers/Clipboard\";\r\nimport CopyIcon from \"./Resources/Icons/CopyIcon.svg\";\r\nimport DeleteIcon from \"./Resources/Icons/DeleteIcon.svg\";\r\nimport { Form, Row, Col } from \"react-bootstrap\";\r\nimport FormInput from \"./CommonFields/FormInput\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\n\r\ninterface IEditArmyProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void;\r\n    handleDeleteArmy: () => void;\r\n    saveArmy: (unit: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction EditArmy(props: IEditArmyProps) {\r\n    const [isNewArmy] = useState<boolean>(props.crusadeArmy.name === \"\")\r\n    const [army, setArmy] = useState<ICrusadeArmy>(props.crusadeArmy);\r\n\r\n    function editArmy(func: (a: ICrusadeArmy) => void) {\r\n        const newArmy = { ...army }\r\n        func(newArmy)\r\n        setArmy(newArmy)\r\n    }\r\n\r\n    function handleDelete(): void {\r\n        if (window.confirm(\"Are you sure you wish to delete this army?\")) {\r\n            props.handleDeleteArmy();\r\n        }\r\n    }\r\n\r\n    function save(e: React.FormEvent | React.MouseEvent) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        props.saveArmy(army)\r\n        props.goBack()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={save} >\r\n                <Row className=\"my-2 mx-1 header\">\r\n                    <h2>\r\n                        {isNewArmy ? \"Add Army\" : \"Edit Army\"}\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={DeleteIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={handleDelete}\r\n                        />\r\n                    </h2>\r\n                </Row>\r\n                <FormInput\r\n                    formName=\"Name\"\r\n                    onChange={e => editArmy((a) => a.name = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.name}\r\n                />\r\n                <FormInput\r\n                    formName=\"Alternate Name\"\r\n                    onChange={e => editArmy((a) => a.alternateName = e.target.value)}\r\n                    inputType=\"textbox\"\r\n                    value={army.alternateName}\r\n                />\r\n                <FormInput\r\n                    formName=\"Requisition Points\"\r\n                    onChange={e => editArmy((a) => a.requisitionPoints = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.requisitionPoints}\r\n                />\r\n                <FormInput\r\n                    formName=\"Max PL\"\r\n                    onChange={e => editArmy((a) => a.maximumPowerLevel = Number.parseInt(e.target.value))}\r\n                    inputType=\"number\"\r\n                    value={army.maximumPowerLevel}\r\n                />\r\n                <FormNameEffectInputs\r\n                    formName=\"Trait\"\r\n                    onNameChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.name = e.target.value\r\n                    })}\r\n                    nameEffect={army.detachmentTrait}\r\n                    onEffectChange={e => editArmy((a) => {\r\n                        if (!a.detachmentTrait) {\r\n                            a.detachmentTrait = {}\r\n                        }\r\n                        a.detachmentTrait.effect = e.target.value\r\n                    })}\r\n                />\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <CirclePicker\r\n                            width=\"90vw\"\r\n                            onChange={(c: any) => editArmy((a) => a.traitColor = c.hex)}\r\n                            color={army.traitColor || \"blue\"}\r\n                            colors={[\r\n                                \"#FF0000\",\r\n                                \"#0000FF\",\r\n                                \"#ebdb00\",\r\n                                \"#6b6b6b\",\r\n                                \"#00a00d\",\r\n                                \"#a00097\",\r\n                                \"#00a7a2\",\r\n                                \"#996401\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            Copy from Clipboard\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <img\r\n                            className=\"icon\"\r\n                            src={CopyIcon}\r\n                            alt=\"Edit Links\"\r\n                            onClick={() => CopyToClipboard(props.crusadeArmy)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={5}\r\n                            onChange={e => {\r\n                                const newArmy = JSON.parse(e.target.value)\r\n                                newArmy.id = army.id;\r\n                                setArmy(newArmy)\r\n                            }}\r\n                            value={JSON.stringify(army)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormButtons\r\n                    primaryButtonName=\"Save\"\r\n                    primaryButtonOnClick={save}\r\n                    secondaryButtonName=\"Back\"\r\n                    secondaryButtonOnClick={props.goBack}\r\n                    color={army.traitColor}\r\n                />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditArmy;","import { ICrusadeArmy } from \"../Constants\";\r\n\r\nexport function CopyToClipboard(army: ICrusadeArmy) {\r\n    if (!navigator.clipboard) {\r\n        window.alert(\"Can't copy to clipboard\")\r\n        return;\r\n    }\r\n\r\n    const jsonCrusadeArmy = JSON.stringify(army);\r\n    navigator.clipboard.writeText(jsonCrusadeArmy).then(() => {\r\n        window.alert(\"Copied to clipboard\")\r\n    }).catch(() => {\r\n        window.alert(\"Can't copy to clipboard\")\r\n    })\r\n}","import React, { useState } from \"react\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport { ICrusadeArmy, INameEffect } from \"./Constants\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadonlyRow\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport FormNameEffectInputs from \"./CommonFields/FormNameEffectInputs\";\r\n\r\ninterface IRequisitionPointSpendingProps {\r\n    crusadeArmy: ICrusadeArmy;\r\n    goBack: () => void\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction RequisitionPointSpending(props: IRequisitionPointSpendingProps): JSX.Element {\r\n    const [requisitionPoints, setRequisitionPoints] = useState<number>(props.crusadeArmy.requisitionPoints ?? 0)\r\n    const [maximumPowerLevel, setMaximumPowerLevel] = useState<number>(props.crusadeArmy.maximumPowerLevel ?? 0)\r\n    const [warlordTraits, setWarlordTraits] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [relics, setRelics] = useState<{ id: number, nameEffect: INameEffect }[]>([])\r\n    const [removedBattleScars, setRemovedBattleScars] = useState<{ id: number, name?: string }[]>([])\r\n\r\n    function IncreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel + 5)\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n    }\r\n\r\n    function DecreasePowerLevel() {\r\n        setMaximumPowerLevel(maximumPowerLevel - 5)\r\n        setRequisitionPoints(requisitionPoints + 1)\r\n    }\r\n\r\n    function AddWarlordTrait() {\r\n        const newWarlordTraits = [...warlordTraits, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setWarlordTraits(newWarlordTraits)\r\n    }\r\n\r\n    function AddRelic() {\r\n        const newRelics = [...relics, { id: -1, nameEffect: {} }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRelics(newRelics)\r\n    }\r\n\r\n    function RemoveBattleScars() {\r\n        const newRemovedBattleScars = [...removedBattleScars, { id: -1 }]\r\n        setRequisitionPoints(requisitionPoints - 1)\r\n        setRemovedBattleScars(newRemovedBattleScars);\r\n    }\r\n\r\n    const warlordTraitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const relicOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    const battleScarUnitOptions: JSX.Element[] = [(<option value={-1}></option>)]\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        if (!unit.warlordTrait) {\r\n            warlordTraitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (!unit.relic) {\r\n            relicOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n        if (unit.battleScars.find(battleScar => battleScar !== undefined)) {\r\n            battleScarUnitOptions.push(<option value={unit.id}>{unit.name}</option>)\r\n        }\r\n    })\r\n\r\n    function save() {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        crusadeArmy.maximumPowerLevel = maximumPowerLevel\r\n        crusadeArmy.requisitionPoints = requisitionPoints\r\n\r\n        warlordTraits.forEach(warlordTrait => {\r\n            const unit = crusadeArmy.units.find(u => u.id === warlordTrait.id)\r\n            if (unit) {\r\n                unit.warlordTrait = warlordTrait.nameEffect;\r\n            }\r\n        })\r\n\r\n        relics.forEach(relic => {\r\n            const unit = crusadeArmy.units.find(u => u.id === relic.id)\r\n            if (unit) {\r\n                unit.relic = relic.nameEffect;\r\n            }\r\n        })\r\n\r\n        removedBattleScars.forEach(removedBattleScar => {\r\n            const unit = crusadeArmy.units.find(u => u.id === removedBattleScar.id)\r\n            if (unit) {\r\n                unit.battleScars = unit.battleScars.filter(battleScar => battleScar?.name === removedBattleScar.name)\r\n            }\r\n        })\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        props.goBack()\r\n    }\r\n\r\n    const warlordTraitsDisplay: JSX.Element[] = []\r\n    warlordTraits?.forEach((warlordTrait, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newWarlordTraits = [...warlordTraits]\r\n            newWarlordTraits?.splice(index, 1, { ...warlordTrait, id: Number.parseInt(e.target.value) });\r\n            setWarlordTraits(newWarlordTraits)\r\n        }\r\n        warlordTraitsDisplay.push(\r\n            <React.Fragment key={index}>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={warlordTrait.id} as=\"select\">\r\n                            {warlordTraitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newWarlordTraits = [...warlordTraits]\r\n                                newWarlordTraits?.splice(index, 1);\r\n                                setWarlordTraits(newWarlordTraits)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.name = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newWarlordTraits = [...warlordTraits]\r\n                        warlordTrait.nameEffect.effect = e.target.value\r\n                        newWarlordTraits?.splice(index, 1, warlordTrait);\r\n                        setWarlordTraits(newWarlordTraits)\r\n                    }}\r\n                    nameEffect={warlordTrait.nameEffect}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n    const relicsDisplay: JSX.Element[] = []\r\n    relics?.forEach((relic, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRelics = [...relics]\r\n            newRelics?.splice(index, 1, { ...relic, id: Number.parseInt(e.target.value) });\r\n            setRelics(newRelics)\r\n        }\r\n        relicsDisplay.push(\r\n            <React.Fragment key={index}>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={relic.id} as=\"select\">\r\n                            {relicOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRelics = [...relics]\r\n                                newRelics?.splice(index, 1);\r\n                                setRelics(newRelics)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <FormNameEffectInputs\r\n                    onNameChange={e => {\r\n                        const newRelics = [...warlordTraits]\r\n                        relic.nameEffect.name = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    onEffectChange={e => {\r\n                        const newRelics = [...relics]\r\n                        relic.nameEffect.effect = e.target.value\r\n                        newRelics?.splice(index, 1, relic);\r\n                        setRelics(newRelics)\r\n                    }}\r\n                    nameEffect={relic.nameEffect}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    })\r\n\r\n\r\n    const battleScarsDisplay: JSX.Element[] = []\r\n    removedBattleScars?.forEach((battleScar, index) => {\r\n        function onIdChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, id: Number.parseInt(e.target.value) });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        function onBattleScarChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n            const newRemovedBattleScars = [...removedBattleScars]\r\n            newRemovedBattleScars?.splice(index, 1, { ...battleScar, name: e.target.value });\r\n            setRemovedBattleScars(newRemovedBattleScars)\r\n        }\r\n\r\n        const battleScarSelector: JSX.Element[] = []\r\n        if (battleScar.id !== undefined && battleScar.id !== -1) {\r\n            const selectedUnit = props.crusadeArmy.units.find(u => u.id === battleScar.id)\r\n            const battleScarsOptions: JSX.Element[] = []\r\n            selectedUnit?.battleScars.forEach(battleScar => {\r\n                battleScarsOptions.push(<option value={battleScar.name}>{battleScar.name}</option>)\r\n            })\r\n\r\n            battleScarSelector.push(\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form.Control onChange={onBattleScarChanged} value={battleScar.name} as=\"select\">\r\n                            {battleScarsOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n        battleScarsDisplay.push(\r\n            <>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"pr-0\">\r\n                        <Form.Control onChange={onIdChange} value={battleScar.id} as=\"select\">\r\n                            {battleScarUnitOptions}\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormButton\r\n                            name=\"Remove\"\r\n                            small\r\n                            onClick={() => {\r\n                                const newRemovedBattleScars = [...removedBattleScars]\r\n                                newRemovedBattleScars?.splice(index, 1);\r\n                                setRemovedBattleScars(newRemovedBattleScars)\r\n                                setRequisitionPoints(requisitionPoints + 1)\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {battleScarSelector}\r\n            </>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                headerText=\"RP Spending\"\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Requisition Points\"\r\n                secondColumn={requisitionPoints}\r\n            />\r\n            <ReadOnlyRow\r\n                firstColumn=\"Maximum Power Level\"\r\n                secondColumn={maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={DecreasePowerLevel}\r\n                        name=\"Undo\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={IncreasePowerLevel}\r\n                        name=\"Increase Supply Limit\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddWarlordTrait}\r\n                        name=\"Warlord Trait\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {warlordTraitsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        onClick={AddRelic}\r\n                        name=\"Relic\"\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {relicsDisplay}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Repair and Recuperate\"\r\n                        onClick={RemoveBattleScars}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {battleScarsDisplay}\r\n            <FormButtons\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n                primaryButtonName=\"Save\"\r\n                primaryButtonOnClick={save}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequisitionPointSpending","import React from 'react'\r\nimport { useTable, Column, Row } from 'react-table'\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\r\nimport { TouchBackend } from \"react-dnd-touch-backend\"\r\nimport { ICrusadeUnit, ICrusadeArmy } from '../Constants'\r\nimport ThreeDotsVerticalIcon from \"../Resources/Icons/ThreeDotsVerticalIcon.svg\";\r\nimport { CalculateCrusadePoints, GetName } from '../Helpers/CrusadeUnitHelper'\r\n\r\nconst DND_ITEM_TYPE = 'row'\r\n\r\ninterface IRowProps {\r\n    index: number,\r\n    moveRow: (dragIndex: number, hoverIndex: number) => void;\r\n    onRowClick: () => void;\r\n    row: Row<ICrusadeUnit>;\r\n    updateRowPosition?: (id: number, index: number) => void;\r\n}\r\n\r\nfunction DraggableTableRow(props: IRowProps): JSX.Element {\r\n    const dropRef = React.useRef<HTMLTableRowElement>(null)\r\n    const dragRef = React.useRef<HTMLTableDataCellElement>(null)\r\n\r\n    const [, drop] = useDrop({\r\n        accept: DND_ITEM_TYPE,\r\n        hover(item, monitor) {\r\n            if (!dropRef.current) {\r\n                return\r\n            }\r\n            const dragIndex = (item as any).index\r\n            const hoverIndex = props.index\r\n            // Don't replace items with themselves\r\n            if (dragIndex === hoverIndex) {\r\n                return\r\n            }\r\n            // Determine rectangle on screen\r\n            const hoverBoundingRect = dropRef.current.getBoundingClientRect()\r\n            // Get vertical middle\r\n            const hoverMiddleY =\r\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n            // Determine mouse position\r\n            const clientOffset = monitor.getClientOffset()\r\n            // Get pixels to the top\r\n            const hoverClientY = (clientOffset?.y ?? 0) - hoverBoundingRect.top\r\n            // Only perform the move when the mouse has crossed half of the items height\r\n            // When dragging downwards, only move when the cursor is below 50%\r\n            // When dragging upwards, only move when the cursor is above 50%\r\n            // Dragging downwards\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return\r\n            }\r\n            // Dragging upwards\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return\r\n            }\r\n            // Time to actually perform the action\r\n            props.moveRow && props.moveRow(dragIndex, hoverIndex);\r\n            // Note: we're mutating the monitor item here!\r\n            // Generally it's better to avoid mutations,\r\n            // but it's good here for the sake of performance\r\n            // to avoid expensive index searches.\r\n            (item as any).index = hoverIndex\r\n        },\r\n    })\r\n    const index = props.index\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: DND_ITEM_TYPE, index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const opacity = isDragging ? 0 : 1\r\n\r\n    preview(drop(dropRef))\r\n    drag(dragRef)\r\n\r\n    return (\r\n        <tr ref={dropRef} style={{ opacity }}>\r\n            <td ref={dragRef} style={{ width: \"36px\" }}>\r\n                <img\r\n                    className=\"icon\"\r\n                    src={ThreeDotsVerticalIcon}\r\n                    alt=\"Move Unit\"\r\n                />\r\n            </td>\r\n            {props.row.cells.map((cell: any) => {\r\n                return <td {...cell.getCellProps()} onClick={props.onRowClick}>{cell.render('Cell')}</td>\r\n            })}\r\n        </tr>\r\n    )\r\n}\r\n\r\ninterface IDraggableTableProps {\r\n    columns: Column<ICrusadeUnit>[];\r\n    onRowClick: (id: number) => void;\r\n    crusadeArmy: ICrusadeArmy;\r\n    updateRowPosition?: (id: number, index: number) => void;\r\n}\r\n\r\nfunction DraggableTable(props: IDraggableTableProps) {\r\n    const columns = React.useMemo<Column<ICrusadeUnit>[]>(() => props.columns, [props.columns])\r\n\r\n    const crusadeUnits = props.crusadeArmy.units.map(unit => {\r\n        return {\r\n            ...unit, crusadePoints: CalculateCrusadePoints(unit), name: GetName(unit, props.crusadeArmy.isUsingAlternateName)\r\n        }\r\n    })\r\n\r\n    const getRowId = React.useCallback(row => { return row.id }, []);\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({\r\n        data: crusadeUnits,\r\n        columns,\r\n        getRowId,\r\n    })\r\n\r\n    function moveRow(dragIndex: number, hoverIndex: number): void {\r\n        const dragRecord = props.crusadeArmy.units[dragIndex]\r\n        props.updateRowPosition && props.updateRowPosition(dragRecord.id, hoverIndex)\r\n    }\r\n\r\n    return (\r\n        <DndProvider backend={TouchBackend} options={{ enableMouseEvents: true }}>\r\n            <table {...getTableProps()} className=\"table table-striped table-bordered table-hover\">\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            <th></th>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(\r\n                        (row, index) => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <DraggableTableRow\r\n                                    index={index}\r\n                                    row={row}\r\n                                    onRowClick={() => props.onRowClick(row.original.id)}\r\n                                    moveRow={moveRow}\r\n                                    updateRowPosition={props.updateRowPosition}\r\n                                    {...row.getRowProps()}\r\n                                />\r\n                            )\r\n                        }\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </DndProvider>\r\n    )\r\n}\r\n\r\nexport default DraggableTable\r\n","import React, { useState } from \"react\";\r\nimport Report from \"./Report/Report\";\r\nimport { ICrusadeArmy, ICrusadeUnit } from \"./Constants\";\r\nimport UnitDisplay from \"./UnitDisplay\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints, GetArmyName } from \"./Helpers/CrusadeUnitHelper\";\r\nimport Header from \"./CommonFields/Header\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport FormButtons from \"./CommonFields/FormButtons\";\r\nimport NameEffectsCard from \"./CommonFields/UnitSummaryCard\";\r\nimport FormButton from \"./CommonFields/FormButton\";\r\nimport RequisitionPointSpending from \"./RequisitionPointSpending\";\r\nimport ReadOnlyRow from \"./CommonFields/ReadonlyRow\";\r\nimport DraggableTable from \"./CommonFields/DraggableTable\";\r\nimport { Column } from \"react-table\";\r\n\r\ninterface ICrusadeArmyRoster {\r\n    crusadeArmy: ICrusadeArmy;\r\n    deleteArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n    goBack: () => void;\r\n    updateArmy: (crusadeArmy: ICrusadeArmy) => void;\r\n}\r\n\r\nfunction CrusadeArmyRoster(props: ICrusadeArmyRoster) {\r\n    const [edittingUnit, setEdittingUnit] = useState<ICrusadeUnit>()\r\n    const [isEditting, setIsEditting] = useState<boolean>()\r\n    const [isReporting, setIsReporting] = useState<boolean>()\r\n    const [isSpendingRequisition, setIsSpendingRequisition] = useState<boolean>()\r\n\r\n    function addUnit() {\r\n        let highestId = 0\r\n        props.crusadeArmy.units.forEach(unit => {\r\n            if (unit.id > highestId) {\r\n                highestId = unit.id\r\n            }\r\n        })\r\n        const newUnit: ICrusadeUnit = {\r\n            id: highestId + 1,\r\n            agendaXp: 0,\r\n            battleHonours: [],\r\n            battleParticipation: 0,\r\n            crusadePoints: 0,\r\n            kills: 0,\r\n            markedForGreatness: 0,\r\n            name: \"\",\r\n            notes: \"\",\r\n            battleScars: [],\r\n            powerLevel: 0\r\n        }\r\n\r\n        setEdittingUnit(newUnit);\r\n    }\r\n\r\n    function saveUnit(unit: ICrusadeUnit) {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1, unit);\r\n        }\r\n        else {\r\n            crusadeArmy.units.push(unit);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(unit);\r\n    }\r\n\r\n    function deleteUnit(unit: ICrusadeUnit): void {\r\n        const crusadeArmy = { ...props.crusadeArmy }\r\n        var existingIndex = crusadeArmy.units.findIndex(u => u.id === unit.id);\r\n        if (existingIndex >= 0) {\r\n            crusadeArmy.units.splice(existingIndex, 1);\r\n        }\r\n\r\n        props.updateArmy(crusadeArmy)\r\n        setEdittingUnit(undefined);\r\n    }\r\n\r\n    function saveArmy(army: ICrusadeArmy) {\r\n        props.updateArmy(army);\r\n        setIsReporting(false);\r\n        setIsEditting(false);\r\n    }\r\n\r\n    function reOrderUnits(id: number, targetIndex: number): void {\r\n        const units = [...props.crusadeArmy.units]\r\n        const originalIndex = units.findIndex(u => u.id === id);\r\n        const unit = units.splice(originalIndex, 1)\r\n        units.splice(targetIndex, 0, unit[0])\r\n\r\n        const army = { ...props.crusadeArmy };\r\n        army.units = units;\r\n\r\n        props.updateArmy(army)\r\n    }\r\n\r\n    let crusadePoints = 0;\r\n    let powerLevel = 0;\r\n    props.crusadeArmy.units.forEach(unit => {\r\n        crusadePoints += CalculateCrusadePoints(unit);\r\n        powerLevel += unit.powerLevel;\r\n    });\r\n\r\n    if (isEditting) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsEditting(false)}\r\n                handleDeleteArmy={() => props.deleteArmy(props.crusadeArmy)}\r\n                saveArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (isReporting || props.crusadeArmy.battleRosterUnitIds) {\r\n        return (\r\n            <Report\r\n                crusadeArmy={props.crusadeArmy}\r\n                goBack={() => setIsReporting(false)}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n    else if (edittingUnit) {\r\n        return (\r\n            <UnitDisplay\r\n                deleteUnit={deleteUnit}\r\n                goBack={() => setEdittingUnit(undefined)}\r\n                saveUnit={saveUnit}\r\n                unit={edittingUnit}\r\n            />\r\n        )\r\n    }\r\n    else if (isSpendingRequisition) {\r\n        return (\r\n            <RequisitionPointSpending\r\n                goBack={() => setIsSpendingRequisition(false)}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateArmy={saveArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    let unitsTableDisplay = null;\r\n    if (props.crusadeArmy.units.length !== 0) {\r\n        const columns: Column<ICrusadeUnit>[] = [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'name',\r\n            },\r\n            {\r\n                Header: 'CP',\r\n                accessor: 'crusadePoints'\r\n            },\r\n            {\r\n                Header: 'PL',\r\n                accessor: 'powerLevel'\r\n            }\r\n        ];\r\n        unitsTableDisplay = (\r\n            <DraggableTable\r\n                columns={columns}\r\n                crusadeArmy={props.crusadeArmy}\r\n                updateRowPosition={reOrderUnits}\r\n                onRowClick={(id: number): void => {\r\n                    const unit = props.crusadeArmy.units.find(u => u.id === id);\r\n                    if (unit) {\r\n                        setEdittingUnit(unit)\r\n                    }\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n    let detachmentTraitCard = undefined\r\n    if (props.crusadeArmy.detachmentTrait) {\r\n        detachmentTraitCard = (\r\n            <NameEffectsCard\r\n                header=\"Detachment Trait\"\r\n                nameEffects={[props.crusadeArmy.detachmentTrait]}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                subHeaderInfo={[\r\n                    { name: \"PL\", value: powerLevel },\r\n                    { name: \"CP\", value: crusadePoints },\r\n                ]}\r\n                headerText={GetArmyName(props.crusadeArmy)}\r\n                onEdit={() => setIsEditting(true)}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        Requisition Points:\r\n                    </Form.Label>\r\n                    {\" \" + props.crusadeArmy.requisitionPoints}\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Spend\"\r\n                        onClick={() => setIsSpendingRequisition(true)}\r\n                        small\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            {detachmentTraitCard}\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    <Form.Label>\r\n                        <h3 >\r\n                            Units\r\n                        </h3>\r\n                    </Form.Label>\r\n                </Col>\r\n                <Col>\r\n                    <FormButton\r\n                        name=\"Add\"\r\n                        onClick={addUnit}\r\n                        small\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <ReadOnlyRow\r\n                firstColumn=\"Power Level\"\r\n                secondColumn={powerLevel + \"/\" + props.crusadeArmy.maximumPowerLevel}\r\n            />\r\n            <Row className=\"mb-2\">\r\n                <Col>\r\n                    {unitsTableDisplay}\r\n                </Col>\r\n            </Row>\r\n            <FormButtons\r\n                primaryButtonName=\"Battle!\"\r\n                primaryButtonOnClick={() => setIsReporting(true)}\r\n                secondaryButtonName=\"Back\"\r\n                secondaryButtonOnClick={props.goBack}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrusadeArmyRoster;","import React, { useState, useEffect } from \"react\";\r\nimport CrusadeArmyRoster from \"./CrusadeArmyRoster\";\r\nimport { ICrusadeArmy, CRUSADE_ARMIES_STORAGE_KEY } from \"./Constants\";\r\nimport EditArmy from \"./EditArmy\";\r\nimport { CalculateCrusadePoints, GetArmyName } from \"./Helpers/CrusadeUnitHelper\";\r\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { ThemeContext } from \"./App\";\r\n\r\nfunction ArmiesList() {\r\n    const [edittingArmy, setEdittingArmy] = useState<ICrusadeArmy>()\r\n    const [crusadeArmies, setCrusadeArmies] = useState<ICrusadeArmy[]>();\r\n    const [selectedCrusadeArmy, setSelectedCrusadeArmy] = useState<ICrusadeArmy>();\r\n    const [crusadeArmiesDisplay, setCrusadeArmiesDisplay] = useState<JSX.Element[]>();\r\n\r\n    useEffect(() => {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        setCrusadeArmies(storageCrusadeArmies);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!crusadeArmies) {\r\n            return;\r\n        }\r\n\r\n        const display = crusadeArmies.map((crusadeArmy, index) => {\r\n            let crusadePoints = 0;\r\n            let powerLevel = 0;\r\n            crusadeArmy.units.forEach(unit => {\r\n                crusadePoints += CalculateCrusadePoints(unit);\r\n                powerLevel += unit.powerLevel;\r\n            })\r\n\r\n            return (\r\n                <Card\r\n                    className=\"mb-3\"\r\n                    key={index}\r\n                    onClick={() => setSelectedCrusadeArmy(crusadeArmy)}\r\n                    style={{ border: `1px solid ${crusadeArmy.traitColor || \"rgb(0, 123, 255)\"}` }} >\r\n                    <Card.Body>\r\n                        <Card.Title as=\"h2\">\r\n                            {GetArmyName(crusadeArmy)}\r\n                        </Card.Title>\r\n                        <Card.Text>\r\n                            {powerLevel + \" PL \"}\r\n                            {crusadePoints + \" CP \"}\r\n                            {crusadeArmy.requisitionPoints + \" RP\"}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        });\r\n\r\n        setCrusadeArmiesDisplay(display);\r\n    }, [crusadeArmies])\r\n\r\n    function updateArmy(crusadeArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === crusadeArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1, crusadeArmy)\r\n        }\r\n        else {\r\n            storageCrusadeArmies.push(crusadeArmy);\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n\r\n        const selectedArmy = storageCrusadeArmies.find(sca => sca.id === crusadeArmy.id);\r\n        setSelectedCrusadeArmy(selectedArmy)\r\n    }\r\n\r\n    function addArmy() {\r\n        const newArmy: ICrusadeArmy = {\r\n            name: \"\",\r\n            id: crusadeArmies?.length ?? 0,\r\n            maximumPowerLevel: 50,\r\n            requisitionPoints: 5,\r\n            units: []\r\n        }\r\n        setEdittingArmy(newArmy)\r\n    }\r\n\r\n    function deleteArmy(deletingArmy: ICrusadeArmy) {\r\n        const storageCrusadeArmies: ICrusadeArmy[] = JSON.parse(window.localStorage.getItem(CRUSADE_ARMIES_STORAGE_KEY) || \"[]\");\r\n        const crusadeArmyIndex = storageCrusadeArmies.findIndex(army => army.id === deletingArmy.id)\r\n        if (crusadeArmyIndex >= 0) {\r\n            storageCrusadeArmies.splice(crusadeArmyIndex, 1)\r\n        }\r\n\r\n        window.localStorage.setItem(CRUSADE_ARMIES_STORAGE_KEY, JSON.stringify(storageCrusadeArmies));\r\n        setCrusadeArmies(storageCrusadeArmies)\r\n        setSelectedCrusadeArmy(undefined)\r\n    }\r\n\r\n    function toggleIsUsingAlternateName() {\r\n        if (!selectedCrusadeArmy) {\r\n            return\r\n        }\r\n\r\n        const army = { ...selectedCrusadeArmy }\r\n        army.isUsingAlternateName = selectedCrusadeArmy.isUsingAlternateName !== undefined\r\n            ? !selectedCrusadeArmy.isUsingAlternateName\r\n            : true\r\n        updateArmy(army)\r\n    }\r\n\r\n    if (edittingArmy) {\r\n        return (\r\n            <EditArmy\r\n                crusadeArmy={edittingArmy}\r\n                handleDeleteArmy={() => deleteArmy(edittingArmy)}\r\n                goBack={() => setEdittingArmy(undefined)}\r\n                saveArmy={updateArmy}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (selectedCrusadeArmy) {\r\n        const context = {\r\n            color: selectedCrusadeArmy.traitColor || \"blue\",\r\n            isUsingAlternateName: selectedCrusadeArmy.isUsingAlternateName,\r\n            toggleIsUsingAlternateName: toggleIsUsingAlternateName\r\n        }\r\n\r\n        return (\r\n            <ThemeContext.Provider value={context}>\r\n                <CrusadeArmyRoster\r\n                    deleteArmy={deleteArmy}\r\n                    crusadeArmy={selectedCrusadeArmy}\r\n                    goBack={() => setSelectedCrusadeArmy(undefined)}\r\n                    updateArmy={updateArmy}\r\n                />\r\n            </ThemeContext.Provider>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"my-2 mx-1 header\">\r\n                <h2>\r\n                    Crusade Armies\r\n                </h2>\r\n            </Row>\r\n            <Row className=\"flex-grow-1\" style={{ overflow: \"auto\" }}>\r\n                <Col >\r\n                    {crusadeArmiesDisplay}\r\n                </Col>\r\n            </Row>\r\n            <Row md=\"2\">\r\n                <Col xs={4}>\r\n                    <Button\r\n                        block\r\n                        size=\"lg\"\r\n                        variant=\"primary\"\r\n                        onClick={addArmy}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArmiesList;","import React from 'react';\r\nimport './App.scss';\r\nimport ArmiesList from './ArmiesList';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\ninterface IContext {\r\n    color: string;\r\n    isUsingAlternateName?: boolean;\r\n    toggleIsUsingAlternateName?: () => void;\r\n}\r\n\r\nexport const ThemeContext = React.createContext<IContext>({ color: \"blue\" });\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Container fluid className=\"h-100\">\r\n            <Row>\r\n                <Col xs={0} sm={1} md={2} lg={3} xl={3} />\r\n                <Col xs={12} sm={10} md={8} lg={6} xl={6}>\r\n                    <ArmiesList />\r\n                </Col>\r\n                <Col xs={0} sm={1} md={2} lg={3} xl={3} />\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/DeleteIcon.0d10f8f1.svg\";"],"sourceRoot":""}